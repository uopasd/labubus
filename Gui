if not LPH_OBFUSCATED then
    loadstring(game:HttpGet("https://raw.githubusercontent.com/Luraph/macrosdk/main/luraphsdk.lua"))()
end
--
if Library and Library.Unload then
	Library:Unload()
end
--
local Workspace = cloneref(game:GetService("Workspace"))
local HttpService = cloneref(game:GetService("HttpService"))
local Debris = cloneref(game:GetService("Debris"))
local Players = cloneref(game:GetService("Players"))
local TweenService = cloneref(game:GetService("TweenService"))
local RunService = cloneref(game:GetService("RunService"))
local CoreGui = cloneref(game:GetService("CoreGui"))
local UserInputService = cloneref(game:GetService("UserInputService"))
local TeleportService = cloneref(game:GetService("TeleportService"))
local Lighting = cloneref(game:GetService("Lighting"))
local ReplicatedStorage = cloneref(game:GetService("ReplicatedStorage"))
local Stats = cloneref(game:GetService("Stats"))
--
local Client = Players.LocalPlayer
local Camera = Workspace:FindFirstChildWhichIsA("Camera")
local Viewport = Camera.ViewportSize
local Fonts = {
    ["Tahoma"] = {Link = "https://github.com/LuckyHub1/LuckyHub/raw/main/zekton_rg.ttf"},
    ["Smallest_Pixel"] = {Link = "https://github.com/LuckyHub1/LuckyHub/raw/refs/heads/main/smallest_pixel-7.ttf"}
}
--
do -- Folders and Fonts
    if not isfolder("LuckyHub") then
        makefolder("LuckyHub")
    end
    --
    if not isfolder("LuckyHub/Configs") then
        makefolder("LuckyHub/Configs")
    end
    --
    if not isfolder("LuckyHub/Fonts") then
        makefolder("LuckyHub/Fonts")
    end
    --
    for Name, Table in Fonts do
        if not isfile("LuckyHub/Fonts/" .. Name .. ".ttf") then
            writefile("LuckyHub/Fonts/" .. Name .. ".ttf", game:HttpGet(Table.Link))
        end
        --
        if not isfile("c/Fonts/" .. Name .. ".font") then
            local Config = {
                name = Name,
                faces = {{
                    name = "Regular",
                    weight = 200,
                    style = "normal",
                    assetId = getcustomasset("LuckyHub/Fonts/" .. Name .. ".ttf")
                }}
            }
            --
            writefile("LuckyHub/Fonts/" .. Name .. ".font", HttpService:JSONEncode(Config))
        end
    end
end
--
do -- Library
    getgenv().Library = {
        Connections = {},
        Errors = {},
        Tweens = {},
        Objects = {},
        Drawings = {},
        DrawingTypes = {"Quad", "Square", "Circle", "Text", "Line", "Triangle", "Font"},
        Sections = {},
        ThemeSections = {},
        Flags = {},
        UnnamedFlags = 0,
        Build = "Enforcement FPS",
        UID = "Enforcement FPS",
        UnsafeMode = false,
        InitTime = os.clock(),
        Folder = "LuckyHub",
        ConfigFolder = "LuckyHub/Configs",
        UI = {
            Name = "LuckyHub",
            CloseBind = Enum.KeyCode.LeftAlt,
            Initialized = false,
            Glows = {},
            BlurObject = nil,
            UseBlur = false,
            ClampDragging = true,
            BlurSize = 14,
            PerformanceDrag = true,
            LastZIndex = 3,
            TweenSpeed = 0.15,
            TweenEasingStyle = Enum.EasingStyle.Quad,
            LastCopiedColor = nil,
            WatermarkRefreshRate = 0.15,
            CurrentSelectedColorPicker = nil,
            CurrentSelectedKeybindMode = nil,
            TotalColorPickers = 0,
            TotalKeybindModes = 0,
            WatermarkPosition = "Top Right",
            SectionZIndex = 100,
            DropdownZIndex = 1,
            IndicatorGlow = nil,
            OpenColorFrames = 0,
            HoverHighlight = false,
            WindowGlow = true,
            WindowGlowThickness = 50,
            ScreenGUI = nil,
            Font = Font.new(getcustomasset("LuckyHub/Fonts/Tahoma.font"), Enum.FontWeight.Regular),
            FontSize = 12,
            DraggingGui = nil,
            KeybindTexts = {},
            Notifications = {
                TopLeft = {},
                Middle = {},
            },
            KeybindType = "Lower",
            Keys = {
                [Enum.KeyCode.LeftShift] = "L-SHIFT",
                [Enum.KeyCode.RightShift] = "R-SHIFT",
                [Enum.KeyCode.LeftControl] = "L-CTRL",
                [Enum.KeyCode.RightControl] = "R-CTRL",
                [Enum.KeyCode.LeftAlt] = "L-ALT",
                [Enum.KeyCode.RightAlt] = "R-ALT",
                [Enum.KeyCode.CapsLock] = "CAPS",
                [Enum.KeyCode.Space] = "SPCE",
                [Enum.KeyCode.One] = "1",
                [Enum.KeyCode.Two] = "2",
                [Enum.KeyCode.Three] = "3",
                [Enum.KeyCode.Four] = "4",
                [Enum.KeyCode.Five] = "5",
                [Enum.KeyCode.Six] = "6",
                [Enum.KeyCode.Seven] = "7",
                [Enum.KeyCode.Eight] = "8",
                [Enum.KeyCode.Nine] = "9",
                [Enum.KeyCode.Zero] = "0",
                [Enum.KeyCode.KeypadOne] = "NUM1",
                [Enum.KeyCode.KeypadTwo] = "NUM2",
                [Enum.KeyCode.KeypadThree] = "NUM3",
                [Enum.KeyCode.KeypadFour] = "NUM4",
                [Enum.KeyCode.KeypadFive] = "NUM5",
                [Enum.KeyCode.KeypadSix] = "NUM6",
                [Enum.KeyCode.KeypadSeven] = "NUM7",
                [Enum.KeyCode.KeypadEight] = "NUM8",
                [Enum.KeyCode.KeypadNine] = "NUM9",
                [Enum.KeyCode.KeypadZero] = "NUM0",
                [Enum.KeyCode.Minus] = "-",
                [Enum.KeyCode.Equals] = "=",
                [Enum.KeyCode.Tilde] = "~",
                [Enum.KeyCode.LeftBracket] = "[",
                [Enum.KeyCode.RightBracket] = "]",
                [Enum.KeyCode.RightParenthesis] = ")",
                [Enum.KeyCode.LeftParenthesis] = "(",
                [Enum.KeyCode.Semicolon] = ",",
                [Enum.KeyCode.Quote] = "'",
                [Enum.KeyCode.BackSlash] = "\\",
                [Enum.KeyCode.Comma] = ",",
                [Enum.KeyCode.Period] = ".",
                [Enum.KeyCode.Slash] = "/",
                [Enum.KeyCode.Asterisk] = "*",
                [Enum.KeyCode.Plus] = "+",
                [Enum.KeyCode.Period] = ".",
                [Enum.KeyCode.Backquote] = "`",
                [Enum.UserInputType.MouseButton1] = "MB1",
                [Enum.UserInputType.MouseButton2] = "MB2",
                [Enum.UserInputType.MouseButton3] = "MMB"
            },
        },
        Theme = {
            Objects = {},
            Default = {
                Accent = Color3.fromRGB(155, 125, 175),
                SecondAccent = Color3.fromRGB(103, 82, 118),
                LightContrast = Color3.fromRGB(42, 44, 56),
                DarkContrast = Color3.fromRGB(37, 37, 50),
                Outline = Color3.fromRGB(32, 32, 38),
                Inline = Color3.fromRGB(60, 55, 75),
                TextColor = Color3.fromRGB(180, 180, 180),
                TextDark = Color3.fromRGB(175, 175, 175),
                TextBorder = Color3.fromRGB(0, 0, 0),
                ImageColor = Color3.fromRGB(255, 255, 255),
                ImageDark = Color3.fromRGB(94, 87, 105),
                Risky = Color3.fromRGB(251, 138, 138),
                Glow = Color3.fromRGB(211, 170, 238),
            },
            Presets = {
                Default = {1, [[{"Outline":"202026","Accent":"9a81b3","SecondAccent":"675276","TextColor":"b4b4b4","TextDark":"888888","LightContrast":"2a2a38","DarkContrast":"242430","TextBorder":"000000","Inline":"3c374b","Risky":"fb8a8a","ImageColor":"ffffff","ImageDark":"525062","Glow":"9a81b3"}]]},
                Abyss = {2, [[{"Outline":"0a0a0a","Accent":"8c87b4","SecondAccent":"5a5582","TextColor":"b4b4b4","TextDark":"888888","LightContrast":"1e1e1e","DarkContrast":"141414","TextBorder":"000000","Inline":"2d2d2d","Risky":"fb8a8a","ImageColor":"ffffff","ImageDark":"454357","Glow":"8c87b4"}]]},
                Drain = {3, [[{"Outline":"222026","Accent":"7d98af","SecondAccent":"506473","TextColor":"b4b4b4","TextDark":"888888","LightContrast":"2f2a38","DarkContrast":"282430","TextBorder":"000000","Inline":"373f4b","Risky":"74ffcd","ImageColor":"ffffff","ImageDark":"506473","Glow":"7d98af"}]]},
            }
        },
    }
    --
    function Library:Validate(Defaults, Options)
        for Index, Value in Defaults do
            if Options[Index] == nil then
                Options[Index] = Value
            end
        end
        --
        return Options
    end
    --
    function Library:Connection(Signal, Func, Name, Table)
        Name = Name or "Unknown"
        Table = Table or Library.Connections
        --
        local Connection = Signal:Connect(function(...)
            local Args = {...}
            --
            local Success, Message = pcall(function() coroutine.wrap(Func)(unpack(Args)) end)
            --
            if not Success and not Library.Errors[Message] then
                if Library.Notify then
                    Library:Notify({Message = ("[ERROR] | An error has occurred:\n%s\nName: %s"):format(Message, Name), Delay = math.huge})
                else
                    warn(("[ERROR] | An error has occurred:\n%s\nName: %s"):format(Message, Name))
                end
                --
                Library.Errors[Message] = Message
                --
                if Table[Connection] then
                    Table[Connection] = nil
                end
                --
                return Connection and Connection:Disconnect()
            end
        end)
        --
        if Connection and Table then
            table.insert(Table, Connection)
        end
        --
        return Connection
    end
    --
    function Library:TweenObject(Object, Info, Goal, Callback)
        if not Object then return end
        --
        local Tween = TweenService:Create(Object, Info, Goal)
        --
        Library:Connection(Tween.Completed, Callback or function() end)
        --
        Tween:Play()
        --
        Library.Tweens[#Library.Tweens + 1] = Tween
    end
    --
    function Library:NewFlag()
        Library.UnnamedFlags += 1
        --
        return ("UnknownFlag%s"):format(tostring(Library.UnnamedFlags))
    end
    --
    function Library:GetHealth(Humanoid)
        if Humanoid then
            return math.clamp(Humanoid.Health, 0, Humanoid.MaxHealth), Humanoid.MaxHealth
        end
    end
    --
    function Library:GetArmor(Object)
        local BodyEffects = Object:FindFirstChild("BodyEffects")
        local ArmorValue = (BodyEffects and BodyEffects:FindFirstChild("Armor"))
        --
        return ArmorValue and math.clamp(ArmorValue.Value, 0, 200) or 200, 200
    end
    --
    function Library:ClampString(String, MaxWidth)
        local Clamped = String
        --
        local TextLabel = Library:CreateObject("TextLabel", {
            FontFace = Library.UI.Font,
            TextStrokeTransparency = 0,
            Text = String,
            Size = UDim2.new(1, 0, 1, 0),
            BorderSizePixel = 0,
            TextScaled = false,
            TextWrapped = false,
            Visible = false,
            TextSize = Library.UI.FontSize,
            Parent = CoreGui
        })
        --
        if TextLabel.TextBounds.X <= MaxWidth then
            TextLabel:Destroy()
            --
            return String
        end
        --
        while TextLabel.TextBounds.X > MaxWidth and #Clamped > 0 do
            Clamped = Clamped:sub(1, #Clamped - 1)
            --
            TextLabel.Text = Clamped .. "..."
            --
            task.wait()
        end
        --
        TextLabel:Destroy()
        --
        return Clamped .. "..."
    end
    --
    function Library:GetConfig()
        local Config = {}
        --
        for Index, Value in Library.Flags do
            if Value.Get and not string.find(Index, "_Status") then
                if typeof(Value:Get()) == "table" and Value:Get().Color and Value:Get().Transparency then
                    local Transparency = Value:Get().Transparency
                    local Hue, Saturation, Value = Value:Get().Color:ToHSV()
                    --
                    Config[Index] = {Hue, Saturation, Value, Transparency}
                else
                    Config[Index] = Value:Get()
                end
            end
        end
        --
        return HttpService:JSONEncode(Config)
    end
    --
    function Library:LoadConfig(Config)
        local Config = HttpService:JSONDecode(Config)
        --
        for Index, Value in Config do
            if Library.Flags[Index] then
                Library.Flags[Index]:Set(Value)
            end
        end
    end
    --
    function Library:CreateObject(Type, Properties)
        local IsDrawing = table.find(Library.DrawingTypes, Type)
        local Table = IsDrawing and Library.Drawings or Library.Objects
        local Object = IsDrawing and Drawing.new(Type) or Instance.new(Type)
        --
        for Index, Value in Properties do
            Object[Index] = Value
        end
        --
        Table[#Table + 1] = Object
        --
        return Object
    end
    --
    function Library:AddTheme(Object, Properties)
        for Index, Value in Properties do
            Library.Theme.Objects[Object] = Library.Theme.Objects[Object] or {}
            Library.Theme.Objects[Object][Index] = Value
        end
    end
    --
    function Library:GetTableIndexes(Table, Custom)
        local Table2 = {}
        --
        for Index, Value in Table do
            Table2[Custom and Value[1] or #Table2 + 1] = Index 
        end
        --
        return Table2
    end
    --
    function Library:UpdateColor(ColorType, ColorValue)
        Library.Theme.Default[ColorType] = ColorValue
        --
        for Object, Properties in Library.Theme.Objects do
            for Property, ThemeKeys in Properties do
                if type(ThemeKeys) == "table" then
                    if Object:IsA("UIGradient") and Property == "Color" then
                        if Library.Theme.Default[ThemeKeys[1]] then
                            Object.Color = ColorSequence.new{
                                ColorSequenceKeypoint.new(0, Library.Theme.Default[ThemeKeys[1]]),
                                ColorSequenceKeypoint.new(1, Library.Theme.Default[ThemeKeys[2]])
                            }
                        end
                    end
                else
                    if ThemeKeys == ColorType then
                        Object[Property] = Library.Theme.Default[ThemeKeys]
                    end
                end
            end
        end
    end
    --
    function Library:UpdateTheme(ThemeType, ThemeValue)
        if Library.Flags["ConfigTheme_" .. ThemeType] then
            Library.Flags["ConfigTheme_" .. ThemeType]:Set(ThemeValue)
        end
    end
    --
    function Library:LoadTheme(ThemeType)
        if Library.Theme.Presets[ThemeType] then
            local ThemeValue = HttpService:JSONDecode(Library.Theme.Presets[ThemeType][2])
            --
            for Index, Value in ThemeValue do
                Library:UpdateTheme(Index, Color3.fromHex(Value))
            end
        end
    end
    --
    function Library:TeleportClient(Position)
        local HumanoidRootPart = Client.Character:FindFirstChild("HumanoidRootPart")
        --
        if HumanoidRootPart and Position then
            HumanoidRootPart.CFrame = Position
        end
    end
    --
    function Library:ScrollingCheck(ScrollingFrame, Frame)
        if not ScrollingFrame:IsA("ScrollingFrame") then return true end
        --
        local VisibleTopLeft = ScrollingFrame.CanvasPosition
        local VisibleBottomRight = VisibleTopLeft + ScrollingFrame.AbsoluteWindowSize
        --
        local FrameTopLeft = Frame.AbsolutePosition - ScrollingFrame.AbsolutePosition + ScrollingFrame.CanvasPosition
        local FrameBottomRight = FrameTopLeft + Frame.AbsoluteSize
        --
        return FrameBottomRight.X > VisibleTopLeft.X and FrameTopLeft.X < VisibleBottomRight.X and FrameBottomRight.Y > VisibleTopLeft.Y and FrameTopLeft.Y < VisibleBottomRight.Y
    end
    --
    function Library:ClampPosition(Object, Position, Offset)
        local ClampedX = math.clamp(Position.X.Offset, Offset, Viewport.X - Object.AbsoluteSize.X - Offset)
        local ClampedY = math.clamp(Position.Y.Offset, Offset, Viewport.Y - Object.AbsoluteSize.Y - Offset)
        --
        return UDim2.new(Position.X.Scale, ClampedX, Position.Y.Scale, ClampedY)
    end
    --
    function Library:Draggable(Object, DragFrame, Shadow)
        local StartingPosition, ObjectPosition, Dragging, PerformanceDragUI
        --
        if not (Object and DragFrame) then return end
        --
        Library:Connection(DragFrame.MouseButton1Down, function()
            Dragging = true
            StartingPosition = UserInputService:GetMouseLocation()
            ObjectPosition = Object.Position
            --
            Library.UI.LastZIndex = Library.UI.LastZIndex + 2
            Object.ZIndex = Library.UI.LastZIndex + Library.UI.DropdownZIndex
            --
            if Shadow then
                Shadow.ZIndex = Library.UI.LastZIndex - 1
            end
            --
            if Library.UI.PerformanceDrag then
                PerformanceDragUI = Library:CreateObject("Frame", {
                    Name = "PerformanceDrag",
                    Position = Object.Position,
                    BorderColor3 = Color3.fromRGB(0, 0, 0),
                    Size = Object.Size,
                    BorderSizePixel = 0,
                    BackgroundTransparency = 1,
                    Visible = true,
                    ZIndex = Library.UI.LastZIndex + 5,
                    Parent = Library.UI.ScreenGUI
                })
                --
                local PerformanceDragOutline = Library:CreateObject("UIStroke", {
                    Name = "PerformanceDragStroke",
                    Color = Library.Theme.Default.Accent,
                    Parent = PerformanceDragUI
                })
            end
            --
            Library.UI.LastZIndex = Object.ZIndex + 2
        end)
        --
        Library:Connection(UserInputService.InputChanged, function(input)
            if input.UserInputType == Enum.UserInputType.MouseMovement and Dragging then
                local MouseLocation = UserInputService:GetMouseLocation()
                local Delta = MouseLocation - StartingPosition
                local NewPosition = UDim2.new(ObjectPosition.X.Scale, ObjectPosition.X.Offset + Delta.X, ObjectPosition.Y.Scale, ObjectPosition.Y.Offset + Delta.Y)
                --
                NewPosition = Library.UI.ClampDragging and Library:ClampPosition(Object, NewPosition, 5) or NewPosition
                --
                if not Library.UI.PerformanceDrag then
                    Library:TweenObject(Object, TweenInfo.new(Library.UI.TweenSpeed, Library.UI.TweenEasingStyle, Enum.EasingDirection.Out), {Position = NewPosition})
                    --
                    if Shadow then
                        Library:TweenObject(Shadow, TweenInfo.new(Library.UI.TweenSpeed, Library.UI.TweenEasingStyle, Enum.EasingDirection.Out), {Position = NewPosition})
                    end
                else
                    PerformanceDragUI.Position = NewPosition
                end
            end
        end)
        --
        Library:Connection(UserInputService.InputEnded, function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 and Dragging then
                Dragging = false
                --
                if Library.UI.PerformanceDrag then
                    PerformanceDragUI:Destroy()
                    --
                    Library:TweenObject(Object, TweenInfo.new(Library.UI.TweenSpeed, Library.UI.TweenEasingStyle, Enum.EasingDirection.Out), {Position = PerformanceDragUI.Position})
                    --
                    if Shadow then
                        Library:TweenObject(Shadow, TweenInfo.new(Library.UI.TweenSpeed, Library.UI.TweenEasingStyle, Enum.EasingDirection.Out), {Position = PerformanceDragUI.Position})
                    end
                end
            end
        end)
    end
    --
    function Library:Resizable(Object, DragFrame, MinResize, MaxResize, Shadow)
		local StartingSize, ObjectSize, Dragging, MouseLocation, PerformanceDragUI, NewMouse, Hovering
		--
		local function UpdateSize()
			if not MouseLocation then return end
			--
			local CurrentMousePosition = UserInputService:GetMouseLocation()
			local Delta = CurrentMousePosition - MouseLocation
			--
			return UDim2.new(0, math.clamp(StartingSize.X.Offset + Delta.X, MinResize.X.Offset, MaxResize.X.Offset), 0, math.clamp(StartingSize.Y.Offset + Delta.Y, MinResize.Y.Offset, MaxResize.Y.Offset))
		end
		--
		Library:Connection(DragFrame.MouseEnter, function()
			Hovering = true
		end)
		--
		Library:Connection(DragFrame.MouseLeave, function()
			if NewMouse then NewMouse:Destroy() NewMouse = nil end
			--
			UserInputService.MouseIconEnabled = true
			Hovering = false
		end)
		--
		Library:Connection(DragFrame.InputBegan, function(input)
			if input.UserInputType == Enum.UserInputType.MouseButton1 then
				Dragging = true
				MouseLocation = UserInputService:GetMouseLocation()
				StartingSize = Object.Size
				--
				Library.UI.LastZIndex = Library.UI.LastZIndex + 2
				Object.ZIndex = Library.UI.LastZIndex + Library.UI.DropdownZIndex
				Shadow.ZIndex = Object.ZIndex - 2
				--
				if Library.UI.PerformanceDrag then
					PerformanceDragUI = Library:CreateObject("Frame", {
						Name = "PerformanceDrag",
						Position = Object.Position,
						BorderColor3 = Color3.fromRGB(0, 0, 0),
						Size = Object.Size,
						BorderSizePixel = 0,
						BackgroundTransparency = 1,
						Visible = true,
						ZIndex = Library.UI.LastZIndex + 5,
						Parent = Library.UI.ScreenGUI
					})
					--
					local PerformanceDragOutline = Library:CreateObject("UIStroke", {
						Name = "PerformanceDragStroke",
						Color = Library.Theme.Default.Accent,
						Parent = PerformanceDragUI
					})
				end
				--
				Library.UI.LastZIndex = Object.ZIndex + 2
			end
		end)
		--
		Library:Connection(UserInputService.InputChanged, function(input)
			if input.UserInputType == Enum.UserInputType.MouseMovement then
				if Hovering or Dragging then
					local MousePosition = UserInputService:GetMouseLocation()
					--
					UserInputService.MouseIconEnabled = false
					--
					if not NewMouse then
						NewMouse = Library:CreateObject("ImageLabel", {
							BorderColor3 = Color3.fromRGB(0, 0, 0),
							Image = "rbxassetid://87982048533100",
							BackgroundTransparency = 1,
							AnchorPoint = Vector2.new(0.5, 0.5),
							Name = "Transparency",
							Size = UDim2.new(0, 35, 0, 35),
							ZIndex = 10000,
							BorderSizePixel = 0,
							BackgroundColor3 = Color3.fromRGB(255, 255, 255),
							Parent = Library.UI.ScreenGUI
						})
					end
					--
					NewMouse.Position = UDim2.new(0, MousePosition.X, 0, MousePosition.Y)
				end
				--
				if Dragging then
					if not Library.UI.PerformanceDrag then
						Library:TweenObject(Object, TweenInfo.new(Library.UI.TweenSpeed, Library.UI.TweenEasingStyle, Enum.EasingDirection.Out), {Size = UpdateSize()})
						Library:TweenObject(Shadow, TweenInfo.new(Library.UI.TweenSpeed, Library.UI.TweenEasingStyle, Enum.EasingDirection.Out), {Size = UpdateSize()})
					else
						PerformanceDragUI.Size = UpdateSize()
					end
				end
			end
		end)
		--
		Library:Connection(UserInputService.InputEnded, function(input)
			if input.UserInputType == Enum.UserInputType.MouseButton1 and Dragging then
				if NewMouse then NewMouse:Destroy() NewMouse = nil end
				--
				UserInputService.MouseIconEnabled = true
				Dragging = false
				--
				if Library.UI.PerformanceDrag then
					PerformanceDragUI:Destroy()
					--
					Library:TweenObject(Object, TweenInfo.new(Library.UI.TweenSpeed, Library.UI.TweenEasingStyle, Enum.EasingDirection.Out), {Size = PerformanceDragUI.Size})
					Library:TweenObject(Shadow, TweenInfo.new(Library.UI.TweenSpeed, Library.UI.TweenEasingStyle, Enum.EasingDirection.Out), {Size = PerformanceDragUI.Size})
				end
			end
		end)
	end
    --
    Library.__index = Library
    Library.Sections.__index = Library.Sections
    Library.ThemeSections.__index = Library.ThemeSections
    --
    local Sections = Library.Sections
    local ThemeSections = Library.ThemeSections
    --
    function Library:ColorPicker(Options)
        Options = Library:Validate({
            Name = "Preview Color Picker",
            Default = Color3.fromRGB(255, 0, 0),
            Alpha = 1,
            AlphaBar = true,
            Parent = nil,
            MainUI = nil,
            TabUI = nil,
            Count = 1,
            Keybind = false,
            Flag = Library:NewFlag(),
            Callback = function() end,
        }, Options or {})
        --
        local Hue, Saturation, Value = Options.Default:ToHSV()
        --
        local ColorPicker = {
            Hover = false,
            Active = false,
            MouseDown = false,
            MainFrameHover = false,
            Color = Options.Default,
            SecondColor = Color3.fromRGB(math.max(math.floor(Options.Default.R * 255) - 23, 0), math.max(math.floor(Options.Default.G * 255) - 23, 0), math.max(math.floor(Options.Default.B * 255) - 23, 0)),
            Saturation = {Saturation, Value},
            Alpha = Options.Alpha,
            Hue = Hue,
            LastCopiedColor = {self.Color, self.Alpha},
            FrameOpened = false,
            Mode = "Normal",
            CurrentMode = nil,
            Loop = nil,
        }
        --
        Library.Flags[Options.Flag] = ColorPicker
        --
        Library.UI.TotalColorPickers += 1
        --
        if Options.Keybind then
            Options.Count += 1
        end
        --
        local ColorPickerOutline_6 = Library:CreateObject("Frame", {
            AnchorPoint = Vector2.new(1, 0),
            Name = "ColorPickerOutline" .. Library.UI.TotalColorPickers,
            Position = UDim2.new(1, 0 - (Options.Count - 1) * 28, 0, 2),
            BorderColor3 = Color3.fromRGB(0, 0, 0),
            Size = UDim2.new(0, 24, 0, 14),
            BorderSizePixel = 0,
            BackgroundColor3 = Library.Theme.Default.Outline,
            Parent = Options.Parent
        })
        --
        Library:AddTheme(ColorPickerOutline_6, {
            BackgroundColor3 = "Outline",
        })
        --
        local ColorPickerChecker = Library:CreateObject("Frame", {
            AnchorPoint = Vector2.new(0, 1),
            Position = UDim2.new(0, 0, 1, 4),
            BorderColor3 = Color3.fromRGB(0, 0, 0),
            Size = UDim2.new(1, 0, 0, 1),
            Visible = false,
            BorderSizePixel = 0,
            Parent = ColorPickerOutline_6
        })
        --
        local ClickDetection_415 = Library:CreateObject("TextButton", {
            FontFace = Library.UI.Font,
            TextColor3 = Color3.fromRGB(0, 0, 0),
            BorderColor3 = Color3.fromRGB(0, 0, 0),
            Name = "ClickDetection_415",
            BackgroundTransparency = 1,
            Size = UDim2.new(1, 0, 1, 0),
            BorderSizePixel = 0,
            TextTransparency = 1,
            TextSize = Library.UI.FontSize,
            BackgroundColor3 = Color3.fromRGB(255, 255, 255),
            Parent = ColorPickerOutline_6
        })
        --
        local ColorPickerInline_6 = Library:CreateObject("Frame", {
            Name = "ColorPickerInline_6",
            Position = UDim2.new(0, 1, 0, 1),
            BorderColor3 = Color3.fromRGB(0, 0, 0),
            Size = UDim2.new(1, -2, 1, -2),
            BorderSizePixel = 0,
            BackgroundColor3 = Library.Theme.Default.Inline,
            Parent = ColorPickerOutline_6
        })
        --
        Library:AddTheme(ColorPickerInline_6, {
            BackgroundColor3 = "Inline",
        })
        --
        local ColorPickerMain_12 = Library:CreateObject("Frame", {
            Name = "ColorPickerMain_12",
            Position = UDim2.new(0, 1, 0, 1),
            BorderColor3 = Color3.fromRGB(0, 0, 0),
            Size = UDim2.new(1, -2, 1, -2),
            BorderSizePixel = 0,
            BackgroundColor3 = Color3.fromRGB(255, 255, 255),
            ZIndex = 3,
            Parent = ColorPickerInline_6
        })
        --
        local UIGradient_33152 = Library:CreateObject("UIGradient", {
            Rotation = 90,
            Color = ColorSequence.new{
                ColorSequenceKeypoint.new(0, ColorPicker.Color),
                ColorSequenceKeypoint.new(1, ColorPicker.SecondColor)
            },
            Parent = ColorPickerMain_12
        })
        --
        local ColorPickerTransparency = Library:CreateObject("ImageLabel", {
            BorderColor3 = Color3.fromRGB(0, 0, 0),
            Image = "rbxassetid://17712772030",
            ImageColor3 = Library.Theme.Default.DarkContrast,
            BackgroundTransparency = 1,
            Name = "Transparency",
            Size = UDim2.new(1, -2, 1, -2),
            Position = UDim2.new(0, 1, 0, 1),
            BorderSizePixel = 0,
            BackgroundColor3 = Color3.fromRGB(255, 255, 255),
            Parent = ColorPickerInline_6
        })
        --
        Library:AddTheme(ColorPickerTransparency, {
            ImageColor3 = "DarkContrast",
        })
        --
        do -- Functions
            function ColorPicker:SetVisible(Bool)
                ColorPickerOutline_6.Visible = Bool
                --
                if Bool == false then
                    ColorPicker:RemoveFrame()
                end
            end
            --
            function ColorPicker:AddFrame()
                Library.UI.CurrentSelectedColorPicker = {ColorPicker = ColorPicker, ColorPickerOutline = ColorPickerOutline_6, Parent = Options.Parent}
                --
                Library.UI.OpenColorFrames += 1
                --
                local ColorPickerMainOutline_2 = Library:CreateObject("Frame", {
                    AnchorPoint = Vector2.new(1, 0),
                    Name = "ColorPickerFrame" .. Library.UI.TotalColorPickers,
                    BorderColor3 = Color3.fromRGB(0, 0, 0),
                    Size = UDim2.new(0, 200, 0, 200),
                    BorderSizePixel = 0,
                    BackgroundColor3 = Library.Theme.Default.Outline,
                    ZIndex = Options.MainUI.ZIndex + Library.UI.DropdownZIndex,
                    Parent = Library.UI.ScreenGUI
                })
                --
                Library:AddTheme(ColorPickerMainOutline_2, {
                    BackgroundColor3 = "Outline",
                })
                --
                local ColorPickerMainInline_2 = Library:CreateObject("Frame", {
                    Name = "ColorPickerMainInline_2",
                    Position = UDim2.new(0, 1, 0, 1),
                    BorderColor3 = Color3.fromRGB(0, 0, 0),
                    Size = UDim2.new(1, -2, 1, -2),
                    BorderSizePixel = 0,
                    BackgroundColor3 = Library.Theme.Default.Inline,
                    Parent = ColorPickerMainOutline_2
                })
                --
                Library:AddTheme(ColorPickerMainInline_2, {
                    BackgroundColor3 = "Inline",
                })
                --
                local ColorPickerMain_13 = Library:CreateObject("Frame", {
                    Name = "ColorPickerMain_13",
                    Position = UDim2.new(0, 1, 0, 1),
                    BorderColor3 = Color3.fromRGB(0, 0, 0),
                    Size = UDim2.new(1, -2, 1, -2),
                    BorderSizePixel = 0,
                    BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                    Parent = ColorPickerMainInline_2
                })
                --
                local UIGradient_179 = Library:CreateObject("UIGradient", {
                    Rotation = -90,
                    Color = ColorSequence.new{
                        ColorSequenceKeypoint.new(0, Library.Theme.Default.LightContrast),
                        ColorSequenceKeypoint.new(1, Library.Theme.Default.DarkContrast)
                    },
                    Parent = ColorPickerMain_13
                })
                --
                Library:AddTheme(UIGradient_179, {
                    Color = {"LightContrast", "DarkContrast"},
                })
                --
                local ChangingFrameOutline_2 = Library:CreateObject("Frame", {
                    Name = "ChangingFrameOutline_2",
                    Position = UDim2.new(0, 15, 0, 16),
                    BorderColor3 = Color3.fromRGB(0, 0, 0),
                    Size = UDim2.new(1, -15, 1, -31),
                    BorderSizePixel = 0,
                    BackgroundColor3 = Library.Theme.Default.Outline,
                    Parent = ColorPickerMain_13
                })
                --
                Library:AddTheme(ChangingFrameOutline_2, {
                    BackgroundColor3 = "Outline",
                })
                --
                local ChangingColorInline_4 = Library:CreateObject("Frame", {
                    Name = "ActualColorInline_4",
                    Position = UDim2.new(0, 1, 0, 1),
                    BorderColor3 = Color3.fromRGB(0, 0, 0),
                    Size = UDim2.new(1, -2, 1, -2),
                    BorderSizePixel = 0,
                    BackgroundColor3 = Library.Theme.Default.Inline,
                    Parent = ChangingFrameOutline_2
                })
                --
                Library:AddTheme(ChangingColorInline_4, {
                    BackgroundColor3 = "Inline",
                })
                --
                local ColorPickerMain_14 = Library:CreateObject("Frame", {
                    Name = "ColorPickerMain_14",
                    Position = UDim2.new(0, 1, 0, 1),
                    BorderColor3 = Color3.fromRGB(0, 0, 0),
                    Size = UDim2.new(1, -2, 1, -2),
                    BorderSizePixel = 0,
                    BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                    Parent = ChangingColorInline_4
                })
                --
                local UIGradient_180 = Library:CreateObject("UIGradient", {
                    Rotation = 180,
                    Color = ColorSequence.new{
                        ColorSequenceKeypoint.new(0, ColorPicker.Color),
                        ColorSequenceKeypoint.new(1, Color3.fromRGB(255, 255, 255))
                    },
                    Parent = ColorPickerMain_14
                })
                --
                local ChangingImage_2 = Library:CreateObject("ImageLabel", {
                    ImageColor3 = Color3.fromRGB(0, 0, 0),
                    BorderColor3 = Color3.fromRGB(0, 0, 0),
                    Image = "rbxassetid://8180999986",
                    Name = "ChangingImage_2",
                    BackgroundTransparency = 1,
                    Size = UDim2.new(1, 0, 1, 0),
                    BorderSizePixel = 0,
                    BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                    Parent = ColorPickerMain_14
                })
                --
                local HueDraggingDotOutline_3 = Library:CreateObject("Frame", {
                    Name = "SatDraggingLineOutline_3",
                    Position = UDim2.new(0.5, 0, 0, 0),
                    BorderColor3 = Color3.fromRGB(0, 0, 0),
                    Size = UDim2.new(0, 5, 0, 5),
                    BorderSizePixel = 0,
                    BackgroundColor3 = Library.Theme.Default.Outline,
                    Parent = ColorPickerMain_14
                })
                --
                Library:AddTheme(HueDraggingDotOutline_3, {
                    BackgroundColor3 = "Outline",
                })
                --
                local HueDraggingDot_5 = Library:CreateObject("Frame", {
                    Name = "HueDraggingLine_5",
                    Position = UDim2.new(0, 1, 0, 1),
                    BorderColor3 = Color3.fromRGB(0, 0, 0),
                    Size = UDim2.new(1, -2, 1, -2),
                    BorderSizePixel = 0,
                    BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                    Parent = HueDraggingDotOutline_3
                })
                --
                local ClickDetection_41 = Library:CreateObject("TextButton", {
                    FontFace = Library.UI.Font,
                    TextColor3 = Color3.fromRGB(0, 0, 0),
                    BorderColor3 = Color3.fromRGB(0, 0, 0),
                    Name = "ClickDetection_41",
                    BackgroundTransparency = 1,
                    Size = UDim2.new(1, 0, 1, 0),
                    BorderSizePixel = 0,
                    TextTransparency = 1,
                    TextSize = Library.UI.FontSize,
                    BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                    Parent = ColorPickerMain_14
                })
                --
                local UIPadding_223 = Library:CreateObject("UIPadding", {
                    PaddingTop = UDim.new(0, 4),
                    PaddingBottom = UDim.new(0, 4),
                    PaddingRight = UDim.new(0, 4),
                    PaddingLeft = UDim.new(0, 4),
                    Parent = ColorPickerMain_13
                })
                --
                local HueSliderOutline_2 = Library:CreateObject("Frame", {
                    Name = "HueSliderOutline_2",
                    Position = UDim2.new(0, 0, 0, 16),
                    BorderColor3 = Color3.fromRGB(0, 0, 0),
                    Size = UDim2.new(0, 14, 1, -31),
                    BorderSizePixel = 0,
                    BackgroundColor3 = Library.Theme.Default.Outline,
                    Parent = ColorPickerMain_13
                })
                --
                Library:AddTheme(HueSliderOutline_2, {
                    BackgroundColor3 = "Outline",
                })
                --
                local HueSliderInline_2 = Library:CreateObject("Frame", {
                    Name = "HueSliderInline_2",
                    Position = UDim2.new(0, 1, 0, 1),
                    BorderColor3 = Color3.fromRGB(0, 0, 0),
                    Size = UDim2.new(1, -2, 1, -2),
                    BorderSizePixel = 0,
                    BackgroundColor3 = Library.Theme.Default.Inline,
                    Parent = HueSliderOutline_2
                })
                --
                Library:AddTheme(HueSliderInline_2, {
                    BackgroundColor3 = "Inline",
                })
                --
                local HueImage_2 = Library:CreateObject("ImageLabel", {
                    BorderColor3 = Color3.fromRGB(0, 0, 0),
                    Image = "rbxassetid://8180989234",
                    BackgroundTransparency = 1,
                    Position = UDim2.new(0, 1, 0, 1),
                    Name = "HueImage_2",
                    Size = UDim2.new(1, -2, 1, -2),
                    BorderSizePixel = 0,
                    BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                    Parent = HueSliderInline_2
                })
                --
                local HueDraggingLineOutline_2 = Library:CreateObject("Frame", {
                    Size = UDim2.new(1, 0, 0, 4),
                    Name = "HueDraggingLineOutline_2",
                    Position = UDim2.new(0, 0, 0.5, 0),
                    BorderColor3 = Color3.fromRGB(0, 0, 0),
                    ZIndex = 2,
                    BorderSizePixel = 0,
                    BackgroundColor3 = Library.Theme.Default.Outline,
                    Parent = HueImage_2
                })
                --
                Library:AddTheme(HueDraggingLineOutline_2, {
                    BackgroundColor3 = "Outline",
                })
                --
                local HueDraggingLine_6 = Library:CreateObject("Frame", {
                    Name = "HueDraggingLine_6",
                    Position = UDim2.new(0, 1, 0, 1),
                    BorderColor3 = Color3.fromRGB(0, 0, 0),
                    Size = UDim2.new(1, -2, 1, -2),
                    BorderSizePixel = 0,
                    BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                    Parent = HueDraggingLineOutline_2
                })
                --
                local ClickDetection_42 = Library:CreateObject("TextButton", {
                    FontFace = Library.UI.Font,
                    TextColor3 = Color3.fromRGB(0, 0, 0),
                    BorderColor3 = Color3.fromRGB(0, 0, 0),
                    Name = "ClickDetection_42",
                    BackgroundTransparency = 1,
                    Size = UDim2.new(1, 0, 1, 0),
                    BorderSizePixel = 0,
                    TextTransparency = 1,
                    TextSize = Library.UI.FontSize,
                    BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                    Parent = HueImage_2
                })
                --
                local ActualColorOutline_2 = Library:CreateObject("Frame", {
                    Name = "ActualColorOutline_2",
                    Position = UDim2.new(0, 0, 1, -14),
                    BorderColor3 = Color3.fromRGB(0, 0, 0),
                    Size = UDim2.new(0, 14, 0, 14),
                    BorderSizePixel = 0,
                    BackgroundColor3 = Library.Theme.Default.Outline,
                    Parent = ColorPickerMain_13
                })
                --
                Library:AddTheme(ActualColorOutline_2, {
                    BackgroundColor3 = "Outline",
                })
                --
                local ActualColorInline_5 = Library:CreateObject("Frame", {
                    Name = "ActualColorInline_5",
                    Position = UDim2.new(0, 1, 0, 1),
                    BorderColor3 = Color3.fromRGB(0, 0, 0),
                    Size = UDim2.new(1, -2, 1, -2),
                    BorderSizePixel = 0,
                    BackgroundColor3 = Library.Theme.Default.Inline,
                    Parent = ActualColorOutline_2
                })
                --
                Library:AddTheme(ActualColorInline_5, {
                    BackgroundColor3 = "Inline",
                })
                --
                local ColorPickerMain_15 = Library:CreateObject("Frame", {
                    Name = "ColorPickerMain_15",
                    Position = UDim2.new(0, 1, 0, 1),
                    BorderColor3 = Color3.fromRGB(0, 0, 0),
                    Size = UDim2.new(1, -2, 1, -2),
                    BorderSizePixel = 0,
                    BackgroundColor3 = ColorPicker.Color,
                    Parent = ActualColorInline_5
                })
                --
                local ClickDetection_43 = Library:CreateObject("TextButton", {
                    FontFace = Library.UI.Font,
                    TextColor3 = Color3.fromRGB(0, 0, 0),
                    BorderColor3 = Color3.fromRGB(0, 0, 0),
                    Name = "ClickDetection_43",
                    BackgroundTransparency = 1,
                    Size = UDim2.new(1, 0, 1, 0),
                    BorderSizePixel = 0,
                    TextTransparency = 1,
                    TextSize = Library.UI.FontSize,
                    BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                    Parent = ColorPickerMain_15
                })
                --
                local SatSliderOutline_2 = Library:CreateObject("Frame", {
                    Name = "SatSliderOutline_2",
                    Position = UDim2.new(0, 15, 1, -14),
                    BorderColor3 = Color3.fromRGB(0, 0, 0),
                    Size = UDim2.new(1, -15, 0, 14),
                    BorderSizePixel = 0,
                    BackgroundColor3 = Library.Theme.Default.Outline,
                    Parent = ColorPickerMain_13
                })
                --
                Library:AddTheme(SatSliderOutline_2, {
                    BackgroundColor3 = "Outline",
                })
                --
                local SatSliderInline_2 = Library:CreateObject("Frame", {
                    Name = "SatSliderInline_2",
                    Position = UDim2.new(0, 1, 0, 1),
                    BorderColor3 = Color3.fromRGB(0, 0, 0),
                    Size = UDim2.new(1, -2, 1, -2),
                    BorderSizePixel = 0,
                    BackgroundColor3 = Library.Theme.Default.Inline,
                    Parent = SatSliderOutline_2
                })
                --
                Library:AddTheme(SatSliderInline_2, {
                    BackgroundColor3 = "Inline",
                })
                --
                local SatSliderColor_2 = Library:CreateObject("Frame", {
                    Name = "SatSliderColor_2",
                    Position = UDim2.new(0, 1, 0, 1),
                    BorderColor3 = Color3.fromRGB(0, 0, 0),
                    Size = UDim2.new(1, -2, 1, -2),
                    BorderSizePixel = 0,
                    Rotation = 180,
                    BackgroundColor3 = ColorPicker.Color,
                    Parent = SatSliderInline_2
                })
                --
                local SatImage_2 = Library:CreateObject("ImageLabel", {
                    Image = "rbxassetid://17716156120",
                    BackgroundTransparency = 1,
                    Name = "SatImage_2",
                    BorderColor3 = Color3.fromRGB(0, 0, 0),
                    Size = UDim2.new(1, 0, 1, 0),
                    BorderSizePixel = 0,
                    ImageColor3 = Library.Theme.Default.DarkContrast,
                    BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                    Parent = SatSliderColor_2
                })
                --
                Library:AddTheme(SatImage_2, {
                    ImageColor3 = "DarkContrast",
                })
                --
                local SatDraggingLineOutline_4 = Library:CreateObject("Frame", {
                    Size = UDim2.new(0, 4, 1, 0),
                    Name = "SatDraggingLineOutline_4",
                    Position = UDim2.new(0.5, 0, 0, 0),
                    BorderColor3 = Color3.fromRGB(0, 0, 0),
                    ZIndex = 2,
                    BorderSizePixel = 0,
                    BackgroundColor3 = Library.Theme.Default.Outline,
                    Parent = SatSliderColor_2
                })
                --
                Library:AddTheme(SatDraggingLineOutline_4, {
                    BackgroundColor3 = "Outline",
                })
                --
                local HueDraggingLine_7 = Library:CreateObject("Frame", {
                    Name = "HueDraggingLine_7",
                    Position = UDim2.new(0, 1, 0, 1),
                    BorderColor3 = Color3.fromRGB(0, 0, 0),
                    Size = UDim2.new(1, -2, 1, -2),
                    BorderSizePixel = 0,
                    BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                    Parent = SatDraggingLineOutline_4
                })
                --
                local ClickDetection_44 = Library:CreateObject("TextButton", {
                    FontFace = Library.UI.Font,
                    TextColor3 = Color3.fromRGB(0, 0, 0),
                    BorderColor3 = Color3.fromRGB(0, 0, 0),
                    Name = "ClickDetection_44",
                    BackgroundTransparency = 1,
                    Size = UDim2.new(1, 0, 1, 0),
                    BorderSizePixel = 0,
                    TextTransparency = 1,
                    TextSize = Library.UI.FontSize,
                    BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                    Parent = SatSliderColor_2
                })
                --
                local AccentBar = Library:CreateObject("Frame", {
                    Name = "AccentBar",
                    BorderColor3 = Color3.fromRGB(0, 0, 0),
                    Size = UDim2.new(1, 8, 0, 2),
                    Position = UDim2.new(0, -4, 0, -4),
                    BorderSizePixel = 0,
                    BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                    Parent = ColorPickerMain_13
                })
                --
                local UIGradient_33122 = Library:CreateObject("UIGradient", {
                    Rotation = 90,
                    Color = ColorSequence.new{
                        ColorSequenceKeypoint.new(0, Library.Theme.Default.Accent),
                        ColorSequenceKeypoint.new(1, Library.Theme.Default.SecondAccent)
                    },
                    Parent = AccentBar
                })
                --
                Library:AddTheme(UIGradient_33122, {
                    Color = {"Accent", "SecondAccent"}
                })
                --
                local Name_6 = Library:CreateObject("TextLabel", {
                    FontFace = Library.UI.Font,
                    TextColor3 = Library.Theme.Default.TextColor,
                    BorderColor3 = Color3.fromRGB(0, 0, 0),
                    Text = Options.Name,
                    TextStrokeTransparency = 0,
                    Name = "Name_6",
                    BackgroundTransparency = 1,
                    TextXAlignment = Enum.TextXAlignment.Left,
                    Size = UDim2.new(1, 0, 0, 10),
                    BorderSizePixel = 0,
                    TextSize = Library.UI.FontSize,
                    BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                    Parent = ColorPickerMain_13
                })
                --
                Library:AddTheme(Name_6, {
                    TextColor3 = "TextColor",
                })
                --
                local UIPadding_224 = Library:CreateObject("UIPadding", {
                    PaddingTop = UDim.new(0, 2),
                    PaddingLeft = UDim.new(0, 2),
                    Parent = Name_6
                })
                --
                do -- Functions
                    function ColorPicker:UpdateSize()
                        local xSize = Options.Parent.AbsoluteSize.X
                        local ySize = Options.TabUI and Options.MainUI.AbsoluteSize.Y / 2.5 or Options.MainUI.AbsoluteSize.Y / 1.75
                        --
                        ySize = math.clamp(ySize, xSize, math.huge)
                        --
                        ColorPickerMainOutline_2.Position = UDim2.new(0, ColorPickerOutline_6.AbsolutePosition.X + ColorPickerOutline_6.AbsoluteSize.X, 0, (ColorPickerOutline_6.AbsolutePosition.Y + ColorPickerOutline_6.AbsoluteSize.Y + game:GetService("GuiService"):GetGuiInset().Y + 4))
                        ColorPickerMainOutline_2.Size = UDim2.new(0, xSize, 0, ySize)
                    end
                    --
                    ColorPicker:UpdateSize()
                    --
                    Library:Connection(Options.MainUI:GetPropertyChangedSignal("AbsolutePosition"), ColorPicker.UpdateSize)
                    --
                    Library:Connection(Options.MainUI:GetPropertyChangedSignal("AbsoluteSize"), function()
                        if ColorPicker.Active then
                            ColorPickerMainOutline_2.Visible = Library:ScrollingCheck(Options.Parent.Parent, ColorPickerChecker)
                        end
                        --
                        ColorPicker:UpdateSize()
                    end)
                    --
                    if Options.Parent.Parent:IsA("ScrollingFrame") then
                        Library:Connection(Options.Parent.Parent:GetPropertyChangedSignal("CanvasPosition"), function()
                            ColorPicker:UpdateSize()
                            --
                            if ColorPicker.Active then
                                ColorPickerMainOutline_2.Visible = Library:ScrollingCheck(Options.Parent.Parent, ColorPickerChecker)
                            end
                        end)
                    end
                    --
                    Library:Connection(Options.MainUI:GetPropertyChangedSignal("ZIndex"), function()
                        ColorPickerMainOutline_2.ZIndex = Options.MainUI.ZIndex + Library.UI.DropdownZIndex
                    end)
                    --
                    Library:Connection(Options.MainUI:GetPropertyChangedSignal("Visible"), function()
                        if not Options.MainUI.Visible then
                            ColorPickerMainOutline_2.Visible = false
                        else
                            ColorPickerMainOutline_2.Visible = ColorPicker.Active
                        end
                    end)
                    --
                    Library:Connection(Options.Parent.Parent:GetPropertyChangedSignal("Visible"), function()
                        if not Options.Parent.Parent.Visible then
                            ColorPickerMainOutline_2.Visible = false
                        else
                            ColorPickerMainOutline_2.Visible = ColorPicker.Active
                        end
                    end)
                    --
                    Library:Connection(Options.Parent.Parent.Parent.Parent.Parent.Parent.Parent:GetPropertyChangedSignal("Visible"), function() -- only way it would work ignore
                        if not Options.Parent.Parent.Parent.Parent.Parent.Parent.Parent.Visible then
                            ColorPickerMainOutline_2.Visible = false
                        else
                            ColorPickerMainOutline_2.Visible = ColorPicker.Active
                        end
                    end)
                    --
                    function ColorPicker:Update()
                        ColorPicker.Color = Color3.fromHSV(ColorPicker.Hue, ColorPicker.Saturation[1], ColorPicker.Saturation[2])
                        ColorPicker.SecondColor = Color3.fromRGB(math.max(math.floor(ColorPicker.Color.R * 255) - 23, 0), math.max(math.floor(ColorPicker.Color.G * 255) - 23, 0), math.max(math.floor(ColorPicker.Color.B * 255) - 23, 0))
                        --
                        UIGradient_33152.Color = ColorSequence.new{ColorSequenceKeypoint.new(0, ColorPicker.Color), ColorSequenceKeypoint.new(1, ColorPicker.SecondColor)}
                        ColorPickerMain_15.BackgroundColor3 = ColorPicker.Color
                        SatSliderColor_2.BackgroundColor3 = ColorPicker.Color
                        ColorPickerMain_12.BackgroundTransparency = 1 - ColorPicker.Alpha
                        UIGradient_180.Color = ColorSequence.new{ColorSequenceKeypoint.new(0.000, Color3.fromHSV(ColorPicker.Hue, 1, 1)), ColorSequenceKeypoint.new(1.000, Color3.fromRGB(255, 255, 255))}
                        --
                        local MaxSaturationX = math.max(0, ColorPickerMain_14.AbsoluteSize.X - HueDraggingDotOutline_3.AbsoluteSize.X) / ColorPickerMain_14.AbsoluteSize.X
                        local MaxSaturationY = math.max(0, ColorPickerMain_14.AbsoluteSize.Y - HueDraggingDotOutline_3.AbsoluteSize.Y) / ColorPickerMain_14.AbsoluteSize.Y
                        local MaxAlpha = math.max(0, SatSliderColor_2.AbsoluteSize.X - SatDraggingLineOutline_4.AbsoluteSize.X) / SatSliderColor_2.AbsoluteSize.X
                        local MaxHue = math.max(0, HueImage_2.AbsoluteSize.Y - HueDraggingLineOutline_2.AbsoluteSize.Y) / HueImage_2.AbsoluteSize.Y
                        --
                        HueDraggingDotOutline_3.Position = UDim2.fromScale(math.clamp(ColorPicker.Saturation[1], 0, MaxSaturationX), math.clamp(1 - ColorPicker.Saturation[2], 0, MaxSaturationY))
                        SatDraggingLineOutline_4.Position = UDim2.new(math.clamp(ColorPicker.Alpha, 0, MaxAlpha), 0, 0, 0)
                        HueDraggingLineOutline_2.Position = UDim2.new(0, 0, math.clamp(ColorPicker.Hue, 0, MaxHue), 0)
                        --
                        HueDraggingDot_5.BackgroundColor3 = ColorPicker.Color
                        HueDraggingLine_7.BackgroundColor3 = ColorPicker.Color
                        HueDraggingLine_6.BackgroundColor3 = ColorPicker.Color
                        --
                        Options.Callback(ColorPicker.Color, ColorPicker.Alpha)
                        Library.Flags[Options.Flag] = ColorPicker
                    end
                    --
                    function ColorPicker:Set(Color, Transparency)
                        if typeof(Color) == "table" then
                            ColorPicker.Color = Color3.fromHSV(Color[1], Color[2], Color[3])
                            ColorPicker.Alpha = Color[4]
                            ColorPicker.Hue = Color[1]
                            ColorPicker.Saturation[1] = Color[2]
                            ColorPicker.Saturation[2] = Color[3]
                            ColorPicker:Update()
                            Options.Callback(ColorPicker.Color, ColorPicker.Alpha)
                        elseif typeof(Color) == "Color3" then
                            local h, s, v = Color:ToHSV()
                            ColorPicker.Color = Color3.fromHSV(h, s, v)
                            ColorPicker.Alpha = Transparency or 1
                            ColorPicker.Hue = h
                            ColorPicker.Saturation[1] = s
                            ColorPicker.Saturation[2] = v
                            ColorPicker:Update()
                            Options.Callback(ColorPicker.Color, ColorPicker.Alpha)
                        end
                    end
                    --
                    function ColorPicker:Get()
                        return {Color = ColorPicker.Color, Transparency = ColorPicker.Alpha}
                    end
                    --
                    function ColorPicker:UpdateHue(Percentage)
                        local Percentage = typeof(Percentage == "number") and math.clamp(Percentage, 0, 1) or 0
                        --
                        ColorPicker.Hue = Percentage
                        --
                        ColorPicker:Update()
                    end
                    --
                    function ColorPicker:UpdateAlpha(Percentage)
                        local Percentage = typeof(Percentage == "number") and math.clamp(Percentage, 0, 1) or 0
                        --
                        ColorPicker.Alpha = Percentage
                        --
                        ColorPicker:Update()
                    end
                    --
                    function ColorPicker:UpdateSaturation(PercentageX, PercentageY)
                        local PercentageX = typeof(PercentageX == "number") and math.clamp(PercentageX, 0, 1) or 0
                        local PercentageY = typeof(PercentageY == "number") and math.clamp(PercentageY, 0, 1) or 0
                        --
                        ColorPicker.Saturation[1] = PercentageX
                        ColorPicker.Saturation[2] = 1 - PercentageY
                        --
                        ColorPicker:Update()
                    end
                end
                --
                do -- Connections
                    Library:Connection(ClickDetection_43.MouseButton2Click, function()
                        Library.UI.LastCopiedColor = {Color = ColorPicker.Color, Alpha = ColorPicker.Alpha}
                    end)
                    --
                    Library:Connection(ClickDetection_43.MouseButton1Click, function()
                        if Library.UI.LastCopiedColor then
                            ColorPicker:Set(Library.UI.LastCopiedColor.Color, Library.UI.LastCopiedColor.Alpha)
                        end
                    end)
                    --
                    Library:Connection(ClickDetection_41.InputBegan, function(Input)
                        if Input.UserInputType == Enum.UserInputType.MouseButton1 then
                            Library.UI.DraggingGui = ColorPickerMain_14
                            --
                            local InputPosition = Vector2.new(Input.Position.X, Input.Position.Y)
                            local Percentage = (InputPosition - ColorPickerMain_14.AbsolutePosition) / ColorPickerMain_14.AbsoluteSize
                            --
                            ColorPicker:UpdateSaturation(Percentage.X, Percentage.Y)
                        end
                    end)
                    --
                    Library:Connection(ClickDetection_44.InputBegan, function(Input)
                        if Input.UserInputType == Enum.UserInputType.MouseButton1 then
                            Library.UI.DraggingGui = SatSliderColor_2
                            --
                            local InputPosition = Vector2.new(Input.Position.X, Input.Position.Y)
                            local GuiPosition = SatSliderColor_2.AbsolutePosition.X
                            local GuiSize = SatSliderColor_2.AbsoluteSize.X
                            local Percentage = ((GuiPosition + GuiSize - InputPosition.X) / GuiSize)
                            --
                            ColorPicker:UpdateAlpha(Percentage)
                        end
                    end)
                    --
                    Library:Connection(ClickDetection_42.InputBegan, function(Input)
                        if Input.UserInputType == Enum.UserInputType.MouseButton1 then
                            Library.UI.DraggingGui = HueImage_2
                            --
                            local InputPosition = Vector2.new(Input.Position.X, Input.Position.Y)
                            local Percentage = (InputPosition - HueImage_2.AbsolutePosition) / HueImage_2.AbsoluteSize
                            --
                            ColorPicker:UpdateHue(Percentage.Y)
                        end
                    end)
                    --
                    Library:Connection(UserInputService.InputChanged, function(Input)
                        if (Library.UI.DraggingGui ~= SatSliderColor_2 and Library.UI.DraggingGui ~= ColorPickerMain_14 and Library.UI.DraggingGui ~= HueImage_2) then return end
                        --
                        if not (UserInputService:IsMouseButtonPressed(Enum.UserInputType.MouseButton1)) then
                            Library.UI.DraggingGui = nil
                            return
                        end
                        --
                        local InputPosition = Vector2.new(Input.Position.X, Input.Position.Y)
                        --
                        if (Input.UserInputType == Enum.UserInputType.MouseMovement) then
                            if Library.UI.DraggingGui == ColorPickerMain_14 then
                                local Percentage = (InputPosition - ColorPickerMain_14.AbsolutePosition) / ColorPickerMain_14.AbsoluteSize
                                --
                                ColorPicker:UpdateSaturation(Percentage.X, Percentage.Y)
                            end
                            --
                            if Library.UI.DraggingGui == SatSliderColor_2 then
                                local GuiPosition = SatSliderColor_2.AbsolutePosition.X
                                local GuiSize = SatSliderColor_2.AbsoluteSize.X
                                local Percentage = ((GuiPosition + GuiSize - InputPosition.X) / GuiSize)
                                --
                                ColorPicker:UpdateAlpha(Percentage)
                            end
                            --
                            if Library.UI.DraggingGui == HueImage_2 then
                                local Percentage = (InputPosition - HueImage_2.AbsolutePosition) / HueImage_2.AbsoluteSize
                                --
                                ColorPicker:UpdateHue(Percentage.Y)
                            end
                        end
                    end)
                end
                --
                ColorPicker:Update()
            end
            --
            function ColorPicker:RemoveFrame()
                for Index, Value in Library.UI.ScreenGUI:GetChildren() do
                    if Value:IsA("Frame") and Value.Name == "ColorPickerFrame" .. Library.UI.TotalColorPickers then
                        Value:Destroy()
                        --
                        Library.UI.OpenColorFrames -= 1
                    end
                end
            end
            --
            function ColorPicker:FindFrame()
                for Index, Value in Library.UI.ScreenGUI:GetChildren() do
                    if Value:IsA("Frame") and Value.Name == "ColorPickerFrame" .. Library.UI.TotalColorPickers then
                        return true
                    end
                end
                --
                return false
            end
            --
            function ColorPicker:Toggle()
                if Library.UI.HoverHighlight then
                    Library:TweenObject(ColorPickerOutline_6, TweenInfo.new(Library.UI.TweenSpeed, Library.UI.TweenEasingStyle, Enum.EasingDirection.InOut), {BackgroundColor3 = Library.Theme.Default.Accent})
                    --
                    Library:AddTheme(ColorPickerOutline_6, {
                        BackgroundColor3 = "Accent",
                    })
                end
                --
                if Library.UI.CurrentSelectedColorPicker and Library.UI.CurrentSelectedColorPicker.ColorPickerOutline.Name ~= ColorPickerOutline_6.Name then
                    Library.UI.CurrentSelectedColorPicker.ColorPicker:RemoveFrame()
                    --
                    Library:TweenObject(Library.UI.CurrentSelectedColorPicker.ColorPickerOutline, TweenInfo.new(Library.UI.TweenSpeed, Library.UI.TweenEasingStyle, Enum.EasingDirection.InOut), {BackgroundColor3 = Library.Theme.Default.Outline})
                    --
                    Library:AddTheme(Library.UI.CurrentSelectedColorPicker.ColorPickerOutline, {
                        BackgroundColor3 = "Outline",
                    })
                end
                --
                if not ColorPicker:FindFrame() then
                    ColorPicker.Active = true
                    ColorPicker:AddFrame()
                else
                    ColorPicker.Active = false
                    ColorPicker:RemoveFrame()
                end
            end
        end
        --
        do -- Connections
            Library:Connection(ClickDetection_415.MouseButton1Click, function()
                ColorPicker:Toggle()
            end)
            --
            Library:Connection(ColorPickerOutline_6.MouseEnter, function()
                if not Library.UI.HoverHighlight then return end
                --
                if not ColorPicker.Active then
                    ColorPicker.Hover = true
                    --
                    Library:TweenObject(ColorPickerOutline_6, TweenInfo.new(Library.UI.TweenSpeed, Library.UI.TweenEasingStyle, Enum.EasingDirection.InOut), {BackgroundColor3 = Library.Theme.Default.Accent})
                    --
                    Library:AddTheme(ColorPickerOutline_6, {
                        BackgroundColor3 = "Accent",
                    })
                end
            end)
            --
            Library:Connection(ColorPickerOutline_6.MouseLeave, function()
                if not ColorPicker.Active then
                    ColorPicker.Hover = false
                    --
                    Library:TweenObject(ColorPickerOutline_6, TweenInfo.new(Library.UI.TweenSpeed, Library.UI.TweenEasingStyle, Enum.EasingDirection.InOut), {BackgroundColor3 = Library.Theme.Default.Outline})
                    --
                    Library:AddTheme(ColorPickerOutline_6, {
                        BackgroundColor3 = "Outline",
                    })
                end
            end)
        end
        --
        ColorPicker:AddFrame()
        ColorPicker:Update()
        ColorPicker:RemoveFrame()
        --
        return ColorPicker
    end
    --
    function Library:Label(Options)
        Options = Library:Validate({
            Message = "Preview Label",
            Side = "Left",
            Risky = false,
            Parent = nil,
            MainUI = nil,
            SectionName = nil,
            TabUI = nil,
            Callback = function() end
        }, Options or {})
        --
        local Label = {
            ColorPickers = {},
            KeybindState = false,
            MainUI = Options.MainUI,
            TabUI = Options.TabUI,
            State = true,
            Section = self,
        }
        --
        local PreviewLabel = Library:CreateObject("Frame", {
            BackgroundTransparency = 1,
            Name = "PreviewLabel",
            BorderColor3 = Color3.fromRGB(0, 0, 0),
            Size = UDim2.new(1, 0, 0, 19),
            BorderSizePixel = 0,
            BackgroundColor3 = Color3.fromRGB(255, 255, 255),
            Parent = Options.Parent
        })
        --
        local LabelName = Library:CreateObject("TextLabel", {
            AnchorPoint = Vector2.new(0.5, 0.5),
            FontFace = Library.UI.Font,
            TextColor3 = Options.Risky and Library.Theme.Default.Risky or Library.Theme.Default.TextColor,
            BorderColor3 = Color3.fromRGB(0, 0, 0),
            Position = UDim2.new(0.5, 0, 0.5, 0),
            Text = Options.Message,
            TextStrokeTransparency = 0,
            Name = "LabelName",
            BackgroundTransparency = 1,
            TextXAlignment = Enum.TextXAlignment[Options.Side],
            Size = UDim2.new(1, 0, 0, 17),
            BorderSizePixel = 0,
            TextSize = Library.UI.FontSize,
            BackgroundColor3 = Color3.fromRGB(255, 255, 255),
            Parent = PreviewLabel
        })
        --
        Library:AddTheme(LabelName, {
            TextColor3 = Options.Risky and "Risky" or "TextColor",
        })
        --
        local UIPadding_6 = Library:CreateObject("UIPadding", {
            PaddingLeft = UDim.new(0, 2),
            Parent = LabelName
        })
        --
        do -- Functions
            function Label:GetName()
                return Options.Message
            end
            --
            function Label:GetState()
                return Label.State
            end
            --
            function Label:GetSection()
                return Options.SectionName
            end
            --
            function Label:GetCallback(Bool)
                Options.Callback(Bool)
            end
            --
            function Label:SetVisible(Bool)
                PreviewLabel.Visible = Bool
            end
            --
            function Label:Keybind(Options)
                Options = Library:Validate({
                    Default = Enum.KeyCode.Backspace,
                    Mode = "Toggle",
                    HideFromList = false,
                    Blacklisted = {},
                    Flag = Library.NewFlag(),
                    Callback = function() end,
                }, Options or {})
                --
                local Keybind = {}
                --
                Label.KeybindState = true
                --
                Library:Keybind({
                    Default = Options.Default,
                    Mode = Options.Mode,
                    HideFromList = Options.HideFromList,
                    Blacklisted = Options.Blacklisted,
                    Parent = PreviewLabel,
                    Toggle = Label,
                    MainUI = Label.MainUI,
                    TabUI = Label.TabUI,
                    ToggleState = Label.State,
                    Flag = Options.Flag,
                    Callback = Options.Callback,
                    Count = #Label.ColorPickers + 1,
                })
                --
                return Keybind
            end
            --
            function Label:ColorPicker(Options)
                Options = Library:Validate({
                    Name = "Preview Color Picker",
                    Default = Color3.fromRGB(255, 0, 0),
                    Flag = Library.NewFlag(),
                    Alpha = 1,
                    AlphaBar = true,
                    MainUI = nil,
                    Callback = function() end,
                }, Options or {})
                --
                local ColorPicker = {}
                --
                Label.ColorPickers[#Label.ColorPickers + 1] = ColorPicker
                --
                local ColorPickerFrame = Library:ColorPicker({
                    Name = Options.Name,
                    Default = Options.Default,
                    Flag = Options.Flag,
                    Alpha = Options.Alpha,
                    AlphaBar = Options.AlphaBar,
                    MainUI = Label.MainUI,
                    TabUI = Label.TabUI,
                    Callback = Options.Callback,
                    Parent = PreviewLabel,
                    Keybind = Label.KeybindState,
                    Count = #Label.ColorPickers,
                })
                --
                return ColorPickerFrame
            end
            --
            function Label:Update()
                LabelName.Size = UDim2.new(LabelName.Size.X.Scale, LabelName.Size.X.Offset, 0, math.huge)
                LabelName.Size = UDim2.new(LabelName.Size.X.Scale, LabelName.Size.X.Offset, 0, LabelName.TextBounds.Y)
                PreviewLabel.Size = UDim2.new(PreviewLabel.Size.X.Scale, PreviewLabel.Size.X.Offset, 0, LabelName.TextBounds.Y + 6)
            end
        end
        --
        Label:Update()
        --
        return Label
    end
    --
    function Library:Toggle(Options)
        Options = Library:Validate({
            Default = false,
            Name = "Preview Toggle",
            Risky = false,
            SectionName = nil,
            Parent = nil,
            MainUI = nil,
            Flag = Library:NewFlag(),
            Callback = function() end
        }, Options or {})
        --
        local Toggle = {
            Active = false,
            Hovering = false,
            State = false,
            MainUI = Options.MainUI,
            TabUI = Options.TabUI,
            ColorPickers = {},
            KeybindState = false,
        }
        --
        Library.Flags[Options.Flag] = Toggle
        --
        local PreviewToggle_1 = Library:CreateObject("Frame", {
            BackgroundTransparency = 1,
            Name = "PreviewToggle_1",
            BorderColor3 = Color3.fromRGB(0, 0, 0),
            Size = UDim2.new(1, 0, 0, 16),
            BorderSizePixel = 0,
            BackgroundColor3 = Color3.fromRGB(255, 255, 255),
            Parent = Options.Parent
        })
        --
        local ClickDetection = Library:CreateObject("TextButton", {
            FontFace = Library.UI.Font,
            TextColor3 = Color3.fromRGB(0, 0, 0),
            BorderColor3 = Color3.fromRGB(0, 0, 0),
            Name = "ClickDetection",
            BackgroundTransparency = 1,
            Size = UDim2.new(1, 0, 1, 0),
            BorderSizePixel = 0,
            TextTransparency = 1,
            TextSize = Library.UI.FontSize,
            BackgroundColor3 = Color3.fromRGB(255, 255, 255),
            Parent = PreviewToggle_1
        })
        --
        local ToggleBoxOutline_1 = Library:CreateObject("Frame", {
            AnchorPoint = Vector2.new(0, 0.5),
            Name = "ToggleBoxOutline_1",
            Position = UDim2.new(0, 0, 0.5, 1),
            BorderColor3 = Color3.fromRGB(0, 0, 0),
            Size = UDim2.new(0, 14, 0, 14),
            BorderSizePixel = 0,
            BackgroundColor3 = Library.Theme.Default.Outline,
            Parent = PreviewToggle_1
        })
        --
        Library:AddTheme(ToggleBoxOutline_1, {
            BackgroundColor3 = "Outline",
        })
        --
        local ToggleBoxInline_1 = Library:CreateObject("Frame", {
            Name = "ToggleBoxInline_1",
            Position = UDim2.new(0, 1, 0, 1),
            BorderColor3 = Color3.fromRGB(0, 0, 0),
            Size = UDim2.new(1, -2, 1, -2),
            BorderSizePixel = 0,
            BackgroundColor3 = Library.Theme.Default.Inline,
            Parent = ToggleBoxOutline_1
        })
        --
        Library:AddTheme(ToggleBoxInline_1, {
            BackgroundColor3 = "Inline",
        })
        --
        local ToggleBack = Library:CreateObject("Frame", {
            Name = "ToggleBox_1",
            Position = UDim2.new(0, 1, 0, 1),
            BorderColor3 = Color3.fromRGB(0, 0, 0),
            Size = UDim2.new(1, -2, 1, -2),
            BorderSizePixel = 0,
            BackgroundColor3 = Color3.fromRGB(255, 255, 255),
            Parent = ToggleBoxInline_1
        })
        --
        local UIGradient_3 = Library:CreateObject("UIGradient", {
            Rotation = 90,
            Color = ColorSequence.new{
                ColorSequenceKeypoint.new(0, Library.Theme.Default.LightContrast),
                ColorSequenceKeypoint.new(1, Library.Theme.Default.DarkContrast)
            },
            Parent = ToggleBack
        })
        --
        Library:AddTheme(UIGradient_3, {
            Color = {"LightContrast", "DarkContrast"},
        })
        --
        local ToggleBox_1 = Library:CreateObject("Frame", {
            Name = "ToggleBox_15",
            Position = UDim2.new(0, 1, 0, 1),
            BorderColor3 = Color3.fromRGB(0, 0, 0),
            Size = UDim2.new(1, -2, 1, -2),
            BorderSizePixel = 0,
            BackgroundColor3 = Color3.fromRGB(255, 255, 255),
            BackgroundTransparency = 1,
            Parent = ToggleBoxInline_1
        })
        --
        local UIGradient_332 = Library:CreateObject("UIGradient", {
            Rotation = 90,
            Color = ColorSequence.new{
                ColorSequenceKeypoint.new(0, Library.Theme.Default.Accent),
                ColorSequenceKeypoint.new(1, Library.Theme.Default.SecondAccent)
            },
            Parent = ToggleBox_1
        })
        --
        Library:AddTheme(UIGradient_332, {
            Color = {"Accent", "SecondAccent"}
        })
        --
        local ToggleName_1 = Library:CreateObject("TextLabel", {
            FontFace = Library.UI.Font,
            TextColor3 = Options.Risky and Library.Theme.Default.Risky or Library.Theme.Default.TextColor,
            BorderColor3 = Color3.fromRGB(0, 0, 0),
            Text = Options.Name,
            TextStrokeTransparency = 0,
            Name = "ToggleName_1",
            BackgroundTransparency = 1,
            TextXAlignment = Enum.TextXAlignment.Left,
            Size = UDim2.new(0.5, 0, 1, 0),
            BorderSizePixel = 0,
            TextSize = Library.UI.FontSize,
            BackgroundColor3 = Color3.fromRGB(255, 255, 255),
            Parent = PreviewToggle_1
        })
        --
        Library:AddTheme(ToggleName_1, {
            TextColor3 = Options.Risky and "Risky" or "TextColor",
        })
        --
        local UIPadding_15 = Library:CreateObject("UIPadding", {
            PaddingLeft = UDim.new(0, 20),
            Parent = ToggleName_1
        })
        --
        do -- Functions
            function Toggle:Keybind(Options)
                Options = Library:Validate({
                    Default = Enum.KeyCode.Backspace,
                    Mode = "Toggle",
                    HideFromList = false,
                    Blacklisted = {},
                    Flag = Library.NewFlag(),
                    Callback = function() end,
                }, Options or {})
                --
                local Keybind = {}
                --
                Toggle.KeybindState = true
                --
                Library:Keybind({
                    Default = Options.Default,
                    Mode = Options.Mode,
                    HideFromList = Options.HideFromList,
                    Blacklisted = Options.Blacklisted,
                    Parent = PreviewToggle_1,
                    Toggle = Toggle,
                    MainUI = Toggle.MainUI,
                    TabUI = Toggle.TabUI,
                    ToggleState = Toggle.State,
                    Flag = Options.Flag,
                    Callback = Options.Callback,
                    Count = #Toggle.ColorPickers + 1,
                })
                --
                return Keybind
            end
            --
            function Toggle:ColorPicker(Options)
                Options = Library:Validate({
                    Name = "Preview Color Picker",
                    Default = Color3.fromRGB(255, 0, 0),
                    Flag = Library.NewFlag(),
                    Alpha = 1,
                    AlphaBar = true,
                    Callback = function() end,
                }, Options or {})
                --
                local ColorPicker = {}
                --
                Toggle.ColorPickers[#Toggle.ColorPickers + 1] = ColorPicker
                --
                local ColorPickerFrame = Library:ColorPicker({
                    Name = Options.Name,
                    Default = Options.Default,
                    Flag = Options.Flag,
                    Alpha = Options.Alpha,
                    AlphaBar = Options.AlphaBar,
                    MainUI = Toggle.MainUI,
                    TabUI = Toggle.TabUI,
                    Callback = Options.Callback,
                    Parent = PreviewToggle_1,
                    Keybind = Toggle.KeybindState,
                    Count = #Toggle.ColorPickers,
                })
                --
                return ColorPickerFrame
            end
            --
            function Toggle:ToggleGUI(Bool)
                if Bool == nil then
                    Toggle.State = not Toggle.State
                else
                    Toggle.State = Bool
                end
                --
                if Toggle.State then
                    Library:TweenObject(ToggleBox_1, TweenInfo.new(Library.UI.TweenSpeed, Library.UI.TweenEasingStyle, Enum.EasingDirection.InOut), {BackgroundTransparency = 0})
                else
                    Library:RemoveKeybindFrame(Toggle:GetName(), Toggle:GetSection())
                    Library:TweenObject(ToggleBox_1, TweenInfo.new(Library.UI.TweenSpeed, Library.UI.TweenEasingStyle, Enum.EasingDirection.InOut), {BackgroundTransparency = 1})
                end
                --
                Library.Flags[Options.Flag] = Toggle
                Options.Callback(Toggle.State)
            end
            --
            function Toggle:GetName()
                return Options.Name
            end
            --
            function Toggle:GetFlag()
                return Options.Flag
            end
            --
            function Toggle:GetSection()
                return Options.SectionName
            end
            --
            function Toggle:GetState()
                return Toggle.State
            end
            --
            function Toggle:GetCallback(b)
                Options.Callback(b)
            end
            --
            function Toggle:Set(Value)
                Toggle:ToggleGUI(Value)
            end
            --
            function Toggle:Get()
                return Toggle.State
            end
            --
            function Toggle:SetVisible(Bool)
                PreviewToggle_1.Visible = Bool
            end
        end
        --
        do -- Connections
            Library:Connection(ClickDetection.MouseButton1Click, function()
                Toggle:ToggleGUI()
            end)
            --
            Library:Connection(ToggleName_1.MouseEnter, function()
                if not Library.UI.HoverHighlight then return end
                --
                Library:TweenObject(ToggleBoxOutline_1, TweenInfo.new(Library.UI.TweenSpeed, Library.UI.TweenEasingStyle, Enum.EasingDirection.InOut), {BackgroundColor3 = Library.Theme.Default.Accent})
                --
                Library:AddTheme(ToggleBoxOutline_1, {
                    BackgroundColor3 = "Accent",
                })
            end)
            --
            Library:Connection(ToggleName_1.MouseLeave, function()
                Library:TweenObject(ToggleBoxOutline_1, TweenInfo.new(Library.UI.TweenSpeed, Library.UI.TweenEasingStyle, Enum.EasingDirection.InOut), {BackgroundColor3 = Library.Theme.Default.Outline})
                --
                Library:AddTheme(ToggleBoxOutline_1, {
                    BackgroundColor3 = "Outline",
                })
            end)
        end
        --
        Toggle:ToggleGUI(Options.Default)
        --
        return Toggle
    end
    --
    function Library:Keybind(Options)
        Options = Library:Validate({
            Default = Enum.KeyCode.Backspace,
            Mode = "Toggle",
            HideFromList = false,
            Blacklisted = {},
            Parent = nil,
            Toggle = nil,
            MainUI = nil,
            ToggleState = false,
            Flag = Library.NewFlag(),
            Count = 1,
            Callback = function() end,
        }, Options or {})
        --
        if Options.Toggle == nil then return end
        --
        local Keybind = {
            Hover = false,
            ActiveFrame = false,
            Keybind = Options.Default,
            RegKeybind = nil,
            State = false,
            SelectingKeybind = false,
            Toggle = false,
            Connection = nil,
            Mode = Options.Mode,
            ConfigKeybind = nil,
            Current = {},
            CurrentMode = nil,
        }
        --
        Library.Flags[Options.Flag] = Keybind
        Library.UI.TotalKeybindModes += 1
        --
        local KeybindOutline = Library:CreateObject("Frame", {
            AnchorPoint = Vector2.new(1, 0),
            Name = "KeybindOutline" .. Library.UI.TotalKeybindModes,
            Position = UDim2.new(1, 0, 0, 0),
            BorderColor3 = Color3.fromRGB(0, 0, 0),
            Size = UDim2.new(0, 27, 0, 14),
            BorderSizePixel = 0,
            BackgroundColor3 = Library.Theme.Default.Outline,
            Parent = Options.Parent
        })
        --
        Library:AddTheme(KeybindOutline, {
            BackgroundColor3 = "Outline",
        })
        --
        local KeybindChecker = Library:CreateObject("Frame", {
            AnchorPoint = Vector2.new(0, 1),
            Position = UDim2.new(0, 0, 1, 4),
            BorderColor3 = Color3.fromRGB(0, 0, 0),
            Size = UDim2.new(1, 0, 0, 1),
            Visible = false,
            BorderSizePixel = 0,
            Parent = KeybindOutline
        })
        --
        local ClickDetection_4121 = Library:CreateObject("TextButton", {
            FontFace = Library.UI.Font,
            TextColor3 = Color3.fromRGB(0, 0, 0),
            BorderColor3 = Color3.fromRGB(0, 0, 0),
            Name = "ClickDetection_415",
            BackgroundTransparency = 1,
            Size = UDim2.new(1, 0, 1, 0),
            BorderSizePixel = 0,
            TextTransparency = 1,
            TextSize = Library.UI.FontSize,
            BackgroundColor3 = Color3.fromRGB(255, 255, 255),
            Parent = KeybindOutline
        })
        --
        local KeybindInline = Library:CreateObject("Frame", {
            Name = "KeybindInline",
            Position = UDim2.new(0, 1, 0, 1),
            BorderColor3 = Color3.fromRGB(0, 0, 0),
            Size = UDim2.new(1, -2, 1, -2),
            BorderSizePixel = 0,
            BackgroundColor3 = Library.Theme.Default.Inline,
            Parent = KeybindOutline
        })
        --
        Library:AddTheme(KeybindInline, {
            BackgroundColor3 = "Inline",
        })
        --
        local KeybindMain = Library:CreateObject("Frame", {
            Name = "KeybindMain",
            Position = UDim2.new(0, 1, 0, 1),
            BorderColor3 = Color3.fromRGB(0, 0, 0),
            Size = UDim2.new(1, -2, 1, -2),
            BorderSizePixel = 0,
            BackgroundColor3 = Color3.fromRGB(255, 255, 255),
            Parent = KeybindInline
        })
        --
        local UIGradient_1 = Library:CreateObject("UIGradient", {
            Rotation = 90,
            Color = ColorSequence.new{
                ColorSequenceKeypoint.new(0, Library.Theme.Default.LightContrast),
                ColorSequenceKeypoint.new(1, Library.Theme.Default.DarkContrast)
            },
            Parent = KeybindMain
        })
        --
        Library:AddTheme(UIGradient_1, {
            Color = {"LightContrast", "DarkContrast"},
        })
        --
        local TextLabel = Library:CreateObject("TextLabel", {
            FontFace = Library.UI.Font,
            TextColor3 = Library.Theme.Default.TextColor,
            BorderColor3 = Color3.fromRGB(0, 0, 0),
            Text = "C",
            TextStrokeTransparency = 0,
            BackgroundTransparency = 1,
            Size = UDim2.new(1, 0, 1, 0),
            BorderSizePixel = 0,
            TextSize = Library.UI.FontSize,
            BackgroundColor3 = Color3.fromRGB(255, 255, 255),
            Parent = KeybindMain
        })
        --
        Library:AddTheme(TextLabel, {
            TextColor3 = "TextColor",
        })
        --
        local UIPadding_8 = Library:CreateObject("UIPadding", {
            PaddingLeft = UDim.new(0, 2),
            PaddingTop = UDim.new(0, -1),
            PaddingBottom = UDim.new(0, 2),
            Parent = TextLabel
        })
        --
        Library.UI.KeybindTexts[KeybindOutline] = {TextLabel = TextLabel, Count = Options.Count}
        --
        local UserInputTypeBinds = {"MouseButton1", "MouseButton2", "MouseButton3"}
        --
        do -- Functions
            function Keybind:SetVisible(Bool)
                Keybind["51"].Visible = Bool
            end
            --
            function Keybind:Set(Key)
                if typeof(Key) == "boolean" then return end
                --
                if typeof(Key) == "EnumItem" then
                    Keybind.RegKeybind = Key
                elseif typeof(Key) == "string" then
                    if table.find(UserInputTypeBinds, Key) then
                        Keybind.RegKeybind = Enum.UserInputType[Key]
                        Key = Enum.UserInputType[Key]
                    else
                        Keybind.RegKeybind = Enum.KeyCode[Key]
                        Key = Enum.KeyCode[Key]
                    end
                end
                --
                if typeof(Key) == "string" then
                    if Key:find("KEY") then
                        Key = Enum.KeyCode[Key:gsub("KEY_", "")]
                    elseif Key:find("INPUT") then
                        Key = Enum.UserInputType[Key:gsub("INPUT_", "")]
                    end
                end
                --
                local ValidKey = false
                local KeyString = ""
                --
                if table.find(Options.Blacklisted, Key) then
                    Key = nil
                end
                --
                if Key then
                    if ((Key.EnumType == Enum.KeyCode and UserInputService:GetStringForKeyCode(Key) ~= "") or Library.UI.Keys[Key]) then
                        ValidKey = true
                        KeyString = Library.UI.Keys[Key] or UserInputService:GetStringForKeyCode(Key)
                    end
                end
                --
                if ValidKey then
                    Keybind.Keybind = KeyString
                    Options.Callback(Key)
                    Library.Flags[Options.Flag] = Keybind
                    TextLabel.Text = Library.UI.KeybindType == "Upper" and KeyString:upper() or KeyString:lower()
                    --
                    KeybindOutline.Size = UDim2.new(0, TextLabel.TextBounds.X + 25, 0, 14)
                    KeybindOutline.Position = UDim2.new(1, 0 - (Options.Count - 1) * 31, 0, 2)
                else
                    Keybind.Keybind = Library.UI.KeybindType == "Upper" and "None" or "none"
                    TextLabel.Text = Keybind.Keybind
                    --
                    KeybindOutline.Size = UDim2.new(0, TextLabel.TextBounds.X + 25, 0, 14)
                    KeybindOutline.Position = UDim2.new(1, 0 - (Options.Count - 1) * 31, 0, 2)
                end
            end
            --
            function Keybind:Toggle(Bool)
                if Options.Toggle.State then
                    if Bool == nil then
                        Keybind.State = not Keybind.State
                    else
                        Keybind.State = Bool
                    end
                    --
                    if not Options.HideFromList then
                        if Keybind.State then
                            Library:AddKeybindFrame(Keybind.Mode, Options.Toggle:GetName(), Keybind.Keybind, Options.Toggle:GetSection())
                        else
                            Library:RemoveKeybindFrame(Options.Toggle:GetName(), Options.Toggle:GetSection())
                        end
                    end
                    --
                    if Options.Toggle.GetFlag then
                        Library.Flags[Options.Toggle:GetFlag()] = Keybind
                    end
                    --
                    Options.Toggle:GetCallback(Keybind.State)
                end
            end
            --
            Keybind:Set(Options.Default)
            --
            function Keybind:Get()
                local KeyString = Keybind.RegKeybind.EnumType == Enum.KeyCode and tostring(Keybind.RegKeybind):match("^Enum%.KeyCode%.(.+)$") or tostring(Keybind.RegKeybind):match("^Enum%.UserInputType%.(.+)$")
                --
                return KeyString
            end
            --
            function Keybind:Active()
                return Keybind.State
            end
            --
            if Options.Mode == "Always" then
                Keybind:Toggle(true)
            end
            --
            function Keybind:SetMode(Mode)
                Keybind.Mode = Mode
                --
                if Mode == "Always" or Mode == "Off Hold" then
                    if Mode == "Always" then
                        Keybind:Toggle(true)
                    end
                    --
                    if not Keybind.State then
                        Keybind.State = true
                        --
                        Library:AddKeybindFrame(Mode, Options.Toggle:GetName(), Keybind.Keybind, Options.Toggle:GetSection())
                    else
                        Library:UpdateKeybindFrame(Mode, Options.Toggle:GetName(), Keybind.Keybind, Options.Toggle:GetSection())
                    end
                elseif Mode == "Toggle" then
                    if Keybind.State then
                        Library:UpdateKeybindFrame(Mode, Options.Toggle:GetName(), Keybind.Keybind, Options.Toggle:GetSection())
                    end
                elseif Mode == "On Hold" then
                    Keybind.State = false
                    --
                    Library:RemoveKeybindFrame(Options.Toggle:GetName(), Options.Toggle:GetSection())
                end
            end
            --
            function Keybind:AddFrame()
                Library.UI.CurrentSelectedKeybindMode = {Keybind = Keybind, KeybindOutline = KeybindOutline, Parent = Options.Parent}
                --
                local KeybindModePickerOutline = Library:CreateObject("Frame", {
                    Name = "KeybindModePickerOutline" .. Library.UI.TotalKeybindModes,
                    AnchorPoint = Vector2.new(1, 0),
                    Position = UDim2.new(0, 0, 0, 0),
                    BorderColor3 = Color3.fromRGB(0, 0, 0),
                    Size = UDim2.new(0, 65, 0, 50),
                    BorderSizePixel = 0,
                    ZIndex = Options.MainUI.ZIndex + Library.UI.DropdownZIndex,
                    BackgroundColor3 = Library.Theme.Default.Outline,
                    Parent = Library.UI.ScreenGUI
                })
                --
                Library:AddTheme(KeybindModePickerOutline, {
                    BackgroundColor3 = "Outline"
                })
                --
                local KeybindModeMainInline = Library:CreateObject("Frame", {
                    Name = "KeybindModeMainInline",
                    Position = UDim2.new(0, 1, 0, 1),
                    BorderColor3 = Color3.fromRGB(0, 0, 0),
                    Size = UDim2.new(1, -2, 1, -2),
                    BorderSizePixel = 0,
                    BackgroundColor3 = Library.Theme.Default.Inline,
                    Parent = KeybindModePickerOutline
                })
                --
                Library:AddTheme(KeybindModeMainInline, {
                    BackgroundColor3 = "Inline"
                })
                --
                local KeybindModeMain = Library:CreateObject("Frame", {
                    Name = "KeybindModeMain",
                    Position = UDim2.new(0, 1, 0, 1),
                    BorderColor3 = Color3.fromRGB(0, 0, 0),
                    Size = UDim2.new(1, -2, 1, -2),
                    BorderSizePixel = 0,
                    BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                    Parent = KeybindModeMainInline
                })
                --
                local UIPadding_4 = Library:CreateObject("UIPadding", {
                    PaddingTop = UDim.new(0, 4),
                    PaddingBottom = UDim.new(0, 4),
                    PaddingRight = UDim.new(0, 4),
                    PaddingLeft = UDim.new(0, 4),
                    Parent = KeybindModeMain
                })
                --
                local UIGradient_3 = Library:CreateObject("UIGradient", {
                    Rotation = -90,
                    Color = ColorSequence.new{
                        ColorSequenceKeypoint.new(0, Library.Theme.Default.LightContrast),
                        ColorSequenceKeypoint.new(1, Library.Theme.Default.DarkContrast)
                    },
                    Parent = KeybindModeMain
                })
                --
                Library:AddTheme(UIGradient_3, {
                    Color = {"LightContrast", "DarkContrast"}
                })
                --
                local KeybindModeMainList = Library:CreateObject("ScrollingFrame", {
                    ScrollBarImageColor3 = Library.Theme.Default.Accent,
                    MidImage = "rbxassetid://158362264",
                    Active = true,
                    BorderColor3 = Color3.fromRGB(0, 0, 0),
                    ScrollBarThickness = 2,
                    CanvasSize = UDim2.new(0, 0, 0, 0),
                    AutomaticCanvasSize = Enum.AutomaticSize.Y,
                    Name = "KeybindModeMainList",
                    BackgroundTransparency = 1,
                    Size = UDim2.new(1, 0, 1, 0),
                    TopImage = "rbxassetid://158362264",
                    BottomImage = "rbxassetid://158362264",
                    BorderSizePixel = 0,
                    BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                    Parent = KeybindModeMain
                })
                --
                Library:AddTheme(KeybindModeMainList, {
                    ScrollBarImageColor3 = "Accent"
                })
                --
                local UIListLayout_1 = Library:CreateObject("UIListLayout", {
                    Padding = UDim.new(0, 4),
                    SortOrder = Enum.SortOrder.LayoutOrder,
                    Parent = KeybindModeMainList
                })
                --
                function Keybind:UpdateSize()
                    KeybindModePickerOutline.Position = UDim2.new(0, KeybindOutline.AbsolutePosition.X + (KeybindOutline.AbsoluteSize.X / 2) + (KeybindModePickerOutline.AbsoluteSize.X / 2), 0, ((KeybindOutline.AbsolutePosition.Y + KeybindOutline.AbsoluteSize.Y) + game:GetService("GuiService"):GetGuiInset().Y + 4))
                end
                --
                Keybind:UpdateSize()
                --
                Library:Connection(Options.MainUI:GetPropertyChangedSignal("AbsolutePosition"), Keybind.UpdateSize)
                --
                Library:Connection(Options.MainUI:GetPropertyChangedSignal("AbsoluteSize"), function()
                    if Keybind.ActiveFrame then
                        KeybindModePickerOutline.Visible = Library:ScrollingCheck(Options.Parent.Parent, KeybindChecker)
                    end
                    --
                    Keybind:UpdateSize()
                end)
                --
                Library:Connection(KeybindOutline:GetPropertyChangedSignal("AbsoluteSize"), function()
                    Keybind:UpdateSize()
                end)
                --
                if Options.Parent.Parent:IsA("ScrollingFrame") then
                    Library:Connection(Options.Parent.Parent:GetPropertyChangedSignal("CanvasPosition"), function()
                        Keybind:UpdateSize()
                        --
                        if Keybind.ActiveFrame then
                            KeybindModePickerOutline.Visible = Library:ScrollingCheck(Options.Parent.Parent, KeybindChecker)
                        end
                    end)
                end
                --
                Library:Connection(Options.MainUI:GetPropertyChangedSignal("ZIndex"), function()
                    KeybindModePickerOutline.ZIndex = Options.MainUI.ZIndex + Library.UI.DropdownZIndex
                end)
                --
                Library:Connection(Options.MainUI:GetPropertyChangedSignal("Visible"), function()
                    if not Options.MainUI.Visible then
                        KeybindModePickerOutline.Visible = false
                    else
                        KeybindModePickerOutline.Visible = Keybind.ActiveFrame
                    end
                end)
                --
                Library:Connection(Options.Parent.Parent:GetPropertyChangedSignal("Visible"), function()
                    if not Options.Parent.Parent.Visible then
                        KeybindModePickerOutline.Visible = false
                    else
                        KeybindModePickerOutline.Visible = Keybind.ActiveFrame
                    end
                end)
                --
                Library:Connection(Options.Parent.Parent.Parent.Parent.Parent.Parent.Parent:GetPropertyChangedSignal("Visible"), function() -- only way it would work ignore
                    if not Options.Parent.Parent.Parent.Parent.Parent.Parent.Parent.Visible then
                        KeybindModePickerOutline.Visible = false
                    else
                        KeybindModePickerOutline.Visible = Keybind.ActiveFrame
                    end
                end)
                --
                for Index, Value in {"Always", "Toggle", "On Hold", "Off Hold"} do
                    local ModeItem = {
                        Active = false,
                        Hovering = false,
                    }
                    --
                    local KeybindModeTemplate = Library:CreateObject("Frame", {
                        BackgroundTransparency = 1,
                        Name = "KeybindModeTemplate",
                        BorderColor3 = Color3.fromRGB(0, 0, 0),
                        Size = UDim2.new(1, 0, 0, 10),
                        BorderSizePixel = 0,
                        BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                        Parent = KeybindModeMainList
                    })
                    --
                    local ClickDetection_412 = Library:CreateObject("TextButton", {
                        FontFace = Library.UI.Font,
                        TextColor3 = Color3.fromRGB(0, 0, 0),
                        BorderColor3 = Color3.fromRGB(0, 0, 0),
                        Name = "ClickDetection_412",
                        BackgroundTransparency = 1,
                        Size = UDim2.new(1, 0, 1, 0),
                        BorderSizePixel = 0,
                        TextTransparency = 1,
                        TextSize = Library.UI.FontSize,
                        BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                        Parent = KeybindModeTemplate
                    })
                    --
                    local ModeName = Library:CreateObject("TextLabel", {
                        FontFace = Library.UI.Font,
                        TextColor3 = Library.Theme.Default.TextColor,
                        BorderColor3 = Color3.fromRGB(0, 0, 0),
                        Text = Library.UI.KeybindType == "Upper" and Value or Value:lower(),
                        TextStrokeTransparency = 0,
                        BackgroundTransparency = 1,
                        Name = "ModeName",
                        Size = UDim2.new(1, 0, 1, 0),
                        BorderSizePixel = 0,
                        TextSize = Library.UI.FontSize,
                        BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                        Parent = KeybindModeTemplate
                    })
                    --
                    Library:AddTheme(ModeName, {
                        TextColor3 = "TextColor"
                    })
                    --
                    do -- Functions
                        function ModeItem:Activate()
                            if not ModeItem.Active then
                                if Keybind.CurrentMode ~= nil then
                                    Keybind.CurrentMode:Deactivate()
                                end
                                --
                                ModeItem.Active = true
                                --
                                Library:TweenObject(ModeName, TweenInfo.new(Library.UI.TweenSpeed, Library.UI.TweenEasingStyle, Enum.EasingDirection.InOut), {TextColor3 = Library.Theme.Default.Accent})
                                --
                                Library:AddTheme(ModeName, {
                                    TextColor3 = "Accent"
                                })
                                --
                                Keybind.Mode = Value
                                Keybind.CurrentMode = ModeItem
                                --
                                if Value == "Always" or Value == "Off Hold" then
                                    if Mode == "Always" then
                                        Keybind:Toggle(true)
                                    end
                                    --
                                    if not Keybind.State then
                                        Keybind.State = true
                                        --
                                        Library:AddKeybindFrame(Value, Options.Toggle:GetName(), Keybind.Keybind, Options.Toggle:GetSection())
                                    else
                                        Library:UpdateKeybindFrame(Value, Options.Toggle:GetName(), Keybind.Keybind, Options.Toggle:GetSection())
                                    end
                                elseif Value == "Toggle" then
                                    if Keybind.State then
                                        Library:UpdateKeybindFrame(Value, Options.Toggle:GetName(), Keybind.Keybind, Options.Toggle:GetSection())
                                    end
                                elseif Value == "On Hold" then
                                    Keybind.State = false
                                    --
                                    Library:RemoveKeybindFrame(Options.Toggle:GetName(), Options.Toggle:GetSection())
                                end
                            end
                        end
                        --
                        function ModeItem:Deactivate()
                            if ModeItem.Active then
                                ModeItem.Active = false
                                ModeItem.Hovering = false
                                --
                                Library:TweenObject(ModeName, TweenInfo.new(Library.UI.TweenSpeed, Library.UI.TweenEasingStyle, Enum.EasingDirection.InOut), {TextColor3 = Library.Theme.Default.TextColor})
                                --
                                Library:AddTheme(ModeName, {
                                    TextColor3 = "TextColor"
                                })
                            end
                        end
                    end
                    --
                    do -- Connections
                        Library:Connection(ClickDetection_412.MouseButton1Click, function()
                            ModeItem:Activate()
                        end)
                    end
                    --
                    if Value == Keybind.Mode then
                        ModeItem:Activate()
                    end
                end
            end
            --
            function Keybind:RemoveFrame()
                for Index, Value in Library.UI.ScreenGUI:GetChildren() do
                    if Value:IsA("Frame") and Value.Name == "KeybindModePickerOutline" .. Library.UI.TotalKeybindModes then
                        Value:Destroy()
                    end
                end
            end
            --
            function Keybind:FindFrame()
                for Index, Value in Library.UI.ScreenGUI:GetChildren() do
                    if Value:IsA("Frame") and Value.Name == "KeybindModePickerOutline" .. Library.UI.TotalKeybindModes then
                        return true
                    end
                end
                --
                return false
            end
            --
            function Keybind:ToggleFrame()
                if Library.UI.HoverHighlight then
                    Library:TweenObject(KeybindOutline, TweenInfo.new(Library.UI.TweenSpeed, Library.UI.TweenEasingStyle, Enum.EasingDirection.InOut), {BackgroundColor3 = Library.Theme.Default.Accent})
                    --
                    Library:AddTheme(KeybindOutline, {
                        BackgroundColor3 = "Accent",
                    })
                end
                --
                if Library.UI.CurrentSelectedKeybindMode and Library.UI.CurrentSelectedKeybindMode.KeybindOutline.Name ~= KeybindOutline.Name then
                    Library.UI.CurrentSelectedKeybindMode.Keybind:RemoveFrame()
                    --
                    Library:TweenObject(Library.UI.CurrentSelectedKeybindMode.KeybindOutline, TweenInfo.new(Library.UI.TweenSpeed, Library.UI.TweenEasingStyle, Enum.EasingDirection.InOut), {BackgroundColor3 = Library.Theme.Default.Outline})
                    --
                    Library:AddTheme(Library.UI.CurrentSelectedKeybindMode.KeybindOutline, {
                        BackgroundColor3 = "Outline",
                    })
                end
                --
                if not Keybind:FindFrame() then
                    Keybind.ActiveFrame = true
                    Keybind:AddFrame()
                else
                    Keybind.ActiveFrame = false
                    Keybind:RemoveFrame()
                end
            end
        end
        --
        do -- Connections
            Library:Connection(ClickDetection_4121.MouseButton2Click, function()
                Keybind:ToggleFrame()
            end)
            --
            Library:Connection(ClickDetection_4121.MouseButton1Click, function()
                if Keybind.Connection then
                    Keybind.Connection:Disconnect()
                end
                --
                Keybind.SelectingKeybind = true
                --
                TextLabel.Text = "..."
                KeybindOutline.Size = UDim2.new(0, TextLabel.TextBounds.X + 25, 0, 14)
                KeybindOutline.Position = UDim2.new(1, 0 - (Options.Count - 1) * 31, 0, 2)
                --
                if Library.UI.HoverHighlight then
                    Library:TweenObject(KeybindOutline, TweenInfo.new(Library.UI.TweenSpeed, Library.UI.TweenEasingStyle, Enum.EasingDirection.InOut), {BackgroundColor3 = Library.Theme.Default.Accent})
                    --
                    Library:AddTheme(KeybindOutline, {
                        BackgroundColor3 = "Accent",
                    })
                end
                --
                Keybind.Connection = Library:Connection(UserInputService.InputBegan, function(Input)
                    Keybind:Set(Input.UserInputType == Enum.UserInputType.Keyboard and Input.KeyCode or Input.UserInputType)
                    --
                    Keybind.Connection:Disconnect()
                    --
                    task.delay(0.1, function()
                        Keybind.Connection = nil
                        Keybind.SelectingKeybind = false
                        --
                        Library:TweenObject(KeybindOutline, TweenInfo.new(Library.UI.TweenSpeed, Library.UI.TweenEasingStyle, Enum.EasingDirection.InOut), {BackgroundColor3 = Library.Theme.Default.Outline})
                        --
                        Library:AddTheme(KeybindOutline, {
                            BackgroundColor3 = "Outline",
                        })
                    end)
                end)
            end)
            --
            Library:Connection(UserInputService.InputBegan, function(Input, Proccessed)
                if Proccessed then return end
                --
                if (Input.UserInputType == Enum.UserInputType.Keyboard and Keybind.Keybind ~= "None" and Input.KeyCode == Keybind.RegKeybind) or (Input.UserInputType == Enum.UserInputType.MouseButton1 and Keybind.Keybind == "MB1") or (Input.UserInputType == Enum.UserInputType.MouseButton2 and Keybind.Keybind == "MB2") or (Input.UserInputType == Enum.UserInputType.MouseButton3 and Keybind.Keybind == "MMB") then
                    if Keybind.Mode == "Always" then
                        Keybind:Toggle(true)
                    elseif Keybind.Mode == "Off Hold" then
                        Keybind:Toggle(false)
                    else
                        Keybind:Toggle()
                    end
                end
            end)
            --
            Library:Connection(UserInputService.InputEnded, function(Input, Proccessed)
                if Proccessed then return end
                --
                if Keybind.Mode == "On Hold" or Keybind.Mode == "Off Hold" then
                    if (Input.UserInputType == Enum.UserInputType.Keyboard and Keybind.Keybind ~= "None" and Input.KeyCode == Keybind.RegKeybind) or (Input.UserInputType == Enum.UserInputType.MouseButton1 and Keybind.Keybind == "MB1") or (Input.UserInputType == Enum.UserInputType.MouseButton2 and Keybind.Keybind == "MB2") or (Input.UserInputType == Enum.UserInputType.MouseButton3 and Keybind.Keybind == "MMB") then
                        if Keybind.Mode == "Off Hold" then
                            Keybind:Toggle(true)
                        else
                            Keybind:Toggle()
                        end
                    end
                end
            end)
            --
            Library:Connection(KeybindOutline.MouseEnter, function()
                if not Library.UI.HoverHighlight then return end
                --
                if not Keybind.ActiveFrame then
                    Keybind.Hover = true
                    --
                    Library:TweenObject(KeybindOutline, TweenInfo.new(Library.UI.TweenSpeed, Library.UI.TweenEasingStyle, Enum.EasingDirection.InOut), {BackgroundColor3 = Library.Theme.Default.Accent})
                    --
                    Library:AddTheme(KeybindOutline, {
                        BackgroundColor3 = "Accent",
                    })
                end
            end)
            --
            Library:Connection(KeybindOutline.MouseLeave, function()
                if not Keybind.ActiveFrame and not Keybind.SelectingKeybind then
                    Keybind.Hover = true
                    --
                    Library:TweenObject(KeybindOutline, TweenInfo.new(Library.UI.TweenSpeed, Library.UI.TweenEasingStyle, Enum.EasingDirection.InOut), {BackgroundColor3 = Library.Theme.Default.Outline})
                    --
                    Library:AddTheme(KeybindOutline, {
                        BackgroundColor3 = "Outline",
                    })
                end
            end)
        end
        --
        return Keybind
    end
    --
    function Library:MultiBox(Options)
        Options = Library:Validate({
            Default = "None",
            Name = "Preview MultiBox",
            Content = {},
            Parent = nil,
            MainUI = nil,
            Risky = false,
            Flag = Library.NewFlag(),
            Callback = function() end
        }, Options or {})
        --
        local MultiBox = {
            Open = false,
            Hover = false,
            Items = Options.Content,
            Scrollable = false,
            Value = {},
            SelectedOrder = {},
            AllItems = {},
            Section = self,
        }
        --
        Library.Flags[Options.Flag] = MultiBox
        Options.Callback(Options.Default)
        --
        local PreviewMultiBox = Library:CreateObject("Frame", {
            BackgroundTransparency = 1,
            Name = "PreviewMultiBox",
            BorderColor3 = Color3.fromRGB(0, 0, 0),
            Size = Options.Name == "" and UDim2.new(1, 0, 0, 20) or UDim2.new(1, 0, 0, 35),
            BorderSizePixel = 0,
            BackgroundColor3 = Color3.fromRGB(255, 255, 255),
            Parent = Options.Parent
        })
        --
        local MultiBoxOutline = Library:CreateObject("Frame", {
            Name = "MultiBoxOutline",
            Position = UDim2.new(0, 0, 1, -18),
            BorderColor3 = Color3.fromRGB(0, 0, 0),
            Size = UDim2.new(1, 0, 0, 18),
            BorderSizePixel = 0,
            BackgroundColor3 = Library.Theme.Default.Outline,
            Parent = PreviewMultiBox
        })
        --
        Library:AddTheme(MultiBoxOutline, {
            BackgroundColor3 = "Outline",
        })
        --
        local MultiBoxChecker = Library:CreateObject("Frame", {
            Name = "MultiBoxChecker",
            Position = UDim2.new(0, 0, 1, 0),
            Visible = false,
            BorderColor3 = Color3.fromRGB(0, 0, 0),
            Size = UDim2.new(1, 0, 0, 1),
            BorderSizePixel = 0,
            Parent = MultiBoxOutline
        })
        --
        local MultiBoxInline = Library:CreateObject("Frame", {
            Name = "MultiBoxInline",
            Position = UDim2.new(0, 1, 0, 1),
            BorderColor3 = Color3.fromRGB(0, 0, 0),
            Size = UDim2.new(1, -2, 1, -2),
            BorderSizePixel = 0,
            BackgroundColor3 = Library.Theme.Default.Inline,
            Parent = MultiBoxOutline
        })
        --
        Library:AddTheme(MultiBoxInline, {
            BackgroundColor3 = "Inline",
        })
        --
        local MultiBoxBack = Library:CreateObject("Frame", {
            Name = "MultiBoxBack",
            Position = UDim2.new(0, 1, 0, 1),
            BorderColor3 = Color3.fromRGB(0, 0, 0),
            Size = UDim2.new(1, -2, 1, -2),
            BorderSizePixel = 0,
            BackgroundColor3 = Color3.fromRGB(255, 255, 255),
            Parent = MultiBoxInline
        })
        --
        local MultiBoxValue = Library:CreateObject("TextLabel", {
            FontFace = Library.UI.Font,
            TextColor3 = Library.Theme.Default.TextColor,
            BorderColor3 = Color3.fromRGB(0, 0, 0),
            Text = Options.Default ~= "None" and table.find(Options.Content, Options.Default) and Options.Default or "None",
            TextStrokeTransparency = 0,
            Name = "MultiBoxValue",
            BorderSizePixel = 0,
            BackgroundTransparency = 1,
            TextXAlignment = Enum.TextXAlignment.Left,
            Size = UDim2.new(1, 0, 1, 0),
            ZIndex = 2,
            TextSize = Library.UI.FontSize,
            BackgroundColor3 = Color3.fromRGB(255, 255, 255),
            Parent = MultiBoxBack
        })
        --
        Library:AddTheme(MultiBoxValue, {
            TextColor3 = "TextColor",
        })
        --
        local UIPadding_8 = Library:CreateObject("UIPadding", {
            PaddingLeft = UDim.new(0, 4),
            PaddingBottom = UDim.new(0, 1),
            Parent = MultiBoxValue
        })
        --
        local UIGradient_5 = Library:CreateObject("UIGradient", {
            Rotation = 90,
            Color = ColorSequence.new{
                ColorSequenceKeypoint.new(0, Library.Theme.Default.LightContrast),
                ColorSequenceKeypoint.new(1, Library.Theme.Default.DarkContrast)
            },
            Parent = MultiBoxBack
        })
        --
        Library:AddTheme(UIGradient_5, {
            Color = {"LightContrast", "DarkContrast"},
        })
        --
        local ClickDetection_2 = Library:CreateObject("TextButton", {
            FontFace = Library.UI.Font,
            TextColor3 = Color3.fromRGB(0, 0, 0),
            BorderColor3 = Color3.fromRGB(0, 0, 0),
            Name = "ClickDetection_2",
            BackgroundTransparency = 1,
            Size = UDim2.new(1, 0, 1, 0),
            BorderSizePixel = 0,
            TextTransparency = 1,
            TextSize = Library.UI.FontSize,
            BackgroundColor3 = Color3.fromRGB(255, 255, 255),
            Parent = MultiBoxOutline
        })
        --
        local PlusIcon = Library:CreateObject("TextLabel", {
            FontFace = Library.UI.Font,
            TextColor3 = Library.Theme.Default.TextColor,
            BorderColor3 = Color3.fromRGB(0, 0, 0),
            Text = "+",
            TextStrokeTransparency = 0,
            Name = "DropdownName",
            Position = UDim2.new(1, -13, 0, 0),
            Size = UDim2.new(0, 10, 0, 10),
            BackgroundTransparency = 1,
            TextXAlignment = Enum.TextXAlignment.Left,
            BorderSizePixel = 0,
            TextYAlignment = Enum.TextYAlignment.Center,
            TextSize = Library.UI.FontSize,
            BackgroundColor3 = Color3.fromRGB(255, 255, 255),
            Parent = MultiBoxBack
        })
        --
        Library:AddTheme(PlusIcon, {
            TextColor3 = "TextColor",
        })
        --
        local MultiBoxName = Library:CreateObject("TextLabel", {
            FontFace = Library.UI.Font,
            TextColor3 = Options.Risky and Library.Theme.Default.Risky or Library.Theme.Default.TextColor,
            BorderColor3 = Color3.fromRGB(0, 0, 0),
            Text = Options.Name,
            TextStrokeTransparency = 0,
            Name = "MultiBoxName",
            Size = UDim2.new(1, 0, 1, 0),
            BackgroundTransparency = 1,
            TextXAlignment = Enum.TextXAlignment.Left,
            BorderSizePixel = 0,
            TextYAlignment = Enum.TextYAlignment.Top,
            TextSize = Library.UI.FontSize,
            BackgroundColor3 = Color3.fromRGB(255, 255, 255),
            Parent = PreviewMultiBox
        })
        --
        Library:AddTheme(MultiBoxName, {
            TextColor3 = Options.Risky and "Risky" or "TextColor",
        })
        --
        local UIPadding_9 = Library:CreateObject("UIPadding", {
            PaddingLeft = UDim.new(0, 2),
            Parent = MultiBoxName
        })
        --
        local MultiBoxContentHolder = Library:CreateObject("Frame", {
            Name = "MultiBoxContentHolder",
            Position = UDim2.new(0, 0, 0, 0),
            BorderColor3 = Color3.fromRGB(0, 0, 0),
            Size = UDim2.new(0, 0, 0, 0),
            ZIndex = Options.MainUI.ZIndex + Library.UI.DropdownZIndex,
            BorderSizePixel = 0,
            BackgroundColor3 = Library.Theme.Default.Outline,
            Visible = false,
            Parent = Library.UI.ScreenGUI
        })
        --
        Library:AddTheme(MultiBoxContentHolder, {
            BackgroundColor3 = "Outline",
        })
        --
        local MultiBoxContentInline = Library:CreateObject("Frame", {
            Name = "MultiBoxContentInline",
            Position = UDim2.new(0, 1, 0, 1),
            BorderColor3 = Color3.fromRGB(0, 0, 0),
            Size = UDim2.new(1, -2, 1, -2),
            BorderSizePixel = 0,
            BackgroundColor3 = Library.Theme.Default.Inline,
            Parent = MultiBoxContentHolder
        })
        --
        Library:AddTheme(MultiBoxContentInline, {
            BackgroundColor3 = "Inline",
        })
        --
        local MultiBoxDarkBack = Library:CreateObject("Frame", {
            Name = "MultiBoxInline",
            Position = UDim2.new(0, 1, 0, 1),
            BorderColor3 = Color3.fromRGB(0, 0, 0),
            Size = UDim2.new(1, -2, 1, -2),
            BorderSizePixel = 0,
            BackgroundColor3 = Library.Theme.Default.DarkContrast,
            Parent = MultiBoxContentInline
        })
        --
        Library:AddTheme(MultiBoxDarkBack, {
            BackgroundColor3 = "DarkContrast",
        })
        --
        local MultiBoxContentMain = Library:CreateObject("Frame", {
            Name = "MultiBoxContentMain",
            Position = UDim2.new(0, 1, 0, 1),
            BorderColor3 = Color3.fromRGB(0, 0, 0),
            Size = UDim2.new(1, -2, 1, -2),
            BorderSizePixel = 0,
            BackgroundColor3 = Color3.fromRGB(255, 255, 255),
            Parent = MultiBoxContentInline
        })
        --
        local UIGradient_62 = Library:CreateObject("UIGradient", {
            Rotation = -90,
            Color = ColorSequence.new{
                ColorSequenceKeypoint.new(0, Library.Theme.Default.LightContrast),
                ColorSequenceKeypoint.new(1, Library.Theme.Default.DarkContrast)
            },
            Parent = MultiBoxContentMain
        })
        --
        Library:AddTheme(UIGradient_62, {
            Color = {"LightContrast", "DarkContrast"},
        })
        --
        local MultiBoxContentScrolling = Library:CreateObject("ScrollingFrame", {
            ScrollBarImageColor3 = Library.Theme.Default.Accent,
            MidImage = "http://www.roblox.com/asset/?id=158362264",
            Active = true,
            AutomaticCanvasSize = Enum.AutomaticSize.Y,
            ScrollBarThickness = 2,
            CanvasSize = UDim2.new(0, 0, 0, 0),
            Name = "MultiBoxContentScrolling",
            Size = UDim2.new(1, 0, 1, 0),
            TopImage = "http://www.roblox.com/asset/?id=158362264",
            BackgroundTransparency = 1,
            ScrollBarImageTransparency = 1,
            BorderColor3 = Color3.fromRGB(0, 0, 0),
            BottomImage = "http://www.roblox.com/asset/?id=158362264",
            BorderSizePixel = 0,
            BackgroundColor3 = Color3.fromRGB(255, 255, 255),
            Parent = MultiBoxContentMain
        })
        --
        Library:AddTheme(MultiBoxContentScrolling, {
            ScrollBarImageColor3 = "Accent",
        })
        --
        local UIPadding_76 = Library:CreateObject("UIPadding", {
            PaddingBottom = UDim.new(0, 2),
            Parent = MultiBoxContentScrolling
        })
        --
        local UIListLayout_2 = Library:CreateObject("UIListLayout", {
            Padding = UDim.new(0, 4),
            SortOrder = Enum.SortOrder.LayoutOrder,
            Parent = MultiBoxContentScrolling
        })
        --
        function MultiBox:Set(State)
            for Index, Value in MultiBox.AllItems do
                if table.find(State, Index) then
                    Value:Activate()
                end
            end
        end
        --
        function MultiBox:GetName()
            return Options.Name
        end
        --
        function MultiBox:Get()
            return MultiBox.Value
        end
        --
        function MultiBox:SetVisible(Bool)
            PreviewMultiBox.Visible = Bool
        end
        --
        function MultiBox:Update()
            MultiBoxContentHolder.Size = UDim2.new(0, MultiBoxOutline.AbsoluteSize.X + (Options.MainUI.Name == "MainWindowOutline" and 1 or 0), 0, MultiBoxContentHolder.AbsoluteSize.Y)
            MultiBoxContentHolder.Position = UDim2.new(0, MultiBoxOutline.AbsolutePosition.X, 0, ((MultiBoxOutline.AbsolutePosition.Y + MultiBoxOutline.AbsoluteSize.Y) + game:GetService("GuiService"):GetGuiInset().Y))
            --
            if MultiBox.Open then
                MultiBoxContentHolder.Visible = Library:ScrollingCheck(Options.Parent, MultiBoxChecker)
            end
        end
        --
        MultiBox:Update()
        --
        Library:Connection(MultiBoxOutline:GetPropertyChangedSignal("AbsolutePosition"), MultiBox.Update)
        Library:Connection(MultiBoxOutline:GetPropertyChangedSignal("AbsoluteSize"), MultiBox.Update)
        --
        if Options.Parent:IsA("ScrollingFrame") then
            Library:Connection(Options.Parent:GetPropertyChangedSignal("CanvasPosition"), function()
                MultiBox:Update()
            end)
        end
        --
        Library:Connection(Options.MainUI:GetPropertyChangedSignal("ZIndex"), function()
            MultiBoxContentHolder.ZIndex = Options.MainUI.ZIndex + Library.UI.DropdownZIndex
        end)
        --
        Library:Connection(Options.MainUI:GetPropertyChangedSignal("Visible"), function()
            if not Options.MainUI.Visible then
                MultiBoxContentHolder.Visible = false
            else
                MultiBoxContentHolder.Visible = MultiBox.Open
            end
        end)
        --
        Library:Connection(Options.Parent:GetPropertyChangedSignal("Visible"), function()
            if not Options.Parent.Visible then
                MultiBoxContentHolder.Visible = false
            else
                MultiBoxContentHolder.Visible = MultiBox.Open
            end
        end)
        --
        Library:Connection(Options.Parent.Parent.Parent.Parent.Parent.Parent:GetPropertyChangedSignal("Visible"), function() -- only way it would work ignore
            if not Options.Parent.Parent.Parent.Parent.Parent.Parent.Visible then
                MultiBoxContentHolder.Visible = false
            else
                MultiBoxContentHolder.Visible = MultiBox.Open
            end
        end)
        --
        do -- Functions
            function MultiBox:AddValue(Index, Value)
                local Item = {
                    Hovering = false,
                    Active = false,
                }
                --
                if Item[Index] ~= nil then
                    return
                end
                --
                Item[Index] = {
                    instance = {},
                    value = Value,
                }
                --
                MultiBox.AllItems[Value] = Item
                --
                local MultiBoxItemTemplate = Library:CreateObject("Frame", {
                    BackgroundTransparency = 1,
                    Name = "MultiBoxItemTemplate",
                    BorderColor3 = Color3.fromRGB(0, 0, 0),
                    Size = UDim2.new(1, 0, 0, 15),
                    BorderSizePixel = 0,
                    BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                    Parent = MultiBoxContentScrolling
                })
                --
                local ClickDetection_3 = Library:CreateObject("TextButton", {
                    FontFace = Library.UI.Font,
                    TextColor3 = Color3.fromRGB(0, 0, 0),
                    BorderColor3 = Color3.fromRGB(0, 0, 0),
                    Name = "ClickDetection_3",
                    BackgroundTransparency = 1,
                    Size = UDim2.new(1, 0, 1, 0),
                    BorderSizePixel = 0,
                    TextTransparency = 1,
                    TextSize = Library.UI.FontSize,
                    BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                    Parent = MultiBoxItemTemplate
                })
                --
                local Name = Library:CreateObject("TextLabel", {
                    FontFace = Library.UI.Font,
                    TextColor3 = Library.Theme.Default.TextColor,
                    BorderColor3 = Color3.fromRGB(0, 0, 0),
                    TextStrokeTransparency = 0,
                    Name = "Name",
                    Text = tostring(Value),
                    BackgroundTransparency = 1,
                    TextXAlignment = Enum.TextXAlignment.Left,
                    Size = UDim2.new(1, 0, 1, 0),
                    BorderSizePixel = 0,
                    TextSize = Library.UI.FontSize,
                    BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                    Parent = MultiBoxItemTemplate
                })
                --
                Library:AddTheme(Name, {
                    TextColor3 = "TextColor",
                })
                --
                local UIPadding_79 = Library:CreateObject("UIPadding", {
                    PaddingLeft = UDim.new(0, 5),
                    Parent = Name
                })
                --
                do -- Functions
                    function MultiBox:UpdateValue()
                        MultiBox.Value = Item:GetSelectedItems()
                        --
                        MultiBoxValue.Text = Library:ClampString(table.concat(MultiBox.Value, ", "), MultiBoxContentMain.AbsoluteSize.X - PlusIcon.AbsoluteSize.X - 4)
                    end
                    --
                    function Item:SelectItem(Item)
                        if not table.find(MultiBox.SelectedOrder, Item) then
                            table.insert(MultiBox.SelectedOrder, Item)
                        end
                        --
                        MultiBox:UpdateValue()
                    end

                    function Item:DeselectItem(Item)
                        for Index, Value in MultiBox.SelectedOrder do
                            if Value == Item then
                                table.remove(MultiBox.SelectedOrder, Index)
                                break
                            end
                        end
                        --
                        MultiBox:UpdateValue()
                    end
                    --
                    function Item:Activate()
                        if not Item.Active then
                            Item.Active = true
                            Library:TweenObject(UIPadding_79, TweenInfo.new(Library.UI.TweenSpeed, Library.UI.TweenEasingStyle, Enum.EasingDirection.InOut), {PaddingLeft = UDim.new(0, 7)})
                            --
                            task.delay(0, function() -- dk why this makes it work
                                Library:TweenObject(Name, TweenInfo.new(Library.UI.TweenSpeed, Library.UI.TweenEasingStyle, Enum.EasingDirection.InOut), {TextColor3 = Library.Theme.Default.Accent})
                            end)
                            --
                            Library:AddTheme(Name, {
                                TextColor3 = "Accent",
                            })
                            --
                            MultiBox.CurrentItem = Item
                            MultiBox.Items[Value] = true
                            Library.Flags[Options.Flag] = MultiBox
                            Options.Callback(MultiBox.Value)
                            Item:SelectItem(Value)
                        end
                    end
                    --
                    function Item:Deactivate()
                        if Item.Active then
                            Item.Active = false
                            Item.Hover = false
                            Library:TweenObject(UIPadding_79, TweenInfo.new(Library.UI.TweenSpeed, Library.UI.TweenEasingStyle, Enum.EasingDirection.InOut), {PaddingLeft = UDim.new(0, 5)})
                            --
                            Library:TweenObject(Name, TweenInfo.new(Library.UI.TweenSpeed, Library.UI.TweenEasingStyle, Enum.EasingDirection.InOut), {TextColor3 = Library.Theme.Default.TextColor})
                            --
                            Library:AddTheme(Name, {
                                TextColor3 = "TextColor",
                            })
                            --
                            MultiBox.CurrentItem = nil
                            Library.Flags[Options.Flag] = MultiBox
                            Options.Callback(MultiBox.Value)
                            Item:DeselectItem(Value)
                        end
                    end
                    --
                    function Item:GetSelectedItems()
                        local SelectedItems = {}
                        --
                        for _, Item in MultiBox.SelectedOrder do
                            if MultiBox.Items[Item] then
                                table.insert(SelectedItems, Item)
                            end
                        end
                        --
                        return SelectedItems
                    end
                    --
                    if table.find(Options.Default, Item) then
                        Item:Activate()
                    end
                    --
                    function Item:Toggle()
                        if MultiBox.Items[Value] then
                            Item:Activate()
                        else
                            Item:Deactivate()
                        end
                    end
                end
                --
                do -- Connections
                    Library:Connection(ClickDetection_3.MouseButton1Click, function()
                        MultiBox.Items[Value] = not MultiBox.Items[Value]
                        Item:Toggle()
                    end)
                end
                --
                if typeof(Options.Default) == "table" and table.find(Options.Default, Value) then
                    Item:Activate()
                    Item:SelectItem(Value)
                end
            end
            --
            function MultiBox:Toggle()
                if MultiBox.Open then
                    PlusIcon.Text = "+"
                    PlusIcon.Position = UDim2.new(1, -13, 0, 0)
                    --
                    Library:TweenObject(MultiBoxContentHolder, TweenInfo.new(Library.UI.TweenSpeed, Library.UI.TweenEasingStyle, Enum.EasingDirection.InOut), {Size = UDim2.new(0, MultiBoxOutline.AbsoluteSize.X + (Options.MainUI.Name == "MainWindowOutline" and 1 or 0), 0, 0)}, function()
                        PreviewMultiBox.ZIndex = 1
                    end)
                    --
                    Library:TweenObject(MultiBoxContentScrolling, TweenInfo.new(Library.UI.TweenSpeed, Library.UI.TweenEasingStyle, Enum.EasingDirection.InOut), {ScrollBarImageTransparency = 1}, function()
                        MultiBoxContentHolder.Visible = false
                    end)
                else
                    if Library.UI.HoverHighlight then
                        Library:TweenObject(MultiBoxOutline, TweenInfo.new(Library.UI.TweenSpeed, Library.UI.TweenEasingStyle, Enum.EasingDirection.InOut), {BackgroundColor3 = Library.Theme.Default.Accent})
                        --
                        Library:AddTheme(MultiBoxOutline, {
                            BackgroundColor3 = "Accent",
                        })
                    end
                    --
                    MultiBoxContentHolder.ZIndex = Options.MainUI.ZIndex + Library.UI.DropdownZIndex
                    Library.UI.DropdownZIndex += 1
                    --
                    MultiBoxContentHolder.Visible = true
                    --
                    if MultiBoxContentScrolling.AbsoluteCanvasSize.Y > 121 then
                        Library:TweenObject(MultiBoxContentScrolling, TweenInfo.new(Library.UI.TweenSpeed, Library.UI.TweenEasingStyle, Enum.EasingDirection.InOut), {ScrollBarImageTransparency = 0})
                        --
                        if not MultiBox.Scrollable then
                            MultiBoxContentScrolling.Size = UDim2.new(MultiBoxContentScrolling.Size.X.Scale, MultiBoxContentScrolling.Size.X.Offset + 3, MultiBoxContentScrolling.Size.Y.Scale, MultiBoxContentScrolling.Size.Y.Offset)
                            MultiBoxContentMain.Size = UDim2.new(MultiBoxContentMain.Size.X.Scale, MultiBoxContentMain.Size.X.Offset - 4, MultiBoxContentMain.Size.Y.Scale, MultiBoxContentMain.Size.Y.Offset)
                            --
                            MultiBox.Scrollable = true
                        end
                    end
                    --
                    PlusIcon.Text = "-"
                    PlusIcon.Position = UDim2.new(1, -9, 0, 0)
                    --
                    if #Options.Content < 6 then
                        Library:TweenObject(MultiBoxContentHolder, TweenInfo.new(Library.UI.TweenSpeed, Library.UI.TweenEasingStyle, Enum.EasingDirection.InOut), {Size = UDim2.new(0, MultiBoxOutline.AbsoluteSize.X + (Options.MainUI.Name == "MainWindowOutline" and 1 or 0), 0, #Options.Content * 20)})
                    else
                        Library:TweenObject(MultiBoxContentHolder, TweenInfo.new(Library.UI.TweenSpeed, Library.UI.TweenEasingStyle, Enum.EasingDirection.InOut), {Size = UDim2.new(0, MultiBoxOutline.AbsoluteSize.X + (Options.MainUI.Name == "MainWindowOutline" and 1 or 0), 0, 120)})
                    end
                end
                --
                MultiBox.Open = not MultiBox.Open
            end
        end
        --
        do -- Connections
            Library:Connection(ClickDetection_2.MouseButton1Click, function()
                MultiBox:Toggle()
            end)
            --
            Library:Connection(MultiBoxOutline.MouseEnter, function()
                if not Library.UI.HoverHighlight then return end
                --
                MultiBox.Hovering = true
                --
                Library:TweenObject(MultiBoxOutline, TweenInfo.new(Library.UI.TweenSpeed, Library.UI.TweenEasingStyle, Enum.EasingDirection.InOut), {BackgroundColor3 = Library.Theme.Default.Accent})
                --
                Library:AddTheme(MultiBoxOutline, {
                    BackgroundColor3 = "Accent",
                })
            end)
            --
            Library:Connection(MultiBoxOutline.MouseLeave, function()
                if MultiBox.Open then return end
                --
                MultiBox.Hovering = false
                --
                Library:TweenObject(MultiBoxOutline, TweenInfo.new(Library.UI.TweenSpeed, Library.UI.TweenEasingStyle, Enum.EasingDirection.InOut), {BackgroundColor3 = Library.Theme.Default.Outline})
                --
                Library:AddTheme(MultiBoxOutline, {
                    BackgroundColor3 = "Outline",
                })
            end)
        end
        --
        for Index, Value in Options.Content do
            if typeof(Value) == "boolean" then continue end
            --
            MultiBox:AddValue(Index, Value)
        end
        --
        return MultiBox
    end
    --
    function Library:Dropdown(Options)
        Options = Library:Validate({
            Default = "None",
            Name = "Preview Dropdown",
            Content = {},
            Parent = nil,
            MainUI = nil,
            TabUI = nil,
            Risky = false,
            Flag = Library.NewFlag(),
            Callback = function() end
        }, Options or {})
        --
        local Dropdown = {
            Open = false,
            Active = false,
            Hovering = false,
            CurrentItem = nil,
            Scrollable = false,
            Items = {},
            Section = self,
            Value = Options.Default,
        }
        --
        Library.Flags[Options.Flag] = Dropdown
        --
        local PreviewDropdown = Library:CreateObject("Frame", {
            BackgroundTransparency = 1,
            Name = "PreviewDropdown",
            BorderColor3 = Color3.fromRGB(0, 0, 0),
            Size = Options.Name == "" and UDim2.new(1, 0, 0, 20) or UDim2.new(1, 0, 0, 35),
            BorderSizePixel = 0,
            BackgroundColor3 = Color3.fromRGB(255, 255, 255),
            Parent = Options.Parent
        })
        --
        local DropdownOutline = Library:CreateObject("Frame", {
            Name = "DropdownOutline",
            Position = UDim2.new(0, 0, 1, -18),
            BorderColor3 = Color3.fromRGB(0, 0, 0),
            Size = UDim2.new(1, 0, 0, 18),
            BorderSizePixel = 0,
            BackgroundColor3 = Library.Theme.Default.Outline,
            Parent = PreviewDropdown
        })
        --
        Library:AddTheme(DropdownOutline, {
            BackgroundColor3 = "Outline",
        })
        --
        local DropdownChecker = Library:CreateObject("Frame", {
            Name = "DropdownChecker",
            Position = UDim2.new(0, 0, 1, 0),
            Visible = false,
            BorderColor3 = Color3.fromRGB(0, 0, 0),
            Size = UDim2.new(1, 0, 0, 1),
            BorderSizePixel = 0,
            Parent = DropdownOutline
        })
        --
        local DropdownInline = Library:CreateObject("Frame", {
            Name = "DropdownInline",
            Position = UDim2.new(0, 1, 0, 1),
            BorderColor3 = Color3.fromRGB(0, 0, 0),
            Size = UDim2.new(1, -2, 1, -2),
            BorderSizePixel = 0,
            BackgroundColor3 = Library.Theme.Default.Inline,
            Parent = DropdownOutline
        })
        --
        Library:AddTheme(DropdownInline, {
            BackgroundColor3 = "Inline",
        })
        --
        local DropdownBack = Library:CreateObject("Frame", {
            Name = "DropdownBack",
            Position = UDim2.new(0, 1, 0, 1),
            BorderColor3 = Color3.fromRGB(0, 0, 0),
            Size = UDim2.new(1, -2, 1, -2),
            BorderSizePixel = 0,
            BackgroundColor3 = Color3.fromRGB(255, 255, 255),
            Parent = DropdownInline
        })
        --
        local DropdownValue = Library:CreateObject("TextLabel", {
            FontFace = Library.UI.Font,
            TextColor3 = Library.Theme.Default.TextColor,
            BorderColor3 = Color3.fromRGB(0, 0, 0),
            Text = Options.Default ~= "None" and table.find(Options.Content, Options.Default) and Options.Default or "None",
            TextStrokeTransparency = 0,
            Name = "DropdownValue",
            BorderSizePixel = 0,
            BackgroundTransparency = 1,
            TextXAlignment = Enum.TextXAlignment.Left,
            Size = UDim2.new(1, 0, 1, 0),
            ZIndex = 2,
            TextSize = Library.UI.FontSize,
            BackgroundColor3 = Color3.fromRGB(255, 255, 255),
            Parent = DropdownBack
        })
        --
        Library:AddTheme(DropdownValue, {
            TextColor3 = "TextColor",
        })
        --
        local UIPadding_8 = Library:CreateObject("UIPadding", {
            PaddingLeft = UDim.new(0, 4),
            PaddingBottom = UDim.new(0, 1),
            Parent = DropdownValue
        })
        --
        local UIGradient_5 = Library:CreateObject("UIGradient", {
            Rotation = 90,
            Color = ColorSequence.new{
                ColorSequenceKeypoint.new(0, Library.Theme.Default.LightContrast),
                ColorSequenceKeypoint.new(1, Library.Theme.Default.DarkContrast)
            },
            Parent = DropdownBack
        })
        --
        Library:AddTheme(UIGradient_5, {
            Color = {"LightContrast", "DarkContrast"},
        })
        --
        local ClickDetection_2 = Library:CreateObject("TextButton", {
            FontFace = Library.UI.Font,
            TextColor3 = Color3.fromRGB(0, 0, 0),
            BorderColor3 = Color3.fromRGB(0, 0, 0),
            Name = "ClickDetection_2",
            BackgroundTransparency = 1,
            Size = UDim2.new(1, 0, 1, 0),
            BorderSizePixel = 0,
            TextTransparency = 1,
            TextSize = Library.UI.FontSize,
            BackgroundColor3 = Color3.fromRGB(255, 255, 255),
            Parent = DropdownOutline
        })
        --
        local PlusIcon = Library:CreateObject("TextLabel", {
            FontFace = Library.UI.Font,
            TextColor3 = Library.Theme.Default.TextColor,
            BorderColor3 = Color3.fromRGB(0, 0, 0),
            Text = "+",
            TextStrokeTransparency = 0,
            Name = "DropdownName",
            Position = UDim2.new(1, -13, 0, 0),
            Size = UDim2.new(0, 10, 0, 10),
            BackgroundTransparency = 1,
            TextXAlignment = Enum.TextXAlignment.Left,
            BorderSizePixel = 0,
            TextYAlignment = Enum.TextYAlignment.Center,
            TextSize = Library.UI.FontSize,
            BackgroundColor3 = Color3.fromRGB(255, 255, 255),
            Parent = DropdownBack
        })
        --
        Library:AddTheme(PlusIcon, {
            TextColor3 = "TextColor",
        })
        --
        local DropdownName = Library:CreateObject("TextLabel", {
            FontFace = Library.UI.Font,
            TextColor3 = Options.Risky and Library.Theme.Default.Risky or Library.Theme.Default.TextColor,
            BorderColor3 = Color3.fromRGB(0, 0, 0),
            Text = Options.Name,
            TextStrokeTransparency = 0,
            Name = "DropdownName",
            Size = UDim2.new(1, 0, 1, 0),
            BackgroundTransparency = 1,
            TextXAlignment = Enum.TextXAlignment.Left,
            BorderSizePixel = 0,
            TextYAlignment = Enum.TextYAlignment.Top,
            TextSize = Library.UI.FontSize,
            BackgroundColor3 = Color3.fromRGB(255, 255, 255),
            Parent = PreviewDropdown
        })
        --
        Library:AddTheme(DropdownName, {
            TextColor3 = Options.Risky and "Risky" or "TextColor",
        })
        --
        local UIPadding_9 = Library:CreateObject("UIPadding", {
            PaddingLeft = UDim.new(0, 2),
            Parent = DropdownName
        })
        --
        local DropdownContentHolder = Library:CreateObject("Frame", {
            Name = "DropdownContentHolder",
            Position = UDim2.new(0, 0, 0, 0),
            BorderColor3 = Color3.fromRGB(0, 0, 0),
            Size = UDim2.new(0, 0, 0, 0),
            ZIndex = Options.MainUI.ZIndex + Library.UI.DropdownZIndex,
            BorderSizePixel = 0,
            BackgroundColor3 = Library.Theme.Default.Outline,
            Visible = false,
            Parent = Library.UI.ScreenGUI
        })
        --
        Library:AddTheme(DropdownContentHolder, {
            BackgroundColor3 = "Outline",
        })
        --
        local DropdownContentInline = Library:CreateObject("Frame", {
            Name = "DropdownContentInline",
            Position = UDim2.new(0, 1, 0, 1),
            BorderColor3 = Color3.fromRGB(0, 0, 0),
            Size = UDim2.new(1, -2, 1, -2),
            BorderSizePixel = 0,
            BackgroundColor3 = Library.Theme.Default.Inline,
            Parent = DropdownContentHolder
        })
        --
        Library:AddTheme(DropdownContentInline, {
            BackgroundColor3 = "Inline",
        })
        --
        local DropdownDarkBack = Library:CreateObject("Frame", {
            Name = "PlayerListInline",
            Position = UDim2.new(0, 1, 0, 1),
            BorderColor3 = Color3.fromRGB(0, 0, 0),
            Size = UDim2.new(1, -2, 1, -2),
            BorderSizePixel = 0,
            BackgroundColor3 = Library.Theme.Default.DarkContrast,
            Parent = DropdownContentInline
        })
        --
        Library:AddTheme(DropdownDarkBack, {
            BackgroundColor3 = "DarkContrast",
        })
        --
        local DropdownContentMain = Library:CreateObject("Frame", {
            Name = "DropdownContentMain",
            Position = UDim2.new(0, 1, 0, 1),
            BorderColor3 = Color3.fromRGB(0, 0, 0),
            Size = UDim2.new(1, -2, 1, -2),
            BorderSizePixel = 0,
            BackgroundColor3 = Color3.fromRGB(255, 255, 255),
            Parent = DropdownContentInline
        })
        --
        local UIGradient_62 = Library:CreateObject("UIGradient", {
            Rotation = -90,
            Color = ColorSequence.new{
                ColorSequenceKeypoint.new(0, Library.Theme.Default.LightContrast),
                ColorSequenceKeypoint.new(1, Library.Theme.Default.DarkContrast)
            },
            Parent = DropdownContentMain
        })
        --
        Library:AddTheme(UIGradient_62, {
            Color = {"LightContrast", "DarkContrast"},
        })
        --
        local DropdownContentScrolling = Library:CreateObject("ScrollingFrame", {
            ScrollBarImageColor3 = Library.Theme.Default.Accent,
            MidImage = "http://www.roblox.com/asset/?id=158362264",
            Active = true,
            CanvasSize = UDim2.new(0, 0, 0, 0),
            AutomaticCanvasSize = Enum.AutomaticSize.Y,
            ScrollBarThickness = 2,
            Name = "DropdownContentScrolling",
            Size = UDim2.new(1, 0, 1, 0),
            TopImage = "http://www.roblox.com/asset/?id=158362264",
            BackgroundTransparency = 1,
            ScrollBarImageTransparency = 1,
            BorderColor3 = Color3.fromRGB(0, 0, 0),
            BottomImage = "http://www.roblox.com/asset/?id=158362264",
            BorderSizePixel = 0,
            BackgroundColor3 = Color3.fromRGB(255, 255, 255),
            Parent = DropdownContentMain
        })
        --
        Library:AddTheme(DropdownContentScrolling, {
            ScrollBarImageColor3 = "Accent",
        })
        --
        local UIPadding_76 = Library:CreateObject("UIPadding", {
            PaddingBottom = UDim.new(0, 2),
            Parent = DropdownContentScrolling
        })
        --
        local UIListLayout_2 = Library:CreateObject("UIListLayout", {
            Padding = UDim.new(0, 4),
            SortOrder = Enum.SortOrder.LayoutOrder,
            Parent = DropdownContentScrolling
        })
        --
        function Dropdown:Set(State)
            for Index, Value in Dropdown.Items do
                if Index == State then
                    Value:Activate()
                end
            end
        end
        --
        function Dropdown:Get()
            return Dropdown.Value
        end
        --
        function Dropdown:SetVisible(State)
            PreviewDropdown.Visible = State
            --
            if State then
                Library.Flags[Options.Flag] = Dropdown
                Options.Callback(Value)
            end
        end
        --
        function Dropdown:Update()
            DropdownContentHolder.Size = UDim2.new(0, DropdownOutline.AbsoluteSize.X + (Options.MainUI.Name == "MainWindowOutline" and 1 or 0), 0, DropdownContentHolder.AbsoluteSize.Y)
            DropdownContentHolder.Position = UDim2.new(0, DropdownOutline.AbsolutePosition.X, 0, ((DropdownOutline.AbsolutePosition.Y + DropdownOutline.AbsoluteSize.Y) + game:GetService("GuiService"):GetGuiInset().Y))
            --
            if Dropdown.Open then
                DropdownContentHolder.Visible = Library:ScrollingCheck(Options.Parent, DropdownChecker)
            end
        end
        --
        Dropdown:Update()
        --
        Library:Connection(DropdownOutline:GetPropertyChangedSignal("AbsolutePosition"), Dropdown.Update)
        Library:Connection(DropdownOutline:GetPropertyChangedSignal("AbsoluteSize"), Dropdown.Update)
        --
        if Options.Parent:IsA("ScrollingFrame") then
            Library:Connection(Options.Parent:GetPropertyChangedSignal("CanvasPosition"), function()
                Dropdown:Update()
            end)
        end
        --
        Library:Connection(Options.MainUI:GetPropertyChangedSignal("ZIndex"), function()
            DropdownContentHolder.ZIndex = Options.MainUI.ZIndex + Library.UI.DropdownZIndex
        end)
        --
        Library:Connection(Options.MainUI:GetPropertyChangedSignal("Visible"), function()
            if not Options.MainUI.Visible then
                DropdownContentHolder.Visible = false
            else
                DropdownContentHolder.Visible = Dropdown.Open
            end
        end)
        --
        Library:Connection(Options.Parent:GetPropertyChangedSignal("Visible"), function()
            if not Options.Parent.Visible then
                DropdownContentHolder.Visible = false
            else
                DropdownContentHolder.Visible = Dropdown.Open
            end
        end)
        --
        if Options.TabUI then
            Library:Connection(Options.Parent.Parent.Parent.Parent.Parent.Parent:GetPropertyChangedSignal("Visible"), function() -- only way it would work ignore
                if not Options.Parent.Parent.Parent.Parent.Parent.Parent.Visible then
                    DropdownContentHolder.Visible = false
                else
                    DropdownContentHolder.Visible = Dropdown.Open
                end
            end)
        end
        --
        do -- Functions
            function Dropdown:AddValue(Index, Value)
                local Item = {
                    Hovering = false,
                    Active = false,
                }
                --
                if Item[Index] ~= nil then
                    return
                end
                --
                Item[Index] = {
                    instance = {},
                    value = Value,
                }
                --
                Dropdown.Items[Value] = Item
                --
                local DropdownItemTemplate = Library:CreateObject("Frame", {
                    BackgroundTransparency = 1,
                    Name = "DropdownItemTemplate",
                    BorderColor3 = Color3.fromRGB(0, 0, 0),
                    Size = UDim2.new(1, 0, 0, 15),
                    BorderSizePixel = 0,
                    BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                    Parent = DropdownContentScrolling
                })
                --
                local ClickDetection_3 = Library:CreateObject("TextButton", {
                    FontFace = Library.UI.Font,
                    TextColor3 = Color3.fromRGB(0, 0, 0),
                    BorderColor3 = Color3.fromRGB(0, 0, 0),
                    Name = "ClickDetection_3",
                    BackgroundTransparency = 1,
                    Size = UDim2.new(1, 0, 1, 0),
                    BorderSizePixel = 0,
                    TextTransparency = 1,
                    TextSize = Library.UI.FontSize,
                    BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                    Parent = DropdownItemTemplate
                })
                --
                local Name = Library:CreateObject("TextLabel", {
                    FontFace = Library.UI.Font,
                    TextColor3 = Library.Theme.Default.TextColor,
                    BorderColor3 = Color3.fromRGB(0, 0, 0),
                    TextStrokeTransparency = 0,
                    Name = "Name",
                    Text = Value,
                    BackgroundTransparency = 1,
                    TextXAlignment = Enum.TextXAlignment.Left,
                    Size = UDim2.new(1, 0, 1, 0),
                    BorderSizePixel = 0,
                    TextSize = Library.UI.FontSize,
                    BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                    Parent = DropdownItemTemplate
                })
                --
                Library:AddTheme(Name, {
                    TextColor3 = "TextColor",
                })
                --
                local UIPadding_79 = Library:CreateObject("UIPadding", {
                    PaddingLeft = UDim.new(0, 5),
                    Parent = Name
                })
                --
                do -- Functions
                    function Item:Activate()
                        if not Item.Active then
                            if Dropdown.CurrentItem ~= nil then
                                Dropdown.CurrentItem:Deactivate()
                            end
                            --
                            Item.Active = true
                            Library:TweenObject(UIPadding_79, TweenInfo.new(Library.UI.TweenSpeed, Library.UI.TweenEasingStyle, Enum.EasingDirection.InOut), {PaddingLeft = UDim.new(0, 7)})
                            --
                            task.delay(0, function() -- dk why this makes it work
                                Library:TweenObject(Name, TweenInfo.new(Library.UI.TweenSpeed, Library.UI.TweenEasingStyle, Enum.EasingDirection.InOut), {TextColor3 = Library.Theme.Default.Accent})
                            end)
                            --
                            Library:AddTheme(Name, {
                                TextColor3 = "Accent",
                            })
                            --
                            Dropdown.CurrentItem = Item
                            --
                            Dropdown.Value = Value
                            Library.Flags[Options.Flag] = Dropdown
                            Options.Callback(Value)
                            DropdownValue.Text = Value
                        end
                    end
                    --
                    function Item:Deactivate()
                        if Item.Active and Dropdown.CurrentItem == Item then
                            Item.Active = false
                            Item.Hover = false
                            Library:TweenObject(UIPadding_79, TweenInfo.new(Library.UI.TweenSpeed, Library.UI.TweenEasingStyle, Enum.EasingDirection.InOut), {PaddingLeft = UDim.new(0, 5)})
                            --
                            Library:TweenObject(Name, TweenInfo.new(Library.UI.TweenSpeed, Library.UI.TweenEasingStyle, Enum.EasingDirection.InOut), {TextColor3 = Library.Theme.Default.TextColor})
                            --
                            Library:AddTheme(Name, {
                                TextColor3 = "TextColor",
                            })
                            --
                            Dropdown.CurrentItem = nil
                        end
                    end
                    --
                    function Item:Toggle()
                        if Item.Active then
                            if Dropdown.CurrentItem ~= Item or Dropdown.CurrentItem == nil then
                                Item:Deactivate()
                            end
                        else
                            Item:Activate()
                        end
                    end
                end
                --
                do -- Connections
                    Library:Connection(ClickDetection_3.MouseButton1Click, function()
                        Item:Toggle()
                        Dropdown:Toggle()
                    end)
                end
                --
                if Value == Options.Default then
                    Item:Activate()
                end
            end
            --
            function Dropdown:Toggle()
                if Dropdown.Open then
                    Library:TweenObject(DropdownOutline, TweenInfo.new(Library.UI.TweenSpeed, Library.UI.TweenEasingStyle, Enum.EasingDirection.InOut), {BackgroundColor3 = Library.Theme.Default.Outline})
                    --
                    Library:AddTheme(DropdownOutline, {
                        BackgroundColor3 = "Outline",
                    })
                    --
                    PlusIcon.Text = "+"
                    PlusIcon.Position = UDim2.new(1, -13, 0, 0)
                    --
                    Library:TweenObject(DropdownContentHolder, TweenInfo.new(Library.UI.TweenSpeed, Library.UI.TweenEasingStyle, Enum.EasingDirection.InOut), {Size = UDim2.new(0, DropdownOutline.AbsoluteSize.X + (Options.MainUI.Name == "MainWindowOutline" and 1 or 0), 0, 0)}, function()
                        PreviewDropdown.ZIndex = 1
                    end)
                    --
                    Library:TweenObject(DropdownContentScrolling, TweenInfo.new(Library.UI.TweenSpeed, Library.UI.TweenEasingStyle, Enum.EasingDirection.InOut), {ScrollBarImageTransparency = 1}, function()
                        DropdownContentHolder.Visible = false
                    end)
                else
                    if Library.UI.HoverHighlight then
                        Library:TweenObject(DropdownOutline, TweenInfo.new(Library.UI.TweenSpeed, Library.UI.TweenEasingStyle, Enum.EasingDirection.InOut), {BackgroundColor3 = Library.Theme.Default.Accent})
                        --
                        Library:AddTheme(DropdownOutline, {
                            BackgroundColor3 = "Accent",
                        })
                    end
                    --
                    DropdownContentHolder.ZIndex = Options.MainUI.ZIndex + Library.UI.DropdownZIndex
                    Library.UI.DropdownZIndex += 1
                    --
                    DropdownContentHolder.Visible = true
                    --
                    if DropdownContentScrolling.AbsoluteCanvasSize.Y > 121 then
                        Library:TweenObject(DropdownContentScrolling, TweenInfo.new(Library.UI.TweenSpeed, Library.UI.TweenEasingStyle, Enum.EasingDirection.InOut), {ScrollBarImageTransparency = 0})
                        --
                        if not Dropdown.Scrollable then
                            DropdownContentScrolling.Size = UDim2.new(DropdownContentScrolling.Size.X.Scale, DropdownContentScrolling.Size.X.Offset + 3, DropdownContentScrolling.Size.Y.Scale, DropdownContentScrolling.Size.Y.Offset)
                            DropdownContentMain.Size = UDim2.new(DropdownContentMain.Size.X.Scale, DropdownContentMain.Size.X.Offset - 4, DropdownContentMain.Size.Y.Scale, DropdownContentMain.Size.Y.Offset)
                            --
                            Dropdown.Scrollable = true
                        end
                    end
                    --
                    PlusIcon.Text = "-"
                    PlusIcon.Position = UDim2.new(1, -9, 0, 0)
                    --
                    if #Options.Content < 6 then
                        Library:TweenObject(DropdownContentHolder, TweenInfo.new(Library.UI.TweenSpeed, Library.UI.TweenEasingStyle, Enum.EasingDirection.InOut), {Size = UDim2.new(0, DropdownOutline.AbsoluteSize.X + (Options.MainUI.Name == "MainWindowOutline" and 1 or 0), 0, #Options.Content * 20)})
                    else
                        Library:TweenObject(DropdownContentHolder, TweenInfo.new(Library.UI.TweenSpeed, Library.UI.TweenEasingStyle, Enum.EasingDirection.InOut), {Size = UDim2.new(0, DropdownOutline.AbsoluteSize.X + (Options.MainUI.Name == "MainWindowOutline" and 1 or 0), 0, 120)})
                    end
                end
                --
                Dropdown.Open = not Dropdown.Open
            end
        end
        --
        do -- Connections
            Library:Connection(ClickDetection_2.MouseButton1Click, function()
                Dropdown:Toggle()
            end)
            --
            Library:Connection(DropdownOutline.MouseEnter, function()
                if not Library.UI.HoverHighlight then return end
                --
                Dropdown.Hovering = true
                --
                Library:TweenObject(DropdownOutline, TweenInfo.new(Library.UI.TweenSpeed, Library.UI.TweenEasingStyle, Enum.EasingDirection.InOut), {BackgroundColor3 = Library.Theme.Default.Accent})
                --
                Library:AddTheme(DropdownOutline, {
                    BackgroundColor3 = "Accent",
                })
            end)
            --
            Library:Connection(DropdownOutline.MouseLeave, function()
                if Dropdown.Open then return end
                --
                Dropdown.Hovering = false
                --
                Library:TweenObject(DropdownOutline, TweenInfo.new(Library.UI.TweenSpeed, Library.UI.TweenEasingStyle, Enum.EasingDirection.InOut), {BackgroundColor3 = Library.Theme.Default.Outline})
                --
                Library:AddTheme(DropdownOutline, {
                    BackgroundColor3 = "Outline",
                })
            end)
        end
        --
        for Index, Value in Options.Content do
            Dropdown:AddValue(Index, Value)
        end
        --
        return Dropdown
    end
    --
    function Library:TextBox(Options)
        Options = Library:Validate({
            Default = "",
            Name = "Preview TextBox",
            Max = 32,
            Parent = nil,
            Size = UDim2.new(1, 0, 0, 17),
            Position = UDim2.new(0, 0, 0, 0),
            NumbersOnly = false,
            ClearOnFocus = false,
            CheckIfPressedEnter = false,
            Risky = false,
            Flag = Library.NewFlag(),
            Callback = function() end
        }, Options or {})
        --
        local TextBox = {
            Focused = false,
            Hovering = false,
        }
        --
        Library.Flags[Options.Flag] = TextBox
        --
        local PreviewTextBox = Library:CreateObject("Frame", {
            BackgroundTransparency = 1,
            Name = "PreviewTextBox",
            Position = Options.Position,
            BorderColor3 = Color3.fromRGB(0, 0, 0),
            Size = UDim2.new(1, 0, 0, 19),
            BorderSizePixel = 0,
            BackgroundColor3 = Color3.fromRGB(255, 255, 255),
            Parent = Options.Parent
        })
        --
        local TextBoxOutline = Library:CreateObject("Frame", {
            Name = "TextBoxOutline",
            Position = UDim2.new(0, 0, 0, 2),
            BorderColor3 = Color3.fromRGB(0, 0, 0),
            Size = Options.Size,
            BorderSizePixel = 0,
            BackgroundColor3 = Library.Theme.Default.Outline,
            Parent = PreviewTextBox
        })
        --
        Library:AddTheme(TextBoxOutline, {
            BackgroundColor3 = "Outline",
        })
        --
        local TextBoxInline = Library:CreateObject("Frame", {
            Name = "TextBoxInline",
            Position = UDim2.new(0, 1, 0, 1),
            BorderColor3 = Color3.fromRGB(0, 0, 0),
            Size = UDim2.new(1, -2, 1, -2),
            BorderSizePixel = 0,
            BackgroundColor3 = Library.Theme.Default.Inline,
            Parent = TextBoxOutline
        })
        --
        Library:AddTheme(TextBoxInline, {
            BackgroundColor3 = "Inline",
        })
        --
        local TextBoxMain = Library:CreateObject("Frame", {
            Name = "TextBoxMain",
            Position = UDim2.new(0, 1, 0, 1),
            BorderColor3 = Color3.fromRGB(0, 0, 0),
            Size = UDim2.new(1, -2, 1, -2),
            BorderSizePixel = 0,
            BackgroundColor3 = Color3.fromRGB(255, 255, 255),
            Parent = TextBoxInline
        })
        --
        local TextBoxObject = Library:CreateObject("TextBox", {
            FontFace = Library.UI.Font,
            TextColor3 = Library.Theme.Default.TextColor,
            BorderColor3 = Color3.fromRGB(0, 0, 0),
            Text = Options.Default,
            Position = UDim2.new(0, 0, 0, -1),
            TextStrokeTransparency = 0,
            Size = UDim2.new(1, 0, 1, 0),
            BackgroundTransparency = 1,
            PlaceholderColor3 = Options.Risky and Library.Theme.Default.Risky or Library.Theme.Default.TextColor,
            BorderSizePixel = 0,
            PlaceholderText = Options.Name,
            ClearTextOnFocus = false,
            TextSize = Library.UI.FontSize,
            BackgroundColor3 = Color3.fromRGB(255, 255, 255),
            Parent = TextBoxMain
        })
        --
        Library:AddTheme(TextBoxObject, {
            TextColor3 = "TextColor",
            PlaceholderColor3 = Options.Risky and "Risky" or "TextColor",
        })
        --
        local UIGradient_6 = Library:CreateObject("UIGradient", {
            Rotation = 90,
            Color = ColorSequence.new{
                ColorSequenceKeypoint.new(0, Library.Theme.Default.LightContrast),
                ColorSequenceKeypoint.new(1, Library.Theme.Default.DarkContrast)
            },
            Parent = TextBoxMain
        })
        --
        Library:AddTheme(UIGradient_6, {
            Color = {"LightContrast", "DarkContrast"},
        })
        --
        local UIPadding_10 = Library:CreateObject("UIPadding", {
            Parent = PreviewTextBox
        })
        --
        function TextBox:SetVisible(Bool)
            PreviewTextBox.Visible = Bool
        end
        --
        function TextBox:Get()
            return TextBoxObject.Text
        end
        --
        function TextBox:Set(Value)
            TextBoxObject.Text = tostring(Value)
        end
        --
        do -- Connections
            Library:Connection(TextBoxObject:GetPropertyChangedSignal("Text"), function()
                TextBoxObject.Text = TextBoxObject.Text:sub(1, Options.Max)
                --
                if Options.NumbersOnly then
                    TextBoxObject.Text = TextBoxObject.Text:gsub('[^%d%.%-]+', '')
                end
            end)
            --
            Library:Connection(TextBoxObject.Focused, function()
                if not Library.UI.HoverHighlight then return end
                --
                TextBox.Focused = true
                --
                Library:TweenObject(TextBoxOutline, TweenInfo.new(Library.UI.TweenSpeed, Library.UI.TweenEasingStyle, Enum.EasingDirection.InOut), {BackgroundColor3 = Library.Theme.Default.Accent})
                --
                Library:AddTheme(TextBoxOutline, {
                    BackgroundColor3 = "Accent",
                })
            end)
            --
            Library:Connection(TextBoxObject.FocusLost, function(EnterPressed)
                if Options.CheckIfPressedEnter and not EnterPressed then return end
                --
                TextBox.Focused = false
                --
                Library:TweenObject(TextBoxOutline, TweenInfo.new(Library.UI.TweenSpeed, Library.UI.TweenEasingStyle, Enum.EasingDirection.InOut), {BackgroundColor3 = Library.Theme.Default.Outline})
                --
                Library:AddTheme(TextBoxOutline, {
                    BackgroundColor3 = "Outline",
                })
                --
                Library.Flags[Options.Flag] = TextBox
                Options.Callback(TextBoxObject.Text)
            end)
            --
            Library:Connection(TextBoxOutline.MouseEnter, function()
                if not Library.UI.HoverHighlight then return end
                --
                TextBox.Hovering = true
                --
                Library:TweenObject(TextBoxOutline, TweenInfo.new(Library.UI.TweenSpeed, Library.UI.TweenEasingStyle, Enum.EasingDirection.InOut), {BackgroundColor3 = Library.Theme.Default.Accent})
                --
                Library:AddTheme(TextBoxOutline, {
                    BackgroundColor3 = "Accent",
                })
            end)
            --
            Library:Connection(TextBoxOutline.MouseLeave, function()
                if TextBox.Focused then return end
                --
                TextBox.Hovering = false
                --
                Library:TweenObject(TextBoxOutline, TweenInfo.new(Library.UI.TweenSpeed, Library.UI.TweenEasingStyle, Enum.EasingDirection.InOut), {BackgroundColor3 = Library.Theme.Default.Outline})
                --
                Library:AddTheme(TextBoxOutline, {
                    BackgroundColor3 = "Outline",
                })
            end)
        end
        --
        return TextBox
    end
    --
    function Library:Slider(Options)
        Options = Library:Validate({
            Name = "Preview Slider",
            Min = 0,
            Max = 100,
            Default = 1,
            Decimal = 1,
            Ending = "",
            Risky = false,
            Parent = nil,
            Flag = Library.NewFlag(),
            Callback = function() end
        }, Options or {})
        --
        local Slider = {
            MouseDown = false,
            Hovering = false,
            Connection = nil,
            CurrentValue = -9999,
            LeftControlDown = false,
            Section = self,
        }
        --
        Library.Flags[Options.Flag] = Slider
        --
        local PreviewSlider = Library:CreateObject("Frame", {
            BackgroundTransparency = 1,
            Name = "PreviewSlider",
            BorderColor3 = Color3.fromRGB(0, 0, 0),
            Size = Options.Name == "" and UDim2.new(1, 0, 0, 14) or UDim2.new(1, 0, 0, 28),
            BorderSizePixel = 0,
            BackgroundColor3 = Color3.fromRGB(255, 255, 255),
            Parent = Options.Parent
        })
        --
        local SliderOutline = Library:CreateObject("Frame", {
            Name = "SliderOutline",
            Position = UDim2.new(0, 0, 1, -12),
            BorderColor3 = Color3.fromRGB(0, 0, 0),
            Size = UDim2.new(1, 0, 0, 12),
            BorderSizePixel = 0,
            BackgroundColor3 = Library.Theme.Default.Outline,
            Parent = PreviewSlider
        })
        --
        Library:AddTheme(SliderOutline, {
            BackgroundColor3 = "Outline",
        })
        --
        local SliderInline = Library:CreateObject("Frame", {
            Name = "SliderInline",
            Position = UDim2.new(0, 1, 0, 1),
            BorderColor3 = Color3.fromRGB(0, 0, 0),
            Size = UDim2.new(1, -2, 1, -2),
            BorderSizePixel = 0,
            BackgroundColor3 = Library.Theme.Default.Inline,
            Parent = SliderOutline
        })
        --
        Library:AddTheme(SliderInline, {
            BackgroundColor3 = "Inline",
        })
        --
        local SliderBack = Library:CreateObject("Frame", {
            Name = "SliderBack",
            Position = UDim2.new(0, 1, 0, 1),
            BorderColor3 = Color3.fromRGB(0, 0, 0),
            Size = UDim2.new(1, -2, 1, -2),
            BorderSizePixel = 0,
            BackgroundColor3 = Color3.fromRGB(255, 255, 255),
            Parent = SliderInline
        })
        --
        local SliderValue = Library:CreateObject("TextLabel", {
            FontFace = Library.UI.Font,
            TextColor3 = Library.Theme.Default.TextColor,
            BorderColor3 = Color3.fromRGB(0, 0, 0),
            Text = "50/100",
            TextStrokeTransparency = 0,
            Name = "SliderValue",
            BackgroundTransparency = 1,
            BorderSizePixel = 0,
            Size = UDim2.new(1, 0, 1, 0),
            ZIndex = 2,
            TextSize = Library.UI.FontSize,
            BackgroundColor3 = Color3.fromRGB(255, 255, 255),
            Parent = SliderBack
        })
        --
        Library:AddTheme(SliderValue, {
            TextColor3 = "TextColor",
        })
        --
        local UIPadding_74141241 = Library:CreateObject("UIPadding", {
            PaddingBottom = UDim.new(0, 1),
            Parent = SliderValue
        })
        --
        local UIGradient_3 = Library:CreateObject("UIGradient", {
            Rotation = 90,
            Color = ColorSequence.new{
                ColorSequenceKeypoint.new(0, Library.Theme.Default.LightContrast),
                ColorSequenceKeypoint.new(1, Library.Theme.Default.DarkContrast)
            },
            Parent = SliderBack
        })
        --
        Library:AddTheme(UIGradient_3, {
            Color = {"LightContrast", "DarkContrast"},
        })
        --
        local SliderDraggable = Library:CreateObject("Frame", {
            Name = "SliderDraggable",
            BorderColor3 = Color3.fromRGB(0, 0, 0),
            Size = UDim2.new(0.5, 0, 1, 0),
            BorderSizePixel = 0,
            BackgroundColor3 = Color3.fromRGB(255, 255, 255),
            Parent = SliderBack
        })
        --
        local UIGradient_3323 = Library:CreateObject("UIGradient", {
            Rotation = 90,
            Color = ColorSequence.new{
                ColorSequenceKeypoint.new(0, Library.Theme.Default.Accent),
                ColorSequenceKeypoint.new(1, Library.Theme.Default.SecondAccent)
            },
            Parent = SliderDraggable
        })
        --
        Library:AddTheme(UIGradient_3323, {
            Color = {"Accent", "SecondAccent"}
        })
        --
        local ClickDetection_1 = Library:CreateObject("TextButton", {
            FontFace = Library.UI.Font,
            TextColor3 = Color3.fromRGB(0, 0, 0),
            BorderColor3 = Color3.fromRGB(0, 0, 0),
            Name = "ClickDetection_1",
            BackgroundTransparency = 1,
            Size = UDim2.new(1, 0, 1, 0),
            BorderSizePixel = 0,
            TextTransparency = 1,
            TextSize = Library.UI.FontSize,
            BackgroundColor3 = Color3.fromRGB(255, 255, 255),
            Parent = SliderOutline
        })
        --
        local SliderName = Library:CreateObject("TextLabel", {
            FontFace = Library.UI.Font,
            TextColor3 = Options.Risky and Library.Theme.Default.Risky or Library.Theme.Default.TextColor,
            BorderColor3 = Color3.fromRGB(0, 0, 0),
            Text = Options.Name,
            TextStrokeTransparency = 0,
            Name = "SliderName",
            Size = UDim2.new(1, 0, 1, 0),
            BackgroundTransparency = 1,
            TextXAlignment = Enum.TextXAlignment.Left,
            BorderSizePixel = 0,
            TextYAlignment = Enum.TextYAlignment.Top,
            TextSize = Library.UI.FontSize,
            BackgroundColor3 = Color3.fromRGB(255, 255, 255),
            Parent = PreviewSlider
        })
        --
        Library:AddTheme(SliderName, {
            TextColor3 = Options.Risky and "Risky" or "TextColor",
        })
        --
        local UIPadding_7 = Library:CreateObject("UIPadding", {
            PaddingLeft = UDim.new(0, 2),
            Parent = SliderName
        })
        --
        local function GetValue(Value)
            return ("%.14g"):format(Value)
        end
        --
        local function SetValue(Value)
            if not Value then return end
            --
            local Value = Value and math.clamp(Options.Decimal * math.round(tonumber(Value) / Options.Decimal), Options.Min, Options.Max) or 0
            --
            SliderValue.Text = tostring(GetValue(Value)) .. Options.Ending .. "/" .. tostring(GetValue(Options.Max)) .. Options.Ending
            --
            if Value ~= Slider.CurrentValue then
                Slider.CurrentValue = Value
                --
                Library:TweenObject(SliderDraggable, TweenInfo.new(Library.UI.TweenSpeed, Library.UI.TweenEasingStyle, Enum.EasingDirection.Out), {Size = UDim2.new((Value - Options.Min) / (Options.Max - Options.Min), 0, 1, 0)})
            end
            --
            Library.Flags[Options.Flag] = Slider
            Options.Callback(tonumber(GetValue(Value)))
        end
        --
        SetValue(Options.Default)
        --
        function Slider:Get()
            return tonumber(GetValue(Slider.CurrentValue))
        end
        --
        function Slider:Max()
            return Options.Max
        end
        --
        function Slider:Min()
            return Options.Min
        end
        --
        function Slider:Set(Value)
            if not Value then return end
            --
            SetValue(Value)
        end
        --
        function Slider:GetName()
            return Options.Name
        end
        --
        function Slider:SetVisible(Bool)
            PreviewSlider.Visible = Bool
        end
        --
        local function SlideBar(input)
            local SizeX = (input.Position.X - SliderBack.AbsolutePosition.X) / SliderBack.AbsoluteSize.X
            local Value = math.clamp((Options.Max - Options.Min) * SizeX + Options.Min, Options.Min, Options.Max)
            --
            SetValue(Value)
        end
        --
        do -- Connections
            Library:Connection(ClickDetection_1.MouseButton1Down, function()
                Library:TweenObject(SliderOutline, TweenInfo.new(Library.UI.TweenSpeed, Library.UI.TweenEasingStyle, Enum.EasingDirection.InOut), {BackgroundColor3 = Library.Theme.Default.Accent})
                --
                Library:AddTheme(SliderOutline, {
                    BackgroundColor3 = "Accent",
                })
                --
                Library.UI.DraggingGui = SliderDraggable
                Slider.MouseDown = true
                SlideBar({Position = UserInputService:GetMouseLocation()})
            end)
            --
            Library:Connection(UserInputService.InputChanged, function(input)
                if Library.UI.DraggingGui ~= SliderDraggable and not (UserInputService:IsMouseButtonPressed(Enum.UserInputType.MouseButton1)) then
                    return
                end
                --
                if Slider.MouseDown and input.UserInputType == Enum.UserInputType.MouseMovement then
                    SlideBar(input)
                end
            end)
            --
            Library:Connection(UserInputService.InputEnded, function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    Slider.MouseDown = false
                    --
                    Library:TweenObject(SliderOutline, TweenInfo.new(Library.UI.TweenSpeed, Library.UI.TweenEasingStyle, Enum.EasingDirection.InOut), {BackgroundColor3 = Library.Theme.Default.Outline})
                    --
                    Library:AddTheme(SliderOutline, {
                        BackgroundColor3 = "Outline",
                    })
                end
            end)
            --
            Library:Connection(SliderOutline.MouseEnter, function()
                if not Library.UI.HoverHighlight then return end
                --
                Slider.Hovering = true
                --
                Library:TweenObject(SliderOutline, TweenInfo.new(Library.UI.TweenSpeed, Library.UI.TweenEasingStyle, Enum.EasingDirection.InOut), {BackgroundColor3 = Library.Theme.Default.Accent})
                --
                Library:AddTheme(SliderOutline, {
                    BackgroundColor3 = "Accent",
                })
            end)
            --
            Library:Connection(SliderOutline.MouseLeave, function()
                if Slider.MouseDown then return end
                --
                Slider.Hovering = false
                --
                Library:TweenObject(SliderOutline, TweenInfo.new(Library.UI.TweenSpeed, Library.UI.TweenEasingStyle, Enum.EasingDirection.InOut), {BackgroundColor3 = Library.Theme.Default.Outline})
                --
                Library:AddTheme(SliderOutline, {
                    BackgroundColor3 = "Outline",
                })
            end)
        end
        --
        return Slider
    end
    --
    function Library:Button(Options)
        Options = Library:Validate({
            Name = "Preview Button",
            Confirmation = false,
            Parent = nil,
            Size = UDim2.new(1, 0, 0, 17),
            Position = UDim2.new(0, 0, 0, 0),
            Risky = false,
            Callback = function() end
        }, Options or {})
        --
        local Button = {
            MouseDown = false,
            Hovering = false,
            WaitingForConfirm = false,
            ConfirmationTime = 0,
            ConfirmationConnection = nil,
            Section = self,
        }
        --
        local PreviewButton = Library:CreateObject("Frame", {
            BackgroundTransparency = 1,
            Name = "PreviewButton",
            Position = Options.Position,
            BorderColor3 = Color3.fromRGB(0, 0, 0),
            Size = UDim2.new(1, 0, 0, 19),
            BorderSizePixel = 0,
            BackgroundColor3 = Color3.fromRGB(255, 255, 255),
            Parent = Options.Parent
        })
        --
        local ButtonOutline = Library:CreateObject("Frame", {
            Name = "ButtonOutline",
            Position = UDim2.new(0, 0, 0, 2),
            BorderColor3 = Color3.fromRGB(0, 0, 0),
            Size = Options.Size,
            BorderSizePixel = 0,
            BackgroundColor3 = Library.Theme.Default.Outline,
            Parent = PreviewButton
        })
        --
        Library:AddTheme(ButtonOutline, {
            BackgroundColor3 = "Outline",
        })
        --
        local ButtonInline = Library:CreateObject("Frame", {
            Name = "ButtonInline",
            Position = UDim2.new(0, 1, 0, 1),
            BorderColor3 = Color3.fromRGB(0, 0, 0),
            Size = UDim2.new(1, -2, 1, -2),
            BorderSizePixel = 0,
            BackgroundColor3 = Library.Theme.Default.Inline,
            Parent = ButtonOutline
        })
        --
        Library:AddTheme(ButtonInline, {
            BackgroundColor3 = "Inline",
        })
        --
        local ButtonMain = Library:CreateObject("Frame", {
            Name = "ButtonMain",
            Position = UDim2.new(0, 1, 0, 1),
            BorderColor3 = Color3.fromRGB(0, 0, 0),
            Size = UDim2.new(1, -2, 1, -2),
            BorderSizePixel = 0,
            BackgroundColor3 = Color3.fromRGB(255, 255, 255),
            Parent = ButtonInline
        })
        --
        local ButtonText = Library:CreateObject("TextLabel", {
            FontFace = Library.UI.Font,
            TextColor3 = Options.Risky and Library.Theme.Default.Risky or Library.Theme.Default.TextColor,
            BorderColor3 = Color3.fromRGB(0, 0, 0),
            Text = Options.Name,
            TextStrokeTransparency = 0,
            Name = "ButtonText",
            BackgroundTransparency = 1,
            BorderSizePixel = 0,
            Size = UDim2.new(1, 0, 1, 0),
            ZIndex = 2,
            TextSize = Library.UI.FontSize,
            BackgroundColor3 = Color3.fromRGB(255, 255, 255),
            Parent = ButtonMain
        })
        --
        Library:AddTheme(ButtonText, {
            TextColor3 = Options.Risky and "Risky" or "TextColor",
        })
        --
        local UIPadding_2234 = Library:CreateObject("UIPadding", {
            PaddingBottom = UDim.new(0, 1),
            Parent = ButtonText
        })
        --
        local UIGradient_6 = Library:CreateObject("UIGradient", {
            Rotation = 90,
            Color = ColorSequence.new{
                ColorSequenceKeypoint.new(0, Library.Theme.Default.LightContrast),
                ColorSequenceKeypoint.new(1, Library.Theme.Default.DarkContrast)
            },
            Parent = ButtonMain
        })
        --
        Library:AddTheme(UIGradient_6, {
            Color = {"LightContrast", "DarkContrast"},
        })
        --
        local ClickDetection_3 = Library:CreateObject("TextButton", {
            FontFace = Library.UI.Font,
            TextColor3 = Color3.fromRGB(0, 0, 0),
            BorderColor3 = Color3.fromRGB(0, 0, 0),
            Name = "ClickDetection_3",
            BackgroundTransparency = 1,
            Size = UDim2.new(1, 0, 1, 0),
            BorderSizePixel = 0,
            TextTransparency = 1,
            TextSize = Library.UI.FontSize,
            BackgroundColor3 = Color3.fromRGB(255, 255, 255),
            Parent = ButtonOutline
        })
        --
        local UIPadding_10 = Library:CreateObject("UIPadding", {
            Parent = PreviewButton
        })
        --
        function Button:UpdateSize(Size)
            ButtonOutline.Size = Size
        end
        --
        function Button:UpdatePosition(Position)
            PreviewButton.Position = Position
        end
        --
        function Button:ConfirmationStart()
            Button.MouseDown = true
            Button.WaitingForConfirm = true
            Button.ConfirmationTime = 5
            ButtonText.Text = "Confirm? (" .. Button.ConfirmationTime .. "s)"
            --
            if Button.ConfirmationConnection then
                coroutine.close(Button.ConfirmationConnection)
                Button.ConfirmationConnection = nil
            end
            --
            Button.ConfirmationConnection = coroutine.create(function()
                for i = 1, 5 do 
                    task.wait(1)
                    --
                    Button.ConfirmationTime = Button.ConfirmationTime - 1
                    --
                    if Button.ConfirmationTime > 0 then
                        ButtonText.Text = "Confirm? (" .. Button.ConfirmationTime .. "s)"
                    else
                        ButtonText.Text = Options.Name
                        --
                        if Button.MouseDown then
                            Library:TweenObject(ButtonText, TweenInfo.new(Library.UI.TweenSpeed, Library.UI.TweenEasingStyle, Enum.EasingDirection.InOut), {TextColor3 = Library.Theme.Default.TextColor})
                            --
                            Library:AddTheme(ButtonText, {
                                TextColor3 = "TextColor",
                            })
                            --
                            Button.MouseDown = false
                            Button.WaitingForConfirm = false
                        end
                        --
                        break
                    end
                end
            end)
            --
            coroutine.resume(Button.ConfirmationConnection)
        end
        --
        function Button:SetVisible(Bool)
            PreviewButton.Visible = Bool
        end
        --
        do -- Connections
            Library:Connection(ClickDetection_3.MouseButton1Down, function()
                Library:TweenObject(ButtonText, TweenInfo.new(Library.UI.TweenSpeed, Library.UI.TweenEasingStyle, Enum.EasingDirection.InOut), {TextColor3 = Library.Theme.Default.Accent})
                --
                Library:AddTheme(ButtonText, {
                    TextColor3 = "Accent",
                })
                --
                if Options.Confirmation then
                    if not Button.WaitingForConfirm then
                        Button:ConfirmationStart()
                    else
                        if Button.ConfirmationConnection then
                            coroutine.close(Button.ConfirmationConnection)
                            Button.ConfirmationConnection = nil
                        end
                        --
                        Options.Callback()
                        Button.MouseDown = true
                        Button.Hovering = false
                        Button.WaitingForConfirm = false
                        --
                        Library:TweenObject(ButtonText, TweenInfo.new(Library.UI.TweenSpeed, Library.UI.TweenEasingStyle, Enum.EasingDirection.InOut), {TextColor3 = Library.Theme.Default.TextColor})
                        --
                        Library:AddTheme(ButtonText, {
                            TextColor3 = "TextColor",
                        })
                        --
                        ButtonText.Text = Options.Name
                    end
                else
                    Options.Callback()
                    Button.MouseDown = true
                end
            end)
            --
            Library:Connection(UserInputService.InputEnded, function(Input)
                if Input.UserInputType == Enum.UserInputType.MouseButton1 and Button.MouseDown and not Button.WaitingForConfirm then
                    Button.Hovering = false
                    Button.MouseDown = false
                    Library:TweenObject(ButtonText, TweenInfo.new(Library.UI.TweenSpeed, Library.UI.TweenEasingStyle, Enum.EasingDirection.InOut), {TextColor3 = Library.Theme.Default.TextColor})
                    --
                    Library:AddTheme(ButtonText, {
                        TextColor3 = "TextColor",
                    })
                end
            end)
            --
            Library:Connection(ButtonOutline.MouseEnter, function()
                if not Library.UI.HoverHighlight then return end
                --
                Button.Hovering = true
                --
                Library:TweenObject(ButtonOutline, TweenInfo.new(Library.UI.TweenSpeed, Library.UI.TweenEasingStyle, Enum.EasingDirection.InOut), {BackgroundColor3 = Library.Theme.Default.Accent})
                --
                Library:AddTheme(ButtonOutline, {
                    BackgroundColor3 = "Accent",
                })
            end)
            --
            Library:Connection(ButtonOutline.MouseLeave, function()
                Button.Hovering = false
                --
                Library:TweenObject(ButtonOutline, TweenInfo.new(Library.UI.TweenSpeed, Library.UI.TweenEasingStyle, Enum.EasingDirection.InOut), {BackgroundColor3 = Library.Theme.Default.Outline})
                --
                Library:AddTheme(ButtonOutline, {
                    BackgroundColor3 = "Outline",
                })
            end)
        end
        --
        return Button
    end
    --
    function Library:Navigation(Options)
        Options = Library:Validate({
            Size = UDim2.new(0, 182, 0, 39),
        }, Options or {})
        --
        local Navigation = {}
        --
        local Blur = Library:CreateObject("BlurEffect", {
            Enabled = Library.UI.UseBlur,
            Size = Library.UI.BlurSize,
            Parent = Lighting
        })
        --
        Library.UI.BlurObject = Blur
        --
        local ScreenGui = Library:CreateObject("ScreenGui", {
            Enabled = true,
            ScreenInsets = Enum.ScreenInsets.DeviceSafeInsets,
            ZIndexBehavior = Enum.ZIndexBehavior.Sibling,
            ResetOnSpawn = false,
            DisplayOrder = 1000,
            IgnoreGuiInset = true,
            Parent = CoreGui
        })
        --
        Library.UI.ScreenGUI = ScreenGui
        --
        local ScreenGuiNotifications = Library:CreateObject("ScreenGui", {
            Enabled = true,
            ScreenInsets = Enum.ScreenInsets.DeviceSafeInsets,
            ZIndexBehavior = Enum.ZIndexBehavior.Sibling,
            ResetOnSpawn = false,
            DisplayOrder = 1001,
            IgnoreGuiInset = true,
            Parent = CoreGui
        })
        --
        local ScreenGuiExtra = Library:CreateObject("ScreenGui", {
            Enabled = true,
            ScreenInsets = Enum.ScreenInsets.DeviceSafeInsets,
            ZIndexBehavior = Enum.ZIndexBehavior.Sibling,
            ResetOnSpawn = false,
            DisplayOrder = 500,
            IgnoreGuiInset = true,
            Parent = CoreGui
        })
        --
        local MainNavigationOutline = Library:CreateObject("Frame", {
            Name = "MainNavigationOutline",
            Position = UDim2.new(0, 0, 0, 0),
            BorderColor3 = Color3.fromRGB(0, 0, 0),
            Size = Options.Size,
            BorderSizePixel = 0,
            ZIndex = 5,
            BackgroundColor3 = Library.Theme.Default.Outline,
            Parent = ScreenGui
        })
        --
        MainNavigationOutline.Position = UDim2.fromOffset((Viewport.X / 2) - (MainNavigationOutline.Size.X.Offset / 2), 5)
        --
        Library:AddTheme(MainNavigationOutline, {
            BackgroundColor3 = "Outline",
        })
        --
        local NavigationInline = Library:CreateObject("Frame", {
            Name = "NavigationInline",
            Position = UDim2.new(0, 1, 0, 1),
            BorderColor3 = Color3.fromRGB(0, 0, 0),
            Size = UDim2.new(1, -2, 1, -2),
            BorderSizePixel = 0,
            BackgroundColor3 = Library.Theme.Default.Inline,
            Parent = MainNavigationOutline
        })
        --
        Library:AddTheme(NavigationInline, {
            BackgroundColor3 = "Inline",
        })
        --
        local NavigationDarkContrast = Library:CreateObject("Frame", {
            Name = "NavigationDarkContrast",
            Position = UDim2.new(0, 1, 0, 1),
            BorderColor3 = Color3.fromRGB(0, 0, 0),
            Size = UDim2.new(1, -2, 1, -2),
            BorderSizePixel = 0,
            BackgroundColor3 = Color3.fromRGB(255, 255, 255),
            Parent = NavigationInline
        })
        --
        local UIGradient_174 = Library:CreateObject("UIGradient", {
            Rotation = 90,
            Color = ColorSequence.new{
                ColorSequenceKeypoint.new(0, Library.Theme.Default.LightContrast),
                ColorSequenceKeypoint.new(1, Library.Theme.Default.DarkContrast)
            },
            Parent = NavigationDarkContrast
        })
        --
        Library:AddTheme(UIGradient_174, {
            Color = {"LightContrast", "DarkContrast"},
        })
        --
        local TopBar = Library:CreateObject("Frame", {
            Name = "TopBar",
            BorderColor3 = Color3.fromRGB(0, 0, 0),
            Size = UDim2.new(1, 0, 0, 2),
            BorderSizePixel = 0,
            BackgroundColor3 = Color3.fromRGB(255, 255, 255),
            Parent = NavigationDarkContrast
        })
        --
        local UIGradient_3312 = Library:CreateObject("UIGradient", {
            Rotation = 90,
            Color = ColorSequence.new{
                ColorSequenceKeypoint.new(0, Library.Theme.Default.Accent),
                ColorSequenceKeypoint.new(1, Library.Theme.Default.SecondAccent)
            },
            Parent = TopBar
        })
        --
        Library:AddTheme(UIGradient_3312, {
            Color = {"Accent", "SecondAccent"}
        })
        --
        local NavigationIconHolder = Library:CreateObject("Frame", {
            Name = "NavigationIconHolder",
            BackgroundTransparency = 1,
            Position = UDim2.new(0, 1, 0, 2),
            BorderColor3 = Color3.fromRGB(0, 0, 0),
            Size = UDim2.new(1, -2, 1, -4),
            BorderSizePixel = 0,
            BackgroundColor3 = Color3.fromRGB(255, 255, 255),
            Parent = NavigationDarkContrast
        })
        --
        function Navigation:CreateTab(Options)
            Options = Library:Validate({
                Icon = "rbxassetid://18468372588",
                MainWindow = false,
                PlayerList = false,
                Configs = false,
                Settings = false,
            }, Options or {})
            --
            local NavigationIcon = {
                Active = false,
                Hovering = false,
                GUI = {
                    TopBar = nil,
                    Tabs = {},
                    CurrentTab = nil,
                },
            }
            --
            local IconTemplateActive = Library:CreateObject("Frame", {
                AnchorPoint = Vector2.new(0, 0.5),
                Name = "IconTemplateActive",
                Position = UDim2.new(0, 4, 0.5, 1),
                BorderColor3 = Color3.fromRGB(0, 0, 0),
                Size = UDim2.new(0, 25, 0, 25),
                BorderSizePixel = 0,
                BackgroundColor3 = Library.Theme.Default.Inline,
                Parent = NavigationIconHolder
            })
            --
            Library:AddTheme(IconTemplateActive, {
                BackgroundColor3 = "Inline",
            })
            --
            local IconButton = Library:CreateObject("TextButton", {
                FontFace = Library.UI.Font,
                TextColor3 = Color3.fromRGB(0, 0, 0),
                BorderColor3 = Color3.fromRGB(0, 0, 0),
                Name = "IconButton",
                BackgroundTransparency = 1,
                Size = UDim2.new(1, 0, 1, 0),
                BorderSizePixel = 0,
                TextTransparency = 1,
                TextSize = Library.UI.FontSize,
                BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                Parent = IconTemplateActive
            })
            --
            local IconInline = Library:CreateObject("Frame", {
                Name = "IconInline",
                Position = UDim2.new(0, 1, 0, 1),
                BorderColor3 = Color3.fromRGB(0, 0, 0),
                Size = UDim2.new(1, -2, 1, -2),
                BorderSizePixel = 0,
                BackgroundColor3 = Library.Theme.Default.Outline,
                Parent = IconTemplateActive
            })
            --
            Library:AddTheme(IconInline, {
                BackgroundColor3 = "Outline",
            })
            --
            local IconHolder = Library:CreateObject("Frame", {
                Name = "IconHolder",
                Position = UDim2.new(0, 1, 0, 1),
                BorderColor3 = Color3.fromRGB(0, 0, 0),
                Size = UDim2.new(1, -2, 1, -2),
                BorderSizePixel = 0,
                BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                Parent = IconInline
            })
            --
            local UIGradient_1774 = Library:CreateObject("UIGradient", {
                Rotation = -90,
                Color = ColorSequence.new{
                    ColorSequenceKeypoint.new(0, Library.Theme.Default.LightContrast),
                    ColorSequenceKeypoint.new(1, Library.Theme.Default.DarkContrast)
                },
                Parent = IconHolder
            })
            --
            Library:AddTheme(UIGradient_1774, {
                Color = {"LightContrast", "DarkContrast"},
            })
            --
            local Icon = Library:CreateObject("ImageLabel", {
                ImageColor3 = Library.Theme.Default.ImageDark,
                BorderColor3 = Color3.fromRGB(0, 0, 0),
                AnchorPoint = Vector2.new(0.5, 0.5),
                Image = Options.Icon,
                BackgroundTransparency = 1,
                Position = UDim2.new(0.5, 0, 0.5, 0),
                Name = "Icon",
                Size = UDim2.new(1, -4, 1, -4),
                BorderSizePixel = 0,
                BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                Parent = IconHolder
            })
            --
            Library:AddTheme(Icon, {
                ImageColor3 = "ImageDark",
            })
            --
            local UIListLayout = Library:CreateObject("UIListLayout", {
                VerticalAlignment = Enum.VerticalAlignment.Center,
                FillDirection = Enum.FillDirection.Horizontal,
                Padding = UDim.new(0, 4),
                SortOrder = Enum.SortOrder.LayoutOrder,
                Parent = NavigationIconHolder
            })
            --
            local UIPadding = Library:CreateObject("UIPadding", {
                PaddingBottom = UDim.new(0, -1),
                PaddingTop = UDim.new(0, 1),
                PaddingLeft = UDim.new(0, 3),
                Parent = NavigationIconHolder
            })
            --
            do -- Functions
                function NavigationIcon:Toggle()
                    if not NavigationIcon.Active then
                        NavigationIcon.Active = true
                        --
                        Library:TweenObject(Icon, TweenInfo.new(Library.UI.TweenSpeed, Library.UI.TweenEasingStyle, Enum.EasingDirection.InOut), {ImageColor3 = Library.Theme.Default.Accent})
                        --
                        Library:AddTheme(Icon, {
                            ImageColor3 = "Accent",
                        })
                    else
                        NavigationIcon.Active = false
                        NavigationIcon.Hovering = false
                        --
                        Library:TweenObject(Icon, TweenInfo.new(Library.UI.TweenSpeed, Library.UI.TweenEasingStyle, Enum.EasingDirection.InOut), {ImageColor3 = Library.Theme.Default.ImageDark})
                        --
                        Library:AddTheme(Icon, {
                            ImageColor3 = "ImageDark",
                        })
                    end
                    --
                    Library.UI.LastZIndex += 2
                    --
                    if NavigationIcon.GUI[1] then
                        NavigationIcon.GUI[1].ZIndex = Library.UI.LastZIndex + Library.UI.DropdownZIndex
                        NavigationIcon.GUI[1].Visible = NavigationIcon.Active
                        --
                        if Library.UI.WindowGlow then
                            NavigationIcon.GUI[2].ZIndex = Library.UI.LastZIndex + Library.UI.DropdownZIndex - 1
                            NavigationIcon.GUI[2].Visible = NavigationIcon.Active
                        end
                    end
                end
                --
                function NavigationIcon:UpdateSizes()
                    local Count = #NavigationIcon.GUI.Tabs
                    local PaddingAmount = (Count - 1) * 2
                    local TabWidth = (1 - PaddingAmount / NavigationIcon.TopBar.AbsoluteSize.X) / Count
                    --
                    for Index, Value in NavigationIcon.GUI.Tabs do
                        Value.Size = UDim2.new(TabWidth, 0, 1, 0)
                        Value.Position = UDim2.new((TabWidth + 2 / NavigationIcon.TopBar.AbsoluteSize.X) * (Index - 1), 0, 0, 0)
                    end
                end
            end
            --
            do -- Connections
                Library:Connection(IconButton.MouseButton1Click, function()
                    NavigationIcon:Toggle()
                end)
                --
                Library:Connection(IconTemplateActive.MouseEnter, function()
                    if not Library.UI.HoverHighlight then return end
                    --
                    NavigationIcon.Hovering = true
                    --
                    Library:TweenObject(IconTemplateActive, TweenInfo.new(Library.UI.TweenSpeed, Library.UI.TweenEasingStyle, Enum.EasingDirection.InOut), {BackgroundColor3 = Library.Theme.Default.Accent})
                    --
                    Library:AddTheme(IconTemplateActive, {
                        BackgroundColor3 = "Accent",
                    })
                end)
                --
                Library:Connection(IconTemplateActive.MouseLeave, function()
                    NavigationIcon.Hovering = false
                    --
                    Library:TweenObject(IconTemplateActive, TweenInfo.new(Library.UI.TweenSpeed, Library.UI.TweenEasingStyle, Enum.EasingDirection.InOut), {BackgroundColor3 = Library.Theme.Default.Inline})
                    --
                    Library:AddTheme(IconTemplateActive, {
                        BackgroundColor3 = "Inline",
                    })
                end)
            end
            --
            if Options.MainWindow then
                function NavigationIcon:Window(Options)
                    Options = Library:Validate({
                        Name = "LuckyHub",
                        Size = UDim2.new(0, 615, 0, 639),
                        MinResize = UDim2.new(0, 450, 0, 500),
                        MaxResize = UDim2.new(0, 655, 0, 689),
                        CloseBind = Enum.KeyCode.LeftControl,
                    }, Options or {})
                    --
                    local Window = NavigationIcon.GUI
                    --
                    Library.UI.CloseBind = Options.CloseBind
                    Library.UI.Name = Options.Name
                    --
                    local MainWindowOutline = Library:CreateObject("Frame", {
                        Name = "MainWindowOutline",
                        Position = UDim2.new(0.5, 0, 0.5, 0),
                        BorderColor3 = Color3.fromRGB(0, 0, 0),
                        Size = Options.Size,
                        BorderSizePixel = 0,
                        BackgroundColor3 = Library.Theme.Default.Outline,
                        ZIndex = 6,
                        Parent = ScreenGui,
                        Visible = false,
                    })
                    --
                    Library:AddTheme(MainWindowOutline, {
                        BackgroundColor3 = "Outline",
                    })
                    --
                    local DropShadowHolder = Library:CreateObject("Frame", {
                        BackgroundTransparency = 1,
                        Name = "DropShadowHolder",
                        BorderSizePixel = 0,
                        Position = MainWindowOutline.Position, 
                        Size = Options.Size,
                        ZIndex = 5,
                        Parent = ScreenGui,
                        Visible = false
                    })
                    --
                    local DropShadow = Library:CreateObject("ImageLabel", {
                        ImageColor3 = Library.Theme.Default.Glow,
                        ScaleType = Enum.ScaleType.Slice,
                        ImageTransparency = 0.5,
                        Name = "DropShadow",
                        AnchorPoint = Vector2.new(0.5, 0.5),
                        Image = "rbxassetid://6015897843",
                        BackgroundTransparency = 1,
                        Position = UDim2.new(0.5, 0, 0.5, 0),
                        Size = UDim2.new(1, 30 + (Library.UI.WindowGlowThickness - 1) * (70 - 40) / (100 - 1), 1, 30 + (Library.UI.WindowGlowThickness - 1) * (70 - 40) / (100 - 1)),
                        ZIndex = 0,
                        BorderSizePixel = 0,
                        SliceCenter = Rect.new(Vector2.new(49, 49), Vector2.new(450, 450)),
                        Parent = DropShadowHolder
                    })
                    --
                    Library:AddTheme(DropShadow, {
                        ImageColor3 = "Glow",
                    })
                    --
                    MainWindowOutline.Position = UDim2.fromOffset((Viewport.X / 2) - (MainWindowOutline.Size.X.Offset / 2), (Viewport.Y / 2) - (MainWindowOutline.Size.Y.Offset / 2))
                    DropShadowHolder.Position = MainWindowOutline.Position
                    --
                    table.insert(Window, MainWindowOutline)
                    table.insert(Window, DropShadowHolder)
                    --
                    local MainWindowInline = Library:CreateObject("Frame", {
                        Name = "MainWindowInline",
                        Position = UDim2.new(0, 1, 0, 1),
                        BorderColor3 = Color3.fromRGB(0, 0, 0),
                        Size = UDim2.new(1, -2, 1, -2),
                        BorderSizePixel = 0,
                        BackgroundColor3 = Library.Theme.Default.Accent,
                        Parent = MainWindowOutline
                    })
                    --
                    Library:AddTheme(MainWindowInline, {
                        BackgroundColor3 = "Accent",
                    })
                    --
                    local MainWindowDarkContrast = Library:CreateObject("Frame", {
                        Name = "MainWindowDarkContrast",
                        Position = UDim2.new(0, 1, 0, 1),
                        BorderColor3 = Color3.fromRGB(0, 0, 0),
                        Size = UDim2.new(1, -2, 1, -2),
                        BorderSizePixel = 0,
                        BackgroundColor3 = Library.Theme.Default.LightContrast,
                        Parent = MainWindowInline
                    })
                    --
                    Library:AddTheme(MainWindowDarkContrast, {
                        BackgroundColor3 = "LightContrast",
                    })
                    --
                    local MainWindowHolder = Library:CreateObject("Frame", {
                        Name = "MainWindowHolder",
                        BackgroundTransparency = 1,
                        Position = UDim2.new(0, 1, 0, 2),
                        BorderColor3 = Color3.fromRGB(0, 0, 0),
                        Size = UDim2.new(1, -2, 1, -5),
                        BorderSizePixel = 0,
                        BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                        Parent = MainWindowDarkContrast
                    })
                    --
                    local UIPadding_2 = Library:CreateObject("UIPadding", {
                        PaddingLeft = UDim.new(0, 3),
                        Parent = MainWindowHolder
                    })
                    --
                    local HolderOutline = Library:CreateObject("Frame", {
                        Name = "HolderOutline",
                        Position = UDim2.new(0, 0, 0, 16),
                        BorderColor3 = Color3.fromRGB(0, 0, 0),
                        Size = UDim2.new(1, -3, 1, -17),
                        BorderSizePixel = 0,
                        BackgroundColor3 = Library.Theme.Default.Inline,
                        Parent = MainWindowHolder
                    })
                    --
                    Library:AddTheme(HolderOutline, {
                        BackgroundColor3 = "Inline",
                    })
                    --
                    local HolderInline = Library:CreateObject("Frame", {
                        Name = "HolderInline",
                        Position = UDim2.new(0, 1, 0, 1),
                        BorderColor3 = Color3.fromRGB(0, 0, 0),
                        Size = UDim2.new(1, -2, 1, -2),
                        BorderSizePixel = 0,
                        BackgroundColor3 = Library.Theme.Default.Outline,
                        Parent = HolderOutline
                    })
                    --
                    Library:AddTheme(HolderInline, {
                        BackgroundColor3 = "Outline",
                    })
                    --
                    local HolderDarkContrast = Library:CreateObject("Frame", {
                        Name = "HolderDarkContrast",
                        Position = UDim2.new(0, 1, 0, 1),
                        BorderColor3 = Color3.fromRGB(0, 0, 0),
                        Size = UDim2.new(1, -2, 1, -2),
                        BorderSizePixel = 0,
                        BackgroundColor3 = Library.Theme.Default.DarkContrast,
                        Parent = HolderInline
                    })
                    --
                    Library:AddTheme(HolderDarkContrast, {
                        BackgroundColor3 = "DarkContrast",
                    })
                    --
                    local NavigationOutline = Library:CreateObject("Frame", {
                        Name = "NavigationOutline",
                        Position = UDim2.new(0, 0, 0, 20),
                        BorderColor3 = Color3.fromRGB(0, 0, 0),
                        Size = UDim2.new(1, -4, 1, -24),
                        BorderSizePixel = 0,
                        BackgroundColor3 = Library.Theme.Default.Outline,
                        Parent = HolderDarkContrast
                    })
                    --
                    Library:AddTheme(NavigationOutline, {
                        BackgroundColor3 = "Outline",
                    })
                    --
                    local NavigationInline_2 = Library:CreateObject("Frame", {
                        Name = "NavigationInline_2",
                        Position = UDim2.new(0, 1, 0, 1),
                        BorderColor3 = Color3.fromRGB(0, 0, 0),
                        Size = UDim2.new(1, -2, 1, -2),
                        BorderSizePixel = 0,
                        BackgroundColor3 = Library.Theme.Default.Inline,
                        Parent = NavigationOutline
                    })
                    --
                    Library:AddTheme(NavigationInline_2, {
                        BackgroundColor3 = "Inline",
                    })
                    --
                    local UIPadding_33 = Library:CreateObject("UIPadding", {
                        PaddingTop = UDim.new(0, 4),
                        PaddingLeft = UDim.new(0, 4),
                        Parent = HolderDarkContrast
                    })
                    --
                    local TopBar_5 = Library:CreateObject("Frame", {
                        BackgroundTransparency = 1,
                        Name = "TopBar_5",
                        BorderColor3 = Color3.fromRGB(0, 0, 0),
                        Size = UDim2.new(1, -4, 0, 21),
                        BorderSizePixel = 0,
                        BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                        Parent = HolderDarkContrast
                    })
                    --
                    NavigationIcon.TopBar = TopBar_5
                    --
                    local TopBar_6 = Library:CreateObject("Frame", {
                        BackgroundTransparency = 1,
                        Name = "TopBar_6",
                        BorderColor3 = Color3.fromRGB(0, 0, 0),
                        Size = UDim2.new(1, -4, 0, 20),
                        BorderSizePixel = 0,
                        BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                        Parent = MainWindowHolder
                    })
                    --
                    local DraggingButton = Library:CreateObject("TextButton", {
                        FontFace = Library.UI.Font,
                        TextColor3 = Color3.fromRGB(0, 0, 0),
                        BorderColor3 = Color3.fromRGB(0, 0, 0),
                        Name = "DraggingButton",
                        Size = UDim2.new(1, 0, 1, 0),
                        BackgroundTransparency = 1,
                        Position = UDim2.new(0, 0, 0, 0),
                        BorderSizePixel = 0,
                        TextTransparency = 1,
                        TextSize = Library.UI.FontSize,
                        BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                        Parent = TopBar_6
                    })
                    --
                    local Title = Library:CreateObject("TextLabel", {
                        FontFace = Library.UI.Font,
                        TextColor3 = Library.Theme.Default.TextColor,
                        BorderColor3 = Color3.fromRGB(0, 0, 0),
                        Text = Options.Name,
                        TextStrokeTransparency = 0,
                        Name = "Title",
                        RichText = true,
                        BackgroundTransparency = 1,
                        TextXAlignment = Enum.TextXAlignment.Left,
                        Size = UDim2.new(0.5, 0, 1, 0),
                        BorderSizePixel = 0,
                        TextSize = Library.UI.FontSize,
                        BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                        Parent = TopBar_6
                    })
                    --
                    Library:AddTheme(Title, {
                        TextColor3 = "TextColor",
                    })
                    --
                    local UIPadding_36 = Library:CreateObject("UIPadding", {
                        PaddingLeft = UDim.new(0, 1),
                        PaddingBottom = UDim.new(0, 4),
                        PaddingTop = UDim.new(0, -4),
                        Parent = Title
                    })
                    --
                    local CloseButton = Library:CreateObject("TextButton", {
                        FontFace = Library.UI.Font,
                        TextColor3 = Library.Theme.Default.TextColor,
                        BorderColor3 = Color3.fromRGB(0, 0, 0),
                        Name = "CloseButton",
                        Size = UDim2.new(0, 10, 0, 10),
                        BackgroundTransparency = 1,
                        TextStrokeTransparency = 0,
                        Position = UDim2.new(1, -6, 0, 2),
                        BorderSizePixel = 0,
                        ZIndex = 5,
                        Text = "x",
                        TextTransparency = 0,
                        TextSize = Library.UI.FontSize,
                        BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                        Parent = TopBar_6
                    })
                    --
                    local UIPadding_3424246 = Library:CreateObject("UIPadding", {
                        PaddingBottom = UDim.new(0, 2),
                        PaddingTop = UDim.new(0, -2),
                        Parent = CloseButton
                    })
                    --
                    Library:AddTheme(CloseButton, {
                        TextColor3 = "TextColor",
                    })
                    --
                    local ResizeButton = Library:CreateObject("TextButton", {
                        FontFace = Library.UI.Font,
                        TextColor3 = Color3.fromRGB(0, 0, 0),
                        BorderColor3 = Color3.fromRGB(0, 0, 0),
                        Name = "ResizeButton",
                        AnchorPoint = Vector2.new(1, 1),
                        Size = UDim2.new(0, 20, 0, 20),
                        BackgroundTransparency = 1,
                        Position = UDim2.new(1, 0, 1, 0),
                        BorderSizePixel = 0,
                        TextTransparency = 1,
                        TextSize = Library.UI.FontSize,
                        BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                        Parent = MainWindowHolder
                    })
                    --
                    do -- Functions
                        function Library:ToggleUI(State)
                            ScreenGui.Enabled = State
                            Blur.Enabled = Library.UI.UseBlur and State or false
                        end
                        --
                        function Library:UpdateTitle(Text, Type, Date, Extra)
                            Type = Type or "Normal"
                            Date = Date or false
                            Extra = Extra and " " .. Extra or ""
                            --
                            Library.UI.Name = Text
                            --
                            Text = Text:gsub(" %- %d+/%d+/%d+$", "")
                            --
                            local DateString = Date and os.date("%m/%d/%Y") or ""
                            --
                            if Type == "Accent" then
                                local R, G, B = Library.Theme.Default.Accent.r * 255, Library.Theme.Default.Accent.g * 255, Library.Theme.Default.Accent.b * 255
                                local RealText = Text:match("^(.-) %- %d+/%d+/%d+$") or Text
                                --
                                Title.Text = ("<font color='rgb(%d, %d, %d)'>%s</font>%s%s"):format(R, G, B, RealText, Extra, DateString ~= "" and (" - " .. DateString) or "")
                            else
                                Title.Text = ("%s%s"):format(Text, Extra)
                            end
                        end
                        --
                        Library:Draggable(MainWindowOutline, DraggingButton, DropShadowHolder)
                        Library:Resizable(MainWindowOutline, ResizeButton, Options.MinResize, Options.MaxResize, DropShadowHolder)
                    end
                    --
                    do -- Connections
                        Library:Connection(CloseButton.MouseButton1Click, NavigationIcon.Toggle)
                    end
                    --
                    function Window:CreateTab(Options)
                        Options = Library:Validate({
                            Name = "Main",
                            Scrolling = false,
                        }, Options or {})
                        --
                        local WindowTab = {
                            Active = false,
                            Hovering = false,
                            Sides = {
                                Left = {
                                    Sizes = -1,
                                },
                                Right = {
                                    Sizes = -1,
                                }
                            }
                        }
                        --
                        function Library:SetTab(Tab)
                            if Window.CurrentTab ~= nil then
                                Window.CurrentTab:Deactivate()
                            end
                            --
                            if Options.Name == Tab then
                                WindowTab:Activate()
                            end
                        end
                        --
                        local FadingMain = Library:CreateObject("Frame", {
                            Name = "FadingMain",
                            Position = UDim2.new(0, 1, 0, 1),
                            BorderColor3 = Color3.fromRGB(0, 0, 0),
                            Size = UDim2.new(1, -2, 1, -2),
                            BorderSizePixel = 0,
                            BackgroundTransparency = 1,
                            BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                            Parent = NavigationInline_2,
                            ZIndex = 2,
                            Visible = false
                        })
                        --
                        local HolderFadingGradient = Library:CreateObject("UIGradient", {
                            Rotation = 90,
                            Name = "HolderFadingGradient",
                            Color = ColorSequence.new{
                                ColorSequenceKeypoint.new(0, Library.Theme.Default.LightContrast),
                                ColorSequenceKeypoint.new(1, Library.Theme.Default.DarkContrast)
                            },
                            Parent = FadingMain
                        })
                        --
                        Library:AddTheme(HolderFadingGradient, {
                            Color = {"LightContrast", "DarkContrast"},
                        })
                        --
                        local NavigationMain = Library:CreateObject("Frame", {
                            Name = "NavigationMain" .. Options.Name,
                            Position = UDim2.new(0, 1, 0, 1),
                            BorderColor3 = Color3.fromRGB(0, 0, 0),
                            Size = UDim2.new(1, -2, 1, -2),
                            BorderSizePixel = 0,
                            BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                            Parent = NavigationInline_2,
                            Visible = false
                        })
                        --
                        local HolderGradient = Library:CreateObject("UIGradient", {
                            Rotation = 90,
                            Name = "HolderGradient",
                            Color = ColorSequence.new{
                                ColorSequenceKeypoint.new(0, Library.Theme.Default.LightContrast),
                                ColorSequenceKeypoint.new(1, Library.Theme.Default.DarkContrast)
                            },
                            Parent = NavigationMain
                        })
                        --
                        Library:AddTheme(HolderGradient, {
                            Color = {"LightContrast", "DarkContrast"},
                        })
                        --
                        local TabInactiveOutline = Library:CreateObject("Frame", {
                            Archivable = false,
                            Name = "TabInactiveOutline",
                            Position = UDim2.new(0.5, -1, 0, 0),
                            BorderColor3 = Color3.fromRGB(0, 0, 0),
                            Size = UDim2.new(0.5, -3, 1, 0),
                            BorderSizePixel = 0,
                            BackgroundColor3 = Library.Theme.Default.Outline,
                            Parent = TopBar_5
                        })
                        --
                        Library:AddTheme(TabInactiveOutline, {
                            BackgroundColor3 = "Outline",
                        })
                        --
                        local TabActiveInline_1 = Library:CreateObject("Frame", {
                            Name = "TabActiveInline_1",
                            Position = UDim2.new(0, 1, 0, 1),
                            BorderColor3 = Color3.fromRGB(0, 0, 0),
                            Size = UDim2.new(1, -2, 1, -2),
                            BorderSizePixel = 0,
                            BackgroundColor3 = Library.Theme.Default.Inline,
                            Parent = TabInactiveOutline
                        })
                        --
                        Library:AddTheme(TabActiveInline_1, {
                            BackgroundColor3 = "Inline",
                        })
                        --
                        local TabActiveMain_1 = Library:CreateObject("Frame", {
                            Name = "TabActiveMain_1",
                            Position = UDim2.new(0, 1, 0, 1),
                            BorderColor3 = Color3.fromRGB(0, 0, 0),
                            Size = UDim2.new(1, -2, 1, -2),
                            BorderSizePixel = 0,
                            BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                            Parent = TabActiveInline_1
                        })
                        --
                        local UIGradient_27 = Library:CreateObject("UIGradient", {
                            Rotation = 90,
                            Color = ColorSequence.new{
                                ColorSequenceKeypoint.new(0, Library.Theme.Default.LightContrast),
                                ColorSequenceKeypoint.new(1, Library.Theme.Default.DarkContrast)
                            },
                            Parent = TabActiveMain_1
                        })
                        --
                        Library:AddTheme(UIGradient_27, {
                            Color = {"LightContrast", "DarkContrast"},
                        })
                        --
                        local Hider_1 = Library:CreateObject("Frame", {
                            Name = "Hider_1",
                            Position = UDim2.new(0, 0, 1, 0),
                            BorderColor3 = Color3.fromRGB(0, 0, 0),
                            Size = UDim2.new(1, 0, 0, 2),
                            BorderSizePixel = 0,
                            BackgroundColor3 = Library.Theme.Default.DarkContrast,
                            Parent = TabActiveMain_1,
                        })
                        --
                        Library:AddTheme(Hider_1, {
                            BackgroundColor3 = "DarkContrast",
                        })
                        --
                        local HiderLeft_1 = Library:CreateObject("Frame", {
                            Name = "HiderLeft_1",
                            Position = UDim2.new(0, -1, 1, 1),
                            BorderColor3 = Color3.fromRGB(0, 0, 0),
                            Size = UDim2.new(0, 1, 0, 1),
                            BorderSizePixel = 0,
                            BackgroundColor3 = Library.Theme.Default.Inline,
                            Parent = TabActiveMain_1
                        })
                        --
                        Library:AddTheme(HiderLeft_1, {
                            BackgroundColor3 = "Inline",
                        })
                        --
                        local HiderRight_1 = Library:CreateObject("Frame", {
                            Name = "HiderRight_1",
                            Position = UDim2.new(1, 0, 1, 1),
                            BorderColor3 = Color3.fromRGB(0, 0, 0),
                            Size = UDim2.new(0, 1, 0, 1),
                            BorderSizePixel = 0,
                            BackgroundColor3 = Library.Theme.Default.Inline,
                            Parent = TabActiveMain_1
                        })
                        --
                        Library:AddTheme(HiderRight_1, {
                            BackgroundColor3 = "Inline",
                        })
                        --
                        local Text_1 = Library:CreateObject("TextLabel", {
                            FontFace = Library.UI.Font,
                            TextColor3 = Library.Theme.Default.TextDark,
                            BorderColor3 = Color3.fromRGB(0, 0, 0),
                            Text = Options.Name,
                            TextStrokeTransparency = 0,
                            BackgroundTransparency = 1,
                            Name = "Text_1",
                            Size = UDim2.new(1, 0, 1, 0),
                            BorderSizePixel = 0,
                            TextSize = Library.UI.FontSize,
                            BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                            Parent = TabActiveMain_1
                        })
                        --
                        Library:AddTheme(Text_1, {
                            TextColor3 = "TextDark",
                        })
                        --
                        local UIPadding_35 = Library:CreateObject("UIPadding", {
                            PaddingTop = UDim.new(0, 1),
                            Parent = Text_1
                        })
                        --
                        local TextButton_1 = Library:CreateObject("TextButton", {
                            FontFace = Library.UI.Font,
                            TextColor3 = Color3.fromRGB(0, 0, 0),
                            BorderColor3 = Color3.fromRGB(0, 0, 0),
                            BackgroundTransparency = 1,
                            Size = UDim2.new(1, 0, 1, 0),
                            BorderSizePixel = 0,
                            TextTransparency = 1,
                            TextSize = Library.UI.FontSize,
                            BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                            Parent = TabInactiveOutline
                        })
                        --
                        local Left, Right
                        --
                        if Options.Scrolling then
                            Left = Library:CreateObject("ScrollingFrame", {
                                ScrollBarImageColor3 = Library.Theme.Default.Accent,
                                MidImage = "rbxassetid://158362264",
                                Active = true,
                                BorderColor3 = Color3.fromRGB(0, 0, 0),
                                ScrollBarThickness = 2,
                                CanvasSize = UDim2.new(0, 0, 0, 0),
                                AutomaticCanvasSize = Enum.AutomaticSize.Y,
                                Name = "SectionItemsHolder",
                                ClipsDescendants = true,
                                BackgroundTransparency = 1,
                                Size = UDim2.new(0.5, -1, 1, 0),
                                ZIndex = 2,
                                TopImage = "rbxassetid://158362264",
                                BottomImage = "rbxassetid://158362264",
                                BorderSizePixel = 0,
                                BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                                Parent = NavigationMain
                            })
                            --
                            Library:AddTheme(Left, {
                                ScrollBarImageColor3 = "Accent"
                            })
                        else
                            Left = Library:CreateObject("Frame", {
                                Name = "Left",
                                BackgroundTransparency = 1,
                                Size = UDim2.new(0.5, -1, 1, 3),
                                BorderColor3 = Color3.fromRGB(0, 0, 0),
                                ZIndex = 2,
                                BorderSizePixel = 0,
                                BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                                Parent = NavigationMain
                            })
                        end
                        --
                        local UIListLayout_2 = Library:CreateObject("UIListLayout", {
                            Padding = UDim.new(0, 4),
                            SortOrder = Enum.SortOrder.LayoutOrder,
                            Parent = Left
                        })
                        --
                        local UIPadding_3 = Library:CreateObject("UIPadding", {
                            PaddingBottom = UDim.new(0, 8),
                            PaddingLeft = UDim.new(0, 4),
                            PaddingTop = UDim.new(0, 4),
                            Parent = Left
                        })
                        --
                        if Options.Scrolling then
                            Right = Library:CreateObject("ScrollingFrame", {
                                ScrollBarImageColor3 = Library.Theme.Default.Accent,
                                MidImage = "rbxassetid://158362264",
                                Active = true,
                                BorderColor3 = Color3.fromRGB(0, 0, 0),
                                ScrollBarThickness = 2,
                                CanvasSize = UDim2.new(0, 0, 0, 0),
                                AutomaticCanvasSize = Enum.AutomaticSize.Y,
                                Name = "SectionItemsHolder",
                                ClipsDescendants = true,
                                BackgroundTransparency = 1,
                                Position = UDim2.new(0.5, 2, 0, 0),
                                Size = UDim2.new(0.5, -1, 1, 0),
                                ZIndex = 2,
                                TopImage = "rbxassetid://158362264",
                                BottomImage = "rbxassetid://158362264",
                                BorderSizePixel = 0,
                                BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                                Parent = NavigationMain
                            })
                            --
                            Library:AddTheme(Right, {
                                ScrollBarImageColor3 = "Accent"
                            })
                        else
                            Right = Library:CreateObject("Frame", {
                                BorderColor3 = Color3.fromRGB(0, 0, 0),
                                Name = "Right",
                                BackgroundTransparency = 1,
                                Position = UDim2.new(0.5, 2, 0, 0),
                                Size = UDim2.new(0.5, -1, 1, 3),
                                ZIndex = 2,
                                BorderSizePixel = 0,
                                BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                                Parent = NavigationMain
                            })
                        end
                        --
                        local UIListLayout_4 = Library:CreateObject("UIListLayout", {
                            Padding = UDim.new(0, 4),
                            SortOrder = Enum.SortOrder.LayoutOrder,
                            Parent = Right
                        })
                        --
                        local UIPadding_14 = Library:CreateObject("UIPadding", {
                            PaddingBottom = UDim.new(0, 8),
                            PaddingTop = UDim.new(0, 4),
                            PaddingRight = UDim.new(0, 4),
                            Parent = Right
                        })
                        --
                        do -- Functions
                            function WindowTab:Fade(Bool)
								task.spawn(LPH_NO_VIRTUALIZE(function()
									FadingMain.Visible = true
									--
									Library:TweenObject(FadingMain, TweenInfo.new(0.13, Enum.EasingStyle.Linear, Enum.EasingDirection.Out), {BackgroundTransparency = 0})
									--
									task.wait(0.13)
									--
									NavigationMain.Visible = Bool
									--
									Library:TweenObject(FadingMain, TweenInfo.new(0.13, Enum.EasingStyle.Linear, Enum.EasingDirection.Out), {BackgroundTransparency = 1})
									--
									task.wait(0.13)
									--
									FadingMain.Visible = false
								end))
							end
                            --
                            function WindowTab:Activate()
                                if not WindowTab.Active then
                                    --
                                    if Window.CurrentTab ~= nil then
                                        Window.CurrentTab:Deactivate()
                                    end
                                    --
                                    WindowTab.Active = true
                                    WindowTab:Fade(true)
                                    --
                                    UIGradient_27.Rotation = -90
                                    Hider_1.BackgroundColor3 = Library.Theme.Default.LightContrast
                                    Hider_1.Size = UDim2.new(1, 0, 0, 3)
                                    --
                                    Library:TweenObject(Text_1, TweenInfo.new(Library.UI.TweenSpeed, Library.UI.TweenEasingStyle, Enum.EasingDirection.InOut), {TextColor3 = Library.Theme.Default.Accent})
                                    --
                                    Library:AddTheme(Text_1, {
                                        TextColor3 = "Accent",
                                    })
                                    --
                                    Library:AddTheme(Hider_1, {
                                        BackgroundColor3 = "LightContrast",
                                    })
                                    --
                                    Window.CurrentTab = WindowTab
                                end
                            end

                            function WindowTab:Deactivate()
                                if WindowTab.Active then
                                    WindowTab.Active = false
                                    WindowTab.Hovering = false
                                    --
                                    UIGradient_27.Rotation = 90
                                    Library:TweenObject(Text_1, TweenInfo.new(Library.UI.TweenSpeed, Library.UI.TweenEasingStyle, Enum.EasingDirection.InOut), {TextColor3 = Library.Theme.Default.TextDark})
                                    Hider_1.BackgroundColor3 = Library.Theme.Default.DarkContrast
                                    Hider_1.Size = UDim2.new(1, 0, 0, 2)
                                    --
                                    Library:AddTheme(Text_1, {
                                        TextColor3 = "TextDark",
                                    })
                                    --
                                    Library:AddTheme(Hider_1, {
                                        BackgroundColor3 = "DarkContrast",
                                    })
                                    --
                                    WindowTab:Fade(false)
                                end
                            end
                        end
                        --
                        do -- Connections
                            Library:Connection(TextButton_1.MouseButton1Click, function()
                                WindowTab:Activate()
                            end)
                            --
                            Library:Connection(TabInactiveOutline.MouseEnter, function()
                                if not WindowTab.Active then
                                    WindowTab.Hovering = true
                                    --
                                    Library:TweenObject(Text_1, TweenInfo.new(Library.UI.TweenSpeed, Library.UI.TweenEasingStyle, Enum.EasingDirection.InOut), {TextColor3 = Library.Theme.Default.TextColor})
                                    --
                                    Library:AddTheme(Text_1, {
                                        TextColor3 = "TextColor",
                                    })
                                end
                            end)
                            --
                            Library:Connection(TabInactiveOutline.MouseLeave, function()
                                if WindowTab.Hovering and not WindowTab.Active then
                                    WindowTab.Hovering = false
                                    --
                                    Library:TweenObject(Text_1, TweenInfo.new(Library.UI.TweenSpeed, Library.UI.TweenEasingStyle, Enum.EasingDirection.InOut), {TextColor3 = Library.Theme.Default.TextDark})
                                    --
                                    Library:AddTheme(Text_1, {
                                        TextColor3 = "TextDark",
                                    })
                                end
                            end)
                        end
                        --
                        if Window.CurrentTab == nil then
                            WindowTab:Activate()
                        end
                        --
                        table.insert(Window.Tabs, TabInactiveOutline)
                        --
                        NavigationIcon:UpdateSizes()
                        --
                        function WindowTab:Section(Options)
                            Options = Library:Validate({
                                Name = "Preview Section",
                                Side = "Left",
                                Scrolling = false,
                                Fill = false,
                            }, Options or {})
                            --
                            local Section = {
                                Elements = {},
                            }
                            --
                            Library.UI.SectionZIndex -= 1
                            --
                            local Parent = Options.Side == "Left" and Left or Right
                            --
                            local SectionOutline = Library:CreateObject("Frame", {
                                Name = "SectionOutline",
                                BorderColor3 = Color3.fromRGB(0, 0, 0),
                                Size = UDim2.new(1, -1, 0, 30),
                                BorderSizePixel = 0,
                                BackgroundColor3 = Library.Theme.Default.Inline,
                                ZIndex = Library.UI.SectionZIndex,
                                AutomaticSize = Options.Fill and Enum.AutomaticSize.None or Enum.AutomaticSize.Y,
                                Parent = Parent
                            })
                            --
                            task.delay(0.01, function()
                                if Options.Fill == false then
                                    WindowTab.Sides[Options.Side].Sizes += SectionOutline.AbsoluteSize.Y + 4
                                end
                                --
                                SectionOutline.Size = UDim2.new(1, -1, Options.Fill and 1 or 0, Options.Fill and -WindowTab.Sides[Options.Side].Sizes or 30)
                            end)
                            --
                            Library:AddTheme(SectionOutline, {
                                BackgroundColor3 = "Inline",
                            })
                            --
                            local SectionInline = Library:CreateObject("Frame", {
                                Name = "SectionInline",
                                Position = UDim2.new(0, 1, 0, 1),
                                BorderColor3 = Color3.fromRGB(0, 0, 0),
                                Size = UDim2.new(1, -2, 1, -2),
                                BorderSizePixel = 0,
                                BackgroundColor3 = Library.Theme.Default.Outline,
                                Parent = SectionOutline
                            })
                            --
                            Library:AddTheme(SectionInline, {
                                BackgroundColor3 = "Outline",
                            })
                            --
                            local SectionDarkContrast = Library:CreateObject("Frame", {
                                Name = "SectionDarkContrast",
                                Position = UDim2.new(0, 1, 0, 1),
                                BorderColor3 = Color3.fromRGB(0, 0, 0),
                                Size = UDim2.new(1, -2, 1, -2),
                                BorderSizePixel = 0,
                                BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                                Parent = SectionInline
                            })
                            --
                            local UIGradient_25 = Library:CreateObject("UIGradient", {
                                Rotation = 90,
                                Color = ColorSequence.new{
                                    ColorSequenceKeypoint.new(0, Library.Theme.Default.LightContrast),
                                    ColorSequenceKeypoint.new(1, Library.Theme.Default.DarkContrast)
                                },
                                Parent = SectionDarkContrast
                            })
                            --
                            Library:AddTheme(UIGradient_25, {
                                Color = {"LightContrast", "DarkContrast"},
                            })
                            --
                            local AccentBar = Library:CreateObject("Frame", {
                                Name = "AccentBar",
                                BorderColor3 = Color3.fromRGB(0, 0, 0),
                                Size = UDim2.new(1, 0, 0, 2),
                                BorderSizePixel = 0,
                                BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                                Parent = SectionDarkContrast
                            })
                            --
                            local UIGradient_33122 = Library:CreateObject("UIGradient", {
                                Rotation = 90,
                                Color = ColorSequence.new{
                                    ColorSequenceKeypoint.new(0, Library.Theme.Default.Accent),
                                    ColorSequenceKeypoint.new(1, Library.Theme.Default.SecondAccent)
                                },
                                Parent = AccentBar
                            })
                            --
                            Library:AddTheme(UIGradient_33122, {
                                Color = {"Accent", "SecondAccent"}
                            })
                            --
                            local SectionItemsHolder
                            --
                            if Options.Scrolling then
                                SectionItemsHolder = Library:CreateObject("ScrollingFrame", {
                                    ScrollBarImageColor3 = Library.Theme.Default.Accent,
                                    MidImage = "rbxassetid://158362264",
                                    Active = true,
                                    BorderColor3 = Color3.fromRGB(0, 0, 0),
                                    ScrollBarThickness = 2,
                                    CanvasSize = UDim2.new(0, 0, 0, 0),
                                    AutomaticCanvasSize = Enum.AutomaticSize.Y,
                                    Name = "SectionItemsHolder",
                                    BackgroundTransparency = 1,
                                    Size = UDim2.new(1, -2, 1, -24),
                                    Position = UDim2.new(0, 1, 0, 22),
                                    TopImage = "rbxassetid://158362264",
                                    AutomaticSize = Options.Fill and Enum.AutomaticSize.None or Enum.AutomaticSize.Y,
                                    BottomImage = "rbxassetid://158362264",
                                    BorderSizePixel = 0,
                                    BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                                    Parent = SectionDarkContrast
                                })
                                --
                                Library:AddTheme(SectionItemsHolder, {
                                    ScrollBarImageColor3 = "Accent"
                                })
                            else
                                SectionItemsHolder = Library:CreateObject("Frame", {
                                    Name = "SectionItemsHolder",
                                    BackgroundTransparency = 1,
                                    Position = UDim2.new(0, 1, 0, 22),
                                    BorderColor3 = Color3.fromRGB(0, 0, 0),
                                    Size = UDim2.new(1, -2, 1, -24),
                                    BorderSizePixel = 0,
                                    BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                                    Parent = SectionDarkContrast,
                                    ClipsDescendants = true,
                                    AutomaticSize = Enum.AutomaticSize.Y,
                                })
                            end
                            --
                            local UIListLayout_5 = Library:CreateObject("UIListLayout", {
                                Padding = UDim.new(0, 2),
                                SortOrder = Enum.SortOrder.LayoutOrder,
                                Parent = SectionItemsHolder
                            })
                            --
                            local UIPadding_16 = Library:CreateObject("UIPadding", {
                                PaddingBottom = UDim.new(0, 6),
                                PaddingRight = UDim.new(0, 3),
                                PaddingLeft = UDim.new(0, 3),
                                Parent = SectionItemsHolder
                            })
                            --
                            local TopBar_3 = Library:CreateObject("Frame", {
                                Name = "TopBar_3",
                                BackgroundTransparency = 1,
                                Position = UDim2.new(0, 0, 0, 2),
                                BorderColor3 = Color3.fromRGB(0, 0, 0),
                                Size = UDim2.new(1, 0, 0, 20),
                                BorderSizePixel = 0,
                                BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                                Parent = SectionDarkContrast
                            })
                            --
                            local SectionName_1 = Library:CreateObject("TextLabel", {
                                FontFace = Library.UI.Font,
                                TextColor3 = Library.Theme.Default.TextColor,
                                BorderColor3 = Color3.fromRGB(0, 0, 0),
                                Text = Options.Name,
                                TextStrokeTransparency = 0,
                                Name = "SectionName_1",
                                BackgroundTransparency = 1,
                                TextXAlignment = Enum.TextXAlignment.Left,
                                Size = UDim2.new(1, 0, 1, 0),
                                BorderSizePixel = 0,
                                TextSize = Library.UI.FontSize,
                                BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                                Parent = TopBar_3
                            })
                            --
                            Library:AddTheme(SectionName_1, {
                                TextColor3 = "TextColor",
                            })
                            --
                            local UIPadding_23 = Library:CreateObject("UIPadding", {
                                PaddingLeft = UDim.new(0, 4),
                                Parent = SectionName_1
                            })
                            --
                            Section.Elements = {
                                Name = SectionName_1.Text,
                                ContentHolder = SectionItemsHolder,
                            }
                            --
                            return setmetatable(Section, Library.Sections)
                        end
                        --
                        function WindowTab:MultiSection(Options)
                            Options = Library:Validate({
                                Sections = {},
                                Side = "Left",
                                Scrolling = false,
                                Fill = false,
                            }, Options or {})
                            --
                            local MultiSection = {
                                CurrentSection = nil,
                                Sections = {},
                                List = {},
                                Elements = {},
                            }
                            --
                            Library.UI.SectionZIndex -= 1
                            --
                            local Parent = Options.Side == "Left" and Left or Right
                            --
                            local SectionOutline = Library:CreateObject("Frame", {
                                Name = "SectionOutline",
                                BorderColor3 = Color3.fromRGB(0, 0, 0),
                                Size = UDim2.new(1, -1, 0, 30),
                                BorderSizePixel = 0,
                                BackgroundColor3 = Library.Theme.Default.Inline,
                                ZIndex = Library.UI.SectionZIndex,
                                AutomaticSize = Options.Fill and Enum.AutomaticSize.None or Enum.AutomaticSize.Y,
                                Parent = Parent
                            })
                            --
                            task.delay(0.01, function()
                                if Options.Fill == false then
                                    WindowTab.Sides[Options.Side].Sizes += SectionOutline.AbsoluteSize.Y + 4
                                end
                                --
                                SectionOutline.Size = UDim2.new(1, -1, Options.Fill and 1 or 0, Options.Fill and -WindowTab.Sides[Options.Side].Sizes or 30)
                            end)
                            --
                            Library:AddTheme(SectionOutline, {
                                BackgroundColor3 = "Inline",
                            })
                            --
                            local SectionInline = Library:CreateObject("Frame", {
                                Name = "SectionInline",
                                Position = UDim2.new(0, 1, 0, 1),
                                BorderColor3 = Color3.fromRGB(0, 0, 0),
                                Size = UDim2.new(1, -2, 1, -2),
                                BorderSizePixel = 0,
                                BackgroundColor3 = Library.Theme.Default.Outline,
                                Parent = SectionOutline
                            })
                            --
                            Library:AddTheme(SectionInline, {
                                BackgroundColor3 = "Outline",
                            })
                            --
                            local SectionDarkContrast = Library:CreateObject("Frame", {
                                Name = "SectionDarkContrast",
                                Position = UDim2.new(0, 1, 0, 1),
                                BorderColor3 = Color3.fromRGB(0, 0, 0),
                                Size = UDim2.new(1, -2, 1, -2),
                                BorderSizePixel = 0,
                                BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                                Parent = SectionInline
                            })
                            --
                            local UIGradient_25 = Library:CreateObject("UIGradient", {
                                Rotation = 90,
                                Color = ColorSequence.new{
                                    ColorSequenceKeypoint.new(0, Library.Theme.Default.LightContrast),
                                    ColorSequenceKeypoint.new(1, Library.Theme.Default.DarkContrast)
                                },
                                Parent = SectionDarkContrast
                            })
                            --
                            Library:AddTheme(UIGradient_25, {
                                Color = {"LightContrast", "DarkContrast"},
                            })
                            --
                            local AccentBar = Library:CreateObject("Frame", {
                                Name = "AccentBar",
                                BorderColor3 = Color3.fromRGB(0, 0, 0),
                                Size = UDim2.new(1, 0, 0, 2),
                                BorderSizePixel = 0,
                                ZIndex = 4,
                                BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                                Parent = SectionDarkContrast
                            })
                            --
                            local UIGradient_33122 = Library:CreateObject("UIGradient", {
                                Rotation = 90,
                                Color = ColorSequence.new{
                                    ColorSequenceKeypoint.new(0, Library.Theme.Default.Accent),
                                    ColorSequenceKeypoint.new(1, Library.Theme.Default.SecondAccent)
                                },
                                Parent = AccentBar
                            })
                            --
                            Library:AddTheme(UIGradient_33122, {
                                Color = {"Accent", "SecondAccent"}
                            })
                            --
                            local TopBar_3 = Library:CreateObject("Frame", {
                                Name = "TopBar_3",
                                BackgroundTransparency = 1,
                                Position = UDim2.new(0, 0, 0, 2),
                                BorderColor3 = Color3.fromRGB(0, 0, 0),
                                Size = UDim2.new(1, 0, 0, 20),
                                BorderSizePixel = 0,
                                ZIndex = 3,
                                BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                                Parent = SectionDarkContrast
                            })
                            --
                            local UIPadding_23 = Library:CreateObject("UIPadding", {
                                PaddingLeft = UDim.new(0, -1),
                                PaddingRight = UDim.new(0, -1),
                                Parent = TopBar_3
                            })
                            --
                            for Index, Value in Options.Sections do
                                local SectionItem = {
                                    Active = false,
                                    Hovering = false,
                                    Elements = {},
                                }
                                --
                                local FadingMain = Library:CreateObject("Frame", {
                                    Name = "FadingMain",
                                    Position = UDim2.new(0, 1, 0, 1),
                                    BorderColor3 = Color3.fromRGB(0, 0, 0),
                                    Size = UDim2.new(1, -2, 1, -2),
                                    BorderSizePixel = 0,
                                    BackgroundTransparency = 1,
                                    BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                                    Parent = SectionDarkContrast,
                                    ZIndex = 2,
                                    Visible = false
                                })
                                --
                                local HolderFadingGradient = Library:CreateObject("UIGradient", {
                                    Rotation = 90,
                                    Name = "HolderFadingGradient",
                                    Color = ColorSequence.new{
                                        ColorSequenceKeypoint.new(0, Library.Theme.Default.LightContrast),
                                        ColorSequenceKeypoint.new(1, Library.Theme.Default.DarkContrast)
                                    },
                                    Parent = FadingMain
                                })
                                --
                                Library:AddTheme(HolderFadingGradient, {
                                    Color = {"LightContrast", "DarkContrast"},
                                })
                                --
                                local SectionItemsHolder
                                --
                                if Options.Scrolling then
                                    SectionItemsHolder = Library:CreateObject("ScrollingFrame", {
                                        ScrollBarImageColor3 = Library.Theme.Default.Accent,
                                        MidImage = "rbxassetid://158362264",
                                        Active = true,
                                        BorderColor3 = Color3.fromRGB(0, 0, 0),
                                        ScrollBarThickness = 2,
                                        CanvasSize = UDim2.new(0, 0, 0, 0),
                                        AutomaticCanvasSize = Enum.AutomaticSize.Y,
                                        Name = "SectionItemsHolder",
                                        BackgroundTransparency = 1,
                                        Size = UDim2.new(1, -2, 1, -24),
                                        Position = UDim2.new(0, 1, 0, 22),
                                        TopImage = "rbxassetid://158362264",
                                        BottomImage = "rbxassetid://158362264",
                                        AutomaticSize = Options.Fill and Enum.AutomaticSize.None or Enum.AutomaticSize.Y,
                                        BorderSizePixel = 0,
                                        Visible = false,
                                        BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                                        Parent = SectionDarkContrast
                                    })
                                    --
                                    Library:AddTheme(SectionItemsHolder, {
                                        ScrollBarImageColor3 = "Accent"
                                    })
                                else
                                    SectionItemsHolder = Library:CreateObject("Frame", {
                                        Name = "SectionItemsHolder",
                                        BackgroundTransparency = 1,
                                        Position = UDim2.new(0, 1, 0, 22),
                                        BorderColor3 = Color3.fromRGB(0, 0, 0),
                                        Size = UDim2.new(1, -2, 1, -24),
                                        BorderSizePixel = 0,
                                        Visible = false,
                                        BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                                        Parent = SectionDarkContrast,
                                        ClipsDescendants = true,
                                        AutomaticSize = Enum.AutomaticSize.Y,
                                    })
                                end
                                --
                                local UIListLayout_5 = Library:CreateObject("UIListLayout", {
                                    Padding = UDim.new(0, 2),
                                    SortOrder = Enum.SortOrder.LayoutOrder,
                                    Parent = SectionItemsHolder
                                })
                                --
                                local UIPadding_16 = Library:CreateObject("UIPadding", {
                                    PaddingTop = UDim.new(0, 2),
                                    PaddingBottom = UDim.new(0, 6),
                                    PaddingRight = UDim.new(0, 3),
                                    PaddingLeft = UDim.new(0, 3),
                                    Parent = SectionItemsHolder
                                })
                                --
                                local SectionOutline = Library:CreateObject("Frame", {
                                    Name = "TabActiveInline_1",
                                    BorderColor3 = Color3.fromRGB(0, 0, 0),
                                    BorderSizePixel = 0,
                                    BackgroundColor3 = Library.Theme.Default.Outline,
                                    Parent = TopBar_3
                                })
                                --
                                Library:AddTheme(SectionOutline, {
                                    BackgroundColor3 = "Outline",
                                })
                                --
                                local SectionMain = Library:CreateObject("Frame", {
                                    Name = "TabActiveMain_1",
                                    Position = UDim2.new(0, 1, 0, 1),
                                    BorderColor3 = Color3.fromRGB(0, 0, 0),
                                    Size = UDim2.new(1, -2, 1, -2),
                                    BorderSizePixel = 0,
                                    BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                                    Parent = SectionOutline
                                })
                                --
                                local UIGradient_27 = Library:CreateObject("UIGradient", {
                                    Rotation = 90,
                                    Color = ColorSequence.new{
                                        ColorSequenceKeypoint.new(0, Library.Theme.Default.LightContrast),
                                        ColorSequenceKeypoint.new(1, Library.Theme.Default.DarkContrast)
                                    },
                                    Parent = SectionMain
                                })
                                --
                                Library:AddTheme(UIGradient_27, {
                                    Color = {"LightContrast", "DarkContrast"},
                                })
                                --
                                local Hider_12 = Library:CreateObject("Frame", {
                                    Name = "Hider_1",
                                    Position = UDim2.new(0, 0, 1, 0),
                                    BorderColor3 = Color3.fromRGB(0, 0, 0),
                                    Size = UDim2.new(1, 0, 0, 1),
                                    BorderSizePixel = 0,
                                    Visible = false,
                                    ZIndex = 2,
                                    BackgroundColor3 = Library.Theme.Default.DarkContrast,
                                    Parent = SectionMain,
                                })
                                --
                                Library:AddTheme(Hider_12, {
                                    BackgroundColor3 = "DarkContrast",
                                })
                                --
                                local TextButton_14 = Library:CreateObject("TextButton", {
                                    FontFace = Library.UI.Font,
                                    TextColor3 = Color3.fromRGB(0, 0, 0),
                                    BorderColor3 = Color3.fromRGB(0, 0, 0),
                                    BackgroundTransparency = 1,
                                    Size = UDim2.new(1, 0, 1, 0),
                                    BorderSizePixel = 0,
                                    TextTransparency = 1,
                                    TextSize = Library.UI.FontSize,
                                    BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                                    Parent = SectionOutline
                                })
                                --
                                local SectionName_1 = Library:CreateObject("TextLabel", {
                                    FontFace = Library.UI.Font,
                                    TextColor3 = Library.Theme.Default.TextDark,
                                    BorderColor3 = Color3.fromRGB(0, 0, 0),
                                    Text = Value,
                                    TextStrokeTransparency = 0,
                                    Name = "SectionName_1",
                                    BackgroundTransparency = 1,
                                    Size = UDim2.new(1, 0, 1, 0),
                                    BorderSizePixel = 0,
                                    TextSize = Library.UI.FontSize,
                                    BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                                    Parent = SectionMain
                                })
                                --
                                Library:AddTheme(SectionName_1, {
                                    TextColor3 = "TextDark",
                                })
                                --
                                do -- Functions
                                    function SectionItem:Fade(Bool)
                                        task.spawn(LPH_NO_VIRTUALIZE(function()
                                            FadingMain.Visible = true
                                            --
                                            Library:TweenObject(FadingMain, TweenInfo.new(0.13, Enum.EasingStyle.Linear, Enum.EasingDirection.Out), {BackgroundTransparency = 0})
                                            --
                                            task.wait(0.13)
                                            --
                                            SectionItemsHolder.Visible = Bool
                                            --
                                            Library:TweenObject(FadingMain, TweenInfo.new(0.13, Enum.EasingStyle.Linear, Enum.EasingDirection.Out), {BackgroundTransparency = 1})
                                            --
                                            task.wait(0.13)
                                            --
                                            FadingMain.Visible = false
                                        end))
                                    end
                                    --
                                    function SectionItem:Activate()
                                        if not SectionItem.Active then
                                            --
                                            if MultiSection.CurrentSection ~= nil then
                                                MultiSection.CurrentSection:Deactivate()
                                            end
                                            --
                                            SectionItem.Active = true
                                            --
                                            UIGradient_27.Rotation = -90
                                            Hider_12.Visible = true
                                            Hider_12.BackgroundColor3 = Library.Theme.Default.LightContrast
                                            SectionItem:Fade(true)
                                            --
                                            Library:TweenObject(SectionName_1, TweenInfo.new(Library.UI.TweenSpeed, Library.UI.TweenEasingStyle, Enum.EasingDirection.InOut), {TextColor3 = Library.Theme.Default.Accent})
                                            --
                                            Library:AddTheme(SectionName_1, {
                                                TextColor3 = "Accent",
                                            })
                                            --
                                            Library:AddTheme(Hider_12, {
                                                BackgroundColor3 = "LightContrast",
                                            })
                                            --
                                            MultiSection.CurrentSection = SectionItem
                                        end
                                    end
                                    --
                                    function SectionItem:Deactivate()
                                        if SectionItem.Active then
                                            SectionItem.Active = false
                                            SectionItem.Hovering = false
                                            --
                                            UIGradient_27.Rotation = 90
                                            Library:TweenObject(SectionName_1, TweenInfo.new(Library.UI.TweenSpeed, Library.UI.TweenEasingStyle, Enum.EasingDirection.InOut), {TextColor3 = Library.Theme.Default.TextDark})
                                            Hider_12.BackgroundColor3 = Library.Theme.Default.DarkContrast
                                            Hider_12.Visible = false
                                            SectionItem:Fade(false)
                                            --
                                            Library:AddTheme(SectionName_1, {
                                                TextColor3 = "TextDark",
                                            })
                                            --
                                            Library:AddTheme(Hider_12, {
                                                BackgroundColor3 = "DarkContrast",
                                            })
                                        end
                                    end
                                end
                                --
                                do -- Connections
                                    Library:Connection(TextButton_14.MouseButton1Click, function()
                                        SectionItem:Activate()
                                    end)
                                    --
                                    Library:Connection(SectionOutline.MouseEnter, function()
                                        if not SectionItem.Active then
                                            SectionItem.Hovering = true
                                            --
                                            Library:TweenObject(SectionName_1, TweenInfo.new(Library.UI.TweenSpeed, Library.UI.TweenEasingStyle, Enum.EasingDirection.InOut), {TextColor3 = Library.Theme.Default.TextColor})
                                            --
                                            Library:AddTheme(SectionName_1, {
                                                TextColor3 = "TextColor",
                                            })
                                        end
                                    end)
                                    --
                                    Library:Connection(SectionOutline.MouseLeave, function()
                                        if SectionItem.Hovering and not SectionItem.Active then
                                            SectionItem.Hovering = false
                                            --
                                            Library:TweenObject(SectionName_1, TweenInfo.new(Library.UI.TweenSpeed, Library.UI.TweenEasingStyle, Enum.EasingDirection.InOut), {TextColor3 = Library.Theme.Default.TextDark})
                                            --
                                            Library:AddTheme(SectionName_1, {
                                                TextColor3 = "TextDark",
                                            })
                                        end
                                    end)
                                end
                                --
                                if MultiSection.CurrentSection == nil then
                                    SectionItem:Activate()
                                end
                                --
                                table.insert(MultiSection.List, SectionOutline)
                                --
                                SectionItem.Elements = {
                                    Name = SectionName_1.Text,
                                    ContentHolder = SectionItemsHolder,
                                }
                                --
                                local Count = #MultiSection.List
                                local PaddingAmount = (Count - 1) * -1
                                local TabWidth = (1 - PaddingAmount / TopBar_3.AbsoluteSize.X) / Count
                                --
                                for Index, Value in MultiSection.List do
                                    Value.Size = UDim2.new(TabWidth, 0, 1, 0)
                                    Value.Position = UDim2.new((TabWidth + -1 / TopBar_3.AbsoluteSize.X) * (Index - 1), 0, 0, 0)
                                end
                                --
                                MultiSection.Sections[#MultiSection.Sections + 1] = setmetatable(SectionItem, Library.Sections)
                            end
                            --
                            return table.unpack(MultiSection.Sections)
                        end
                        --
                        function Sections:Toggle(Options)
                            Options = Library:Validate({
                                Default = false,
                                Name = "Preview Toggle",
                                Risky = false,
                                Flag = Library:NewFlag(),
                                Callback = function() end
                            }, Options or {})
                            --
                            local Toggle = Library:Toggle({
                                Default = Options.Default,
                                Name = Options.Name,
                                SectionName = self.Elements.Name,
                                Parent = self.Elements.ContentHolder,
                                Risky = Options.Risky,
                                MainUI = MainWindowOutline,
                                TabUI = NavigationMain,
                                Flag = Options.Flag,
                                Callback = Options.Callback
                            })
                            --
                            return Toggle
                        end
                        --
                        function Sections:Label(Options)
                            Options = Library:Validate({
                                Message = "Preview Label",
                                Side = "Left",
                                Risky = false,
                                Callback = function() end
                            }, Options or {})
                            --
                            local Label = Library:Label({
                                Message = Options.Message,
                                Side = Options.Side,
                                Risky = Options.Risky,
                                MainUI = MainWindowOutline,
                                TabUI = NavigationMain,
                                SectionName = self.Elements.Name,
                                Callback = Options.Callback,
                                Parent = self.Elements.ContentHolder
                            })
                            --
                            return Label
                        end
                        --
                        function Sections:TextBox(Options)
                            Options = Library:Validate({
                                Default = "",
                                Name = "Preview TextBox",
                                Max = 32,
                                NumbersOnly = false,
                                ClearOnFocus = false,
                                CheckIfPressedEnter = false,
                                Risky = false,
                                Flag = Library.NewFlag(),
                                Callback = function() end
                            }, Options or {})
                            --
                            local TextBox = Library:TextBox({
                                Default = Options.Default,
                                Name = Options.Name,
                                Max = Options.Max,
                                NumbersOnly = Options.NumbersOnly,
                                ClearOnFocus = Options.ClearOnFocus,
                                CheckIfPressedEnter = Options.CheckIfPressedEnter,
                                Risky = Options.Risky,
                                Parent = self.Elements.ContentHolder,
                                Flag = Options.Flag,
                                Callback = Options.Callback
                            })
                            --
                            return TextBox
                        end
                        --
                        function Sections:Button(Options)
                            Options = Library:Validate({
                                Name = "Preview Button",
                                Confirmation = false,
                                Risky = false,
                                Callback = function() end
                            }, Options or {})
                            --
                            local Button = Library:Button({
                                Name = Options.Name,
                                Confirmation = Options.Confirmation,
                                Risky = Options.Risky,
                                Parent = self.Elements.ContentHolder,
                                Callback = Options.Callback
                            })
                            --
                            return Button
                        end
                        --
                        function Sections:Slider(Options)
                            Options = Library:Validate({
                                Name = "Preview Slider",
                                Min = 0,
                                Max = 100,
                                Default = 1,
                                Decimal = 1,
                                Ending = "",
                                Risky = false,
                                Flag = Library.NewFlag(),
                                Callback = function() end
                            }, Options or {})
                            --
                            local Slider = Library:Slider({
                                Name = Options.Name,
                                Min = Options.Min,
                                Max = Options.Max,
                                Default = Options.Default,
                                Decimal = Options.Decimal,
                                Ending = Options.Ending,
                                Parent = self.Elements.ContentHolder,
                                Risky = Options.Risky,
                                Flag = Options.Flag,
                                Callback = Options.Callback
                            })
                            --
                            return Slider
                        end
                        --
                        function Sections:Dropdown(Options)
                            Options = Library:Validate({
                                Default = "None",
                                Name = "Preview Dropdown",
                                Content = {},
                                Risky = false,
                                Flag = Library.NewFlag(),
                                Callback = function() end
                            }, Options or {})
                            --
                            local Dropdown = Library:Dropdown({
                                Default = Options.Default,
                                Name = Options.Name,
                                Content = Options.Content,
                                MainUI = MainWindowOutline,
                                TabUI = NavigationMain,
                                Risky = Options.Risky,
                                Flag = Options.Flag,
                                Callback = Options.Callback,
                                Parent = self.Elements.ContentHolder
                            })
                            --
                            return Dropdown
                        end
                        --
                        function Sections:MultiBox(Options)
                            Options = Library:Validate({
                                Default = "None",
                                Name = "Preview MultiBox",
                                Content = {},
                                Risky = false,
                                Flag = Library.NewFlag(),
                                Callback = function() end
                            }, Options or {})
                            --
                            local MultiBox = Library:MultiBox({
                                Default = Options.Default,
                                Name = Options.Name,
                                MainUI = MainWindowOutline,
                                TabUI = NavigationMain,
                                Content = Options.Content,
                                Risky = Options.Risky,
                                Parent = self.Elements.ContentHolder,
                                Flag = Options.Flag,
                                Callback = Options.Callback
                            })
                            --
                            return MultiBox
                        end
                        --
                        return WindowTab
                    end
                    --
                    return Window
                end
            end
            --
            if Options.PlayerList then
                local PlayerList = {
                    CurrentPlayer = nil,
                    Open = false,
                    Scrollable = false,
                    PlayerObject = nil,
                    Players = {},
                    UIPaddings = {},
                    CurrentFlags = {},
                    FlagColors = {
                        Self = Color3.fromRGB(90, 0, 180),
                        Friend = Color3.fromRGB(90, 180, 0),
                        Enemy = Color3.fromRGB(180, 0, 0),
                        Priority = Color3.fromRGB(0, 180, 180),
                    }
                }
                --
                local Window = NavigationIcon.GUI
                local FlagDropdown
                --
                local MainWindowOutline_1 = Library:CreateObject("Frame", {
                    Name = "MainWindowOutline_1",
                    Position = UDim2.new(0, 0, 0, 0),
                    BorderColor3 = Color3.fromRGB(0, 0, 0),
                    Size = UDim2.new(0, 525, 0, 443),
                    BorderSizePixel = 0,
                    BackgroundColor3 = Library.Theme.Default.Outline,
                    Visible = false,
                    ZIndex = 6,
                    Parent = ScreenGui
                })
                --
                Library:AddTheme(MainWindowOutline_1, {
                    BackgroundColor3 = "Outline",
                })
                --
                local DropShadowHolder = Library:CreateObject("Frame", {
                    BackgroundTransparency = 1,
                    Name = "DropShadowHolder",
                    BorderSizePixel = 0,
                    Size = MainWindowOutline_1.Size,
                    Visible = false,
                    ZIndex = 5,
                    Parent = ScreenGui
                })
                --
                local DropShadow = Library:CreateObject("ImageLabel", {
                    ImageColor3 = Library.Theme.Default.Glow,
                    ScaleType = Enum.ScaleType.Slice,
                    ImageTransparency = 0.5,
                    Name = "DropShadow",
                    AnchorPoint = Vector2.new(0.5, 0.5),
                    Image = "rbxassetid://6015897843",
                    BackgroundTransparency = 1,
                    Position = UDim2.new(0.5, 0, 0.5, 0),
                    Size = UDim2.new(1, 30 + (Library.UI.WindowGlowThickness - 1) * (70 - 40) / (100 - 1), 1, 30 + (Library.UI.WindowGlowThickness - 1) * (70 - 40) / (100 - 1)),
                    ZIndex = 0,
                    BorderSizePixel = 0,
                    SliceCenter = Rect.new(Vector2.new(49, 49), Vector2.new(450, 450)),
                    Parent = DropShadowHolder
                })
                --
                Library:AddTheme(DropShadow, {
                    ImageColor3 = "Glow",
                })
                --
                MainWindowOutline_1.Position = UDim2.fromOffset((Viewport.X / 2) - (MainWindowOutline_1.Size.X.Offset / 2), (Viewport.Y / 2) - (MainWindowOutline_1.Size.Y.Offset / 2))
                DropShadowHolder.Position = MainWindowOutline_1.Position
                --
                table.insert(Window, MainWindowOutline_1)
                table.insert(Window, DropShadowHolder)
                --
                local MainWindowInline_1 = Library:CreateObject("Frame", {
                    Name = "MainWindowInline_1",
                    Position = UDim2.new(0, 1, 0, 1),
                    BorderColor3 = Color3.fromRGB(0, 0, 0),
                    Size = UDim2.new(1, -2, 1, -2),
                    BorderSizePixel = 0,
                    BackgroundColor3 = Library.Theme.Default.Accent,
                    Parent = MainWindowOutline_1
                })
                --
                Library:AddTheme(MainWindowInline_1, {
                    BackgroundColor3 = "Accent",
                })
                --
                local MainWindowDarkContrast_1 = Library:CreateObject("Frame", {
                    Name = "MainWindowDarkContrast_1",
                    Position = UDim2.new(0, 1, 0, 1),
                    BorderColor3 = Color3.fromRGB(0, 0, 0),
                    Size = UDim2.new(1, -2, 1, -2),
                    BorderSizePixel = 0,
                    BackgroundColor3 = Library.Theme.Default.LightContrast,
                    Parent = MainWindowInline_1
                })
                --
                Library:AddTheme(MainWindowDarkContrast_1, {
                    BackgroundColor3 = "LightContrast",
                })
                --
                local MainWindowHolder_1 = Library:CreateObject("Frame", {
                    Name = "MainWindowHolder_1",
                    BackgroundTransparency = 1,
                    Position = UDim2.new(0, 1, 0, 2),
                    BorderColor3 = Color3.fromRGB(0, 0, 0),
                    Size = UDim2.new(1, -2, 1, -5),
                    BorderSizePixel = 0,
                    BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                    Parent = MainWindowDarkContrast_1
                })
                --
                local UIPadding_36 = Library:CreateObject("UIPadding", {
                    PaddingLeft = UDim.new(0, 6),
                    Parent = MainWindowHolder_1
                })
                --
                local HolderOutline_1 = Library:CreateObject("Frame", {
                    Name = "HolderOutline_1",
                    Position = UDim2.new(0, -3, 0, 16),
                    BorderColor3 = Color3.fromRGB(0, 0, 0),
                    Size = UDim2.new(1, 0, 1, -17),
                    BorderSizePixel = 0,
                    BackgroundColor3 = Library.Theme.Default.Inline,
                    Parent = MainWindowHolder_1
                })
                --
                Library:AddTheme(HolderOutline_1, {
                    BackgroundColor3 = "Inline",
                })
                --
                local HolderInline_1 = Library:CreateObject("Frame", {
                    Name = "HolderInline_1",
                    Position = UDim2.new(0, 1, 0, 1),
                    BorderColor3 = Color3.fromRGB(0, 0, 0),
                    Size = UDim2.new(1, -2, 1, -2),
                    BorderSizePixel = 0,
                    BackgroundColor3 = Library.Theme.Default.Outline,
                    Parent = HolderOutline_1
                })
                --
                Library:AddTheme(HolderInline_1, {
                    BackgroundColor3 = "Outline",
                })
                --
                local HolderDarkContrast_1 = Library:CreateObject("Frame", {
                    Name = "HolderDarkContrast_1",
                    Position = UDim2.new(0, 1, 0, 1),
                    BorderColor3 = Color3.fromRGB(0, 0, 0),
                    Size = UDim2.new(1, -2, 1, -2),
                    BorderSizePixel = 0,
                    BackgroundColor3 = Library.Theme.Default.DarkContrast,
                    Parent = HolderInline_1
                })
                --
                Library:AddTheme(HolderDarkContrast_1, {
                    BackgroundColor3 = "DarkContrast",
                })
                --
                local UIPadding_37 = Library:CreateObject("UIPadding", {
                    PaddingTop = UDim.new(0, 4),
                    PaddingLeft = UDim.new(0, 4),
                    Parent = HolderDarkContrast_1
                })
                --
                local NavigationOutline_1 = Library:CreateObject("Frame", {
                    Name = "NavigationOutline_1",
                    BorderColor3 = Color3.fromRGB(0, 0, 0),
                    Size = UDim2.new(1, -4, 1, -4),
                    BorderSizePixel = 0,
                    BackgroundColor3 = Library.Theme.Default.Outline,
                    Parent = HolderDarkContrast_1
                })
                --
                Library:AddTheme(NavigationOutline_1, {
                    BackgroundColor3 = "Outline",
                })
                --
                local NavigationInline_1 = Library:CreateObject("Frame", {
                    Name = "NavigationInline_1",
                    Position = UDim2.new(0, 1, 0, 1),
                    BorderColor3 = Color3.fromRGB(0, 0, 0),
                    Size = UDim2.new(1, -2, 1, -2),
                    BorderSizePixel = 0,
                    BackgroundColor3 = Library.Theme.Default.Inline,
                    Parent = NavigationOutline_1
                })
                --
                Library:AddTheme(NavigationInline_1, {
                    BackgroundColor3 = "Inline",
                })
                --
                local NavigationMain_1 = Library:CreateObject("Frame", {
                    Name = "NavigationMain_1",
                    Position = UDim2.new(0, 1, 0, 1),
                    BorderColor3 = Color3.fromRGB(0, 0, 0),
                    Size = UDim2.new(1, -2, 1, -2),
                    BorderSizePixel = 0,
                    BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                    Parent = NavigationInline_1
                })
                --
                local UIPadding_38 = Library:CreateObject("UIPadding", {
                    PaddingTop = UDim.new(0, 4),
                    PaddingBottom = UDim.new(0, 3),
                    PaddingRight = UDim.new(0, 3),
                    PaddingLeft = UDim.new(0, 4),
                    Parent = NavigationMain_1
                })
                --
                local MainHolder = Library:CreateObject("Frame", {
                    Name = "MainHolder",
                    BackgroundTransparency = 1,
                    Size = UDim2.new(1, 0, 1, 3),
                    BorderColor3 = Color3.fromRGB(0, 0, 0),
                    ZIndex = 2,
                    BorderSizePixel = 0,
                    BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                    Parent = NavigationMain_1
                })
                --
                local SectionOutline_3 = Library:CreateObject("Frame", {
                    Name = "SectionOutline_3",
                    BorderColor3 = Color3.fromRGB(0, 0, 0),
                    Size = UDim2.new(1, -1, 1, 0),
                    BorderSizePixel = 0,
                    BackgroundColor3 = Library.Theme.Default.Inline,
                    Parent = MainHolder
                })
                --
                Library:AddTheme(SectionOutline_3, {
                    BackgroundColor3 = "Inline",
                })
                --
                local SectionInline_3 = Library:CreateObject("Frame", {
                    Name = "SectionInline_3",
                    Position = UDim2.new(0, 1, 0, 1),
                    BorderColor3 = Color3.fromRGB(0, 0, 0),
                    Size = UDim2.new(1, -2, 1, -2),
                    BorderSizePixel = 0,
                    BackgroundColor3 = Library.Theme.Default.Outline,
                    Parent = SectionOutline_3
                })
                --
                Library:AddTheme(SectionInline_3, {
                    BackgroundColor3 = "Outline",
                })
                --
                local SectionDarkContrast_3 = Library:CreateObject("Frame", {
                    Name = "SectionDarkContrast_3",
                    Position = UDim2.new(0, 1, 0, 1),
                    BorderColor3 = Color3.fromRGB(0, 0, 0),
                    Size = UDim2.new(1, -2, 1, -2),
                    BorderSizePixel = 0,
                    BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                    Parent = SectionInline_3
                })
                --
                local TopBar_5 = Library:CreateObject("Frame", {
                    Name = "TopBar_5",
                    BackgroundTransparency = 1,
                    Position = UDim2.new(0, 0, 0, 2),
                    BorderColor3 = Color3.fromRGB(0, 0, 0),
                    Size = UDim2.new(1, 0, 0, 20),
                    BorderSizePixel = 0,
                    BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                    Parent = SectionDarkContrast_3
                })
                --
                local SectionName_3 = Library:CreateObject("TextLabel", {
                    FontFace = Library.UI.Font,
                    TextColor3 = Library.Theme.Default.TextColor,
                    BorderColor3 = Color3.fromRGB(0, 0, 0),
                    Text = "Options",
                    TextStrokeTransparency = 0,
                    Name = "SectionName_3",
                    BackgroundTransparency = 1,
                    TextXAlignment = Enum.TextXAlignment.Left,
                    Size = UDim2.new(1, 0, 1, 0),
                    BorderSizePixel = 0,
                    TextSize = Library.UI.FontSize,
                    BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                    Parent = TopBar_5
                })
                --
                Library:AddTheme(SectionName_3, {
                    TextColor3 = "TextColor",
                })
                --
                local UIPadding_39 = Library:CreateObject("UIPadding", {
                    PaddingLeft = UDim.new(0, 5),
                    Parent = SectionName_3
                })
                --
                local UIGradient_29 = Library:CreateObject("UIGradient", {
                    Rotation = 90,
                    Color = ColorSequence.new{
                        ColorSequenceKeypoint.new(0, Library.Theme.Default.LightContrast),
                        ColorSequenceKeypoint.new(1, Library.Theme.Default.DarkContrast)
                    },
                    Parent = SectionDarkContrast_3
                })
                --
                Library:AddTheme(UIGradient_29, {
                    Color = {"LightContrast", "DarkContrast"},
                })
                --
                local SectionItemsHolder_3 = Library:CreateObject("Frame", {
                    Name = "SectionItemsHolder_3",
                    BackgroundTransparency = 1,
                    Position = UDim2.new(0, 0, 0, 22),
                    BorderColor3 = Color3.fromRGB(0, 0, 0),
                    Size = UDim2.new(1, 0, 1, -26),
                    BorderSizePixel = 0,
                    BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                    Parent = SectionDarkContrast_3
                })
                --
                local UIPadding_40 = Library:CreateObject("UIPadding", {
                    PaddingBottom = UDim.new(0, 4),
                    PaddingRight = UDim.new(0, 4),
                    PaddingLeft = UDim.new(0, 4),
                    Parent = SectionItemsHolder_3
                })
                --
                local PlayerListOutline = Library:CreateObject("Frame", {
                    Name = "PlayerListOutline",
                    BorderColor3 = Color3.fromRGB(0, 0, 0),
                    Size = UDim2.new(1, 0, 1, -72),
                    BorderSizePixel = 0,
                    BackgroundColor3 = Library.Theme.Default.Outline,
                    Parent = SectionItemsHolder_3
                })
                --
                Library:AddTheme(PlayerListOutline, {
                    BackgroundColor3 = "Outline",
                })
                --
                local PlayerListInline = Library:CreateObject("Frame", {
                    Name = "PlayerListInline",
                    Position = UDim2.new(0, 1, 0, 1),
                    BorderColor3 = Color3.fromRGB(0, 0, 0),
                    Size = UDim2.new(1, -2, 1, -2),
                    BorderSizePixel = 0,
                    BackgroundColor3 = Library.Theme.Default.Inline,
                    Parent = PlayerListOutline
                })
                --
                Library:AddTheme(PlayerListInline, {
                    BackgroundColor3 = "Inline",
                })
                --
                local PlayerListDarkBack = Library:CreateObject("Frame", {
                    Name = "PlayerListInline",
                    Position = UDim2.new(0, 1, 0, 1),
                    BorderColor3 = Color3.fromRGB(0, 0, 0),
                    Size = UDim2.new(1, -2, 1, -2),
                    BorderSizePixel = 0,
                    BackgroundColor3 = Library.Theme.Default.DarkContrast,
                    Parent = PlayerListInline
                })
                --
                Library:AddTheme(PlayerListDarkBack, {
                    BackgroundColor3 = "DarkContrast",
                })
                --
                local PlayerListMain = Library:CreateObject("Frame", {
                    Name = "PlayerListMain",
                    Position = UDim2.new(0, 1, 0, 1),
                    BorderColor3 = Color3.fromRGB(0, 0, 0),
                    Size = UDim2.new(1, -2, 1, -2),
                    BorderSizePixel = 0,
                    BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                    Parent = PlayerListInline
                })
                --
                local UIGradient_30 = Library:CreateObject("UIGradient", {
                    Rotation = -90,
                    Color = ColorSequence.new{
                        ColorSequenceKeypoint.new(0, Library.Theme.Default.LightContrast),
                        ColorSequenceKeypoint.new(1, Library.Theme.Default.DarkContrast)
                    },
                    Parent = PlayerListMain
                })
                --
                Library:AddTheme(UIGradient_30, {
                    Color = {"LightContrast", "DarkContrast"},
                })
                --
                local PlayerListMain_1 = Library:CreateObject("ScrollingFrame", {
                    ScrollBarImageColor3 = Library.Theme.Default.Accent,
                    MidImage = "rbxassetid://158362264",
                    Active = true,
                    BorderColor3 = Color3.fromRGB(0, 0, 0),
                    ScrollBarThickness = 2,
                    CanvasSize = UDim2.new(0, 0, 0, 0),
                    AutomaticCanvasSize = Enum.AutomaticSize.Y,
                    Name = "PlayerListMain_1",
                    BackgroundTransparency = 1,
                    Size = UDim2.new(1, 0, 1, 0),
                    TopImage = "rbxassetid://158362264",
                    BottomImage = "rbxassetid://158362264",
                    BorderSizePixel = 0,
                    ZIndex = 5,
                    BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                    Parent = PlayerListMain
                })
                --
                Library:AddTheme(PlayerListMain_1, {
                    ScrollBarImageColor3 = "Accent",
                })
                --
                local UIListLayout_5 = Library:CreateObject("UIListLayout", {
                    SortOrder = Enum.SortOrder.LayoutOrder,
                    Parent = PlayerListMain_1
                })
                --
                local PlayerInfo = Library:CreateObject("Frame", {
                    BorderColor3 = Color3.fromRGB(0, 0, 0),
                    AnchorPoint = Vector2.new(0, 1),
                    BackgroundTransparency = 1,
                    Position = UDim2.new(0, 0, 1, 4),
                    Name = "PlayerInfo",
                    Size = UDim2.new(1, 0, 0, 72),
                    BorderSizePixel = 0,
                    BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                    Parent = SectionItemsHolder_3
                })
                --
                local PlayerListIcon = Library:CreateObject("Frame", {
                    Name = "PlayerListIcon",
                    BorderColor3 = Color3.fromRGB(0, 0, 0),
                    Size = UDim2.new(0, 72, 1, 0),
                    BorderSizePixel = 0,
                    BackgroundColor3 = Library.Theme.Default.Outline,
                    Parent = PlayerInfo
                })
                --
                Library:AddTheme(PlayerListIcon, {
                    BackgroundColor3 = "Outline",
                })
                --
                local PlayerListInline_1 = Library:CreateObject("Frame", {
                    Name = "PlayerListInline_1",
                    Position = UDim2.new(0, 1, 0, 1),
                    BorderColor3 = Color3.fromRGB(0, 0, 0),
                    Size = UDim2.new(1, -2, 1, -2),
                    BorderSizePixel = 0,
                    BackgroundColor3 = Library.Theme.Default.Inline,
                    Parent = PlayerListIcon
                })
                --
                Library:AddTheme(PlayerListInline_1, {
                    BackgroundColor3 = "Inline",
                })
                --
                local PlayerListMain_2 = Library:CreateObject("Frame", {
                    Name = "PlayerListMain_2",
                    Position = UDim2.new(0, 1, 0, 1),
                    BorderColor3 = Color3.fromRGB(0, 0, 0),
                    Size = UDim2.new(1, -2, 1, -2),
                    BorderSizePixel = 0,
                    BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                    Parent = PlayerListInline_1
                })
                --
                local UIGradient_31 = Library:CreateObject("UIGradient", {
                    Rotation = 90,
                    Color = ColorSequence.new{
                        ColorSequenceKeypoint.new(0, Library.Theme.Default.LightContrast),
                        ColorSequenceKeypoint.new(1, Library.Theme.Default.DarkContrast)
                    },
                    Parent = PlayerListMain_2
                })
                --
                Library:AddTheme(UIGradient_31, {
                    Color = {"LightContrast", "DarkContrast"},
                })
                --
                local UnknownText = Library:CreateObject("TextLabel", {
                    FontFace = Library.UI.Font,
                    TextColor3 = Library.Theme.Default.TextColor,
                    BorderColor3 = Color3.fromRGB(0, 0, 0),
                    Text = "..?",
                    TextStrokeTransparency = 0,
                    Name = "PlayerName",
                    BackgroundTransparency = 1,
                    Size = UDim2.new(1, 0, 1, 0),
                    BorderSizePixel = 0,
                    TextSize = 25,
                    BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                    Visible = true,
                    Parent = PlayerListMain_2
                })
                --
                Library:AddTheme(UnknownText, {
                    TextColor3 = "TextColor",
                })
                --
                local PlayerIcon = Library:CreateObject("ImageLabel", {
                    BackgroundTransparency = 1,
                    Name = "PlayerIcon",
                    BorderColor3 = Color3.fromRGB(0, 0, 0),
                    Size = UDim2.new(1, 0, 1, 0),
                    BorderSizePixel = 0,
                    BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                    Parent = PlayerListMain_2
                })
                --
                local PlayerInfoText = Library:CreateObject("TextLabel", {
                    FontFace = Library.UI.Font,
                    TextColor3 = Library.Theme.Default.TextColor,
                    BorderColor3 = Color3.fromRGB(0, 0, 0),
                    Text = "Unknown Player",
                    Name = "PlayerInfoText",
                    TextStrokeTransparency = 0,
                    Size = UDim2.new(0, 200, 1, 0),
                    Position = UDim2.new(0, 72, 0, 0),
                    BackgroundTransparency = 1,
                    TextXAlignment = Enum.TextXAlignment.Left,
                    BorderSizePixel = 0,
                    TextYAlignment = Enum.TextYAlignment.Top,
                    TextSize = Library.UI.FontSize,
                    BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                    Parent = PlayerInfo
                })
                --
                Library:AddTheme(PlayerInfoText, {
                    TextColor3 = "TextColor",
                })
                --
                local UIPadding_44 = Library:CreateObject("UIPadding", {
                    PaddingLeft = UDim.new(0, 4),
                    Parent = PlayerInfoText
                })
                --
                local AccentBar_3 = Library:CreateObject("Frame", {
                    Name = "AccentBar_3",
                    BorderColor3 = Color3.fromRGB(0, 0, 0),
                    Size = UDim2.new(1, 0, 0, 2),
                    BorderSizePixel = 0,
                    BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                    Parent = SectionDarkContrast_3
                })
                --
                local UIGradient_33142 = Library:CreateObject("UIGradient", {
                    Rotation = 90,
                    Color = ColorSequence.new{
                        ColorSequenceKeypoint.new(0, Library.Theme.Default.Accent),
                        ColorSequenceKeypoint.new(1, Library.Theme.Default.SecondAccent)
                    },
                    Parent = AccentBar_3
                })
                --
                Library:AddTheme(UIGradient_33142, {
                    Color = {"Accent", "SecondAccent"}
                })
                --
                local UIPadding_45 = Library:CreateObject("UIPadding", {
                    PaddingBottom = UDim.new(0, 4),
                    Parent = MainHolder
                })
                --
                local UIListLayout_6 = Library:CreateObject("UIListLayout", {
                    Padding = UDim.new(0, 4),
                    SortOrder = Enum.SortOrder.LayoutOrder,
                    Parent = MainHolder
                })
                --
                local HolderGradient_2 = Library:CreateObject("UIGradient", {
                    Rotation = 90,
                    Name = "HolderGradient_2",
                    Color = ColorSequence.new{
                        ColorSequenceKeypoint.new(0, Library.Theme.Default.LightContrast),
                        ColorSequenceKeypoint.new(1, Library.Theme.Default.DarkContrast)
                    },
                    Parent = NavigationMain_1
                })
                --
                Library:AddTheme(HolderGradient_2, {
                    Color = {"LightContrast", "DarkContrast"},
                })
                --
                local TopBar_6 = Library:CreateObject("Frame", {
                    BackgroundTransparency = 1,
                    Name = "TopBar_6",
                    BorderColor3 = Color3.fromRGB(0, 0, 0),
                    Size = UDim2.new(1, -4, 0, 20),
                    BorderSizePixel = 0,
                    BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                    Parent = MainWindowHolder_1
                })
                --
                local Title_1 = Library:CreateObject("TextLabel", {
                    FontFace = Library.UI.Font,
                    TextColor3 = Library.Theme.Default.TextColor,
                    BorderColor3 = Color3.fromRGB(0, 0, 0),
                    Text = "Players",
                    TextStrokeTransparency = 0,
                    Name = "Title_1",
                    BackgroundTransparency = 1,
                    TextXAlignment = Enum.TextXAlignment.Left,
                    Size = UDim2.new(0.5, 0, 1, 0),
                    BorderSizePixel = 0,
                    TextSize = Library.UI.FontSize,
                    BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                    Parent = TopBar_6
                })
                --
                Library:AddTheme(Title_1, {
                    TextColor3 = "TextColor",
                })
                --
                local UIPadding_46 = Library:CreateObject("UIPadding", {
                    PaddingLeft = UDim.new(0, -2),
                    PaddingBottom = UDim.new(0, 4),
                    PaddingTop = UDim.new(0, -3),
                    Parent = Title_1
                })
                --
                local CloseButton = Library:CreateObject("TextButton", {
                    FontFace = Library.UI.Font,
                    TextColor3 = Library.Theme.Default.TextColor,
                    BorderColor3 = Color3.fromRGB(0, 0, 0),
                    Name = "CloseButton",
                    Size = UDim2.new(0, 10, 0, 10),
                    BackgroundTransparency = 1,
                    TextStrokeTransparency = 0,
                    Position = UDim2.new(1, -6, 0, 2),
                    BorderSizePixel = 0,
                    ZIndex = 5,
                    Text = "x",
                    TextTransparency = 0,
                    TextSize = Library.UI.FontSize,
                    BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                    Parent = TopBar_6
                })
                --
                Library:AddTheme(CloseButton, {
                    TextColor3 = "TextColor",
                })
                --
                local UIPadding_452526 = Library:CreateObject("UIPadding", {
                    PaddingBottom = UDim.new(0, 2),
                    PaddingTop = UDim.new(0, -2),
                    Parent = CloseButton
                })
                --
                local DraggingButton = Library:CreateObject("TextButton", {
                    FontFace = Library.UI.Font,
                    TextColor3 = Color3.fromRGB(0, 0, 0),
                    BorderColor3 = Color3.fromRGB(0, 0, 0),
                    Name = "DraggingButton",
                    Size = UDim2.new(1, 0, 1, 0),
                    BackgroundTransparency = 1,
                    Position = UDim2.new(0, 0, 0, 0),
                    BorderSizePixel = 0,
                    TextTransparency = 1,
                    TextSize = Library.UI.FontSize,
                    BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                    Parent = TopBar_6
                })
                --
                local ResizeButton_1 = Library:CreateObject("TextButton", {
                    FontFace = Library.UI.Font,
                    TextColor3 = Color3.fromRGB(0, 0, 0),
                    BorderColor3 = Color3.fromRGB(0, 0, 0),
                    Name = "ResizeButton_1",
                    AnchorPoint = Vector2.new(1, 1),
                    Size = UDim2.new(0, 20, 0, 20),
                    BackgroundTransparency = 1,
                    Position = UDim2.new(1, 0, 1, 0),
                    BorderSizePixel = 0,
                    TextTransparency = 1,
                    TextSize = Library.UI.FontSize,
                    BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                    Parent = MainWindowHolder_1
                })
                --
                function Library:GetFlag(Player)
                    if Player == nil then return end
                    --
                    return PlayerList.CurrentFlags[Player.Name]
                end
                --
                function Library:SetFlag(Player)
                    if FlagDropdown then

                    end
                end
                --
                do -- Functions
                    function Window:AddPlayer(Player)
                        if not (Player or Player:IsA("Player")) then return end
                        --
                        local PlayerItem = {
                            Active = false,
                            Hovering = false,
                            PlayerName = Player.Name
                        }
                        --
                        local FlagOptionHolder = Library:CreateObject("Frame", {
                            Name = "FlagOptionHolder",
                            BackgroundTransparency = 1,
                            Position = UDim2.new(1, -200, 0, 0),
                            BorderColor3 = Color3.fromRGB(0, 0, 0),
                            Size = UDim2.new(0, 200, 1, 0),
                            BorderSizePixel = 0,
                            BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                            Visible = false,
                            Parent = PlayerInfo
                        })
                        --
                        PlayerList.Players[Player] = FlagOptionHolder
                        --
                        local UIListLayout_23 = Library:CreateObject("UIListLayout", {
                            Padding = UDim.new(0, 2),
                            SortOrder = Enum.SortOrder.LayoutOrder,
                            Parent = FlagOptionHolder
                        })
                        --
                        local PlayerTemplate = Library:CreateObject("Frame", {
                            BackgroundTransparency = 1,
                            Name = Player.Name,
                            BorderColor3 = Color3.fromRGB(0, 0, 0),
                            Size = UDim2.new(1, 0, 0, 23),
                            BorderSizePixel = 0,
                            BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                            Parent = PlayerListMain_1
                        })
                        --
                        local ClickDetection_3 = Library:CreateObject("TextButton", {
                            FontFace = Library.UI.Font,
                            TextColor3 = Color3.fromRGB(0, 0, 0),
                            BorderColor3 = Color3.fromRGB(0, 0, 0),
                            Name = "ClickDetection_3",
                            BackgroundTransparency = 1,
                            Size = UDim2.new(1, 0, 1, 0),
                            BorderSizePixel = 0,
                            TextTransparency = 1,
                            TextSize = Library.UI.FontSize,
                            BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                            Parent = PlayerTemplate
                        })
                        --
                        local BottomBar = Library:CreateObject("Frame", {
                            Name = "BottomBar",
                            Position = UDim2.new(0, 0, 1, 0),
                            BorderColor3 = Color3.fromRGB(0, 0, 0),
                            Size = UDim2.new(1, -4, 0, 1),
                            BorderSizePixel = 0,
                            BackgroundColor3 = Library.Theme.Default.Outline,
                            Parent = PlayerTemplate
                        })
                        --
                        Library:AddTheme(BottomBar, {
                            BackgroundColor3 = "Outline",
                        })
                        --
                        local UIPadding_41 = Library:CreateObject("UIPadding", {
                            PaddingLeft = UDim.new(0, 4),
                            Parent = PlayerTemplate
                        })
                        --
                        local FirstBar = Library:CreateObject("Frame", {
                            AnchorPoint = Vector2.new(0, 0.5),
                            Name = "FirstBar",
                            Position = UDim2.new(0.33000001311302185, 0, 0.5, 0),
                            BorderColor3 = Color3.fromRGB(0, 0, 0),
                            Size = UDim2.new(0, 1, 1, -8),
                            BorderSizePixel = 0,
                            BackgroundColor3 = Library.Theme.Default.Outline,
                            Parent = PlayerTemplate
                        })
                        --
                        Library:AddTheme(FirstBar, {
                            BackgroundColor3 = "Outline",
                        })
                        --
                        local SecondBar = Library:CreateObject("Frame", {
                            AnchorPoint = Vector2.new(0, 0.5),
                            Name = "SecondBar",
                            Position = UDim2.new(0.6600000262260437, 0, 0.5, 0),
                            BorderColor3 = Color3.fromRGB(0, 0, 0),
                            Size = UDim2.new(0, 1, 1, -8),
                            BorderSizePixel = 0,
                            BackgroundColor3 = Library.Theme.Default.Outline,
                            Parent = PlayerTemplate
                        })
                        --
                        Library:AddTheme(SecondBar, {
                            BackgroundColor3 = "Outline",
                        })
                        --
                        local PlayerFlag = Library:CreateObject("TextLabel", {
                            FontFace = Library.UI.Font,
                            TextColor3 = Player == Players.LocalPlayer and Color3.fromRGB(90, 0, 180) or Library.Theme.Default.TextColor,
                            BorderColor3 = Color3.fromRGB(0, 0, 0),
                            Text = Player == Players.LocalPlayer and "Self" or "None",
                            TextStrokeTransparency = 0,
                            Name = "PlayerFlag",
                            Size = UDim2.new(0.33000001311302185, 0, 1, 0),
                            BackgroundTransparency = 1,
                            TextXAlignment = Enum.TextXAlignment.Left,
                            Position = UDim2.new(0.6600000262260437, 0, 0, 0),
                            BorderSizePixel = 0,
                            TextSize = Library.UI.FontSize,
                            BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                            Parent = PlayerTemplate
                        })
                        --
                        if Player ~= Players.LocalPlayer then
                            Library:AddTheme(PlayerFlag, {
                                TextColor3 = "TextColor",
                            })
                        end
                        --
                        FlagDropdown = Library:Dropdown({
                            Default = "None",
                            Name = "Status",
                            Content = {"None", "Friend", "Enemy", "Priority"},
                            Risky = false,
                            MainUI = MainWindowOutline_1,
                            Flag = Player.Name .. "_Status",
                            Callback = function(Flag)
                                PlayerList.CurrentFlags[Player.Name] = Player ~= Players.LocalPlayer and Flag or "Self"
                                PlayerFlag.Text = Player ~= Players.LocalPlayer and Flag or "Self"
                                PlayerFlag.TextColor3 = Player ~= Players.LocalPlayer and (PlayerList.FlagColors[Flag] and PlayerList.FlagColors[Flag] or Library.Theme.Default.TextColor) or Color3.fromRGB(90, 0, 180)
                                --
                                if Flag ~= "None" then
                                    Library.Theme.Objects[PlayerFlag] = nil
                                end
                            end,
                            Parent = FlagOptionHolder
                        })
                        --
                        local UIPadding_42 = Library:CreateObject("UIPadding", {
                            PaddingLeft = UDim.new(0, 7),
                            Parent = PlayerFlag
                        })
                        --
                        local PlayerName = Library:CreateObject("TextLabel", {
                            FontFace = Library.UI.Font,
                            TextColor3 = Library.Theme.Default.TextColor,
                            BorderColor3 = Color3.fromRGB(0, 0, 0),
                            TextStrokeTransparency = 0,
                            Name = "PlayerName",
                            BackgroundTransparency = 1,
                            TextXAlignment = Enum.TextXAlignment.Left,
                            Size = UDim2.new(0.33, 0, 1, 0),
                            BorderSizePixel = 0,
                            TextSize = Library.UI.FontSize,
                            BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                            Parent = PlayerTemplate
                        })
                        --
                        Library:AddTheme(PlayerName, {
                            TextColor3 = "TextColor",
                        })
                        --
                        PlayerName.Text = Library:ClampString(Player.Name, PlayerName.AbsoluteSize.X)
                        --
                        Library:Connection(PlayerName:GetPropertyChangedSignal("AbsoluteSize"), function()
                            PlayerName.Text = Library:ClampString(Player.Name, PlayerName.AbsoluteSize.X)
                        end)
                        --
                        local PlayerTeam = Library:CreateObject("TextLabel", {
                            FontFace = Library.UI.Font,
                            TextColor3 = Library.Theme.Default.TextColor,
                            BorderColor3 = Color3.fromRGB(0, 0, 0),
                            Text = Player.Team and tostring(Player.Team) or "None",
                            TextStrokeTransparency = 0,
                            Name = "PlayerTeam",
                            Size = UDim2.new(0.33000001311302185, 0, 1, 0),
                            BackgroundTransparency = 1,
                            TextXAlignment = Enum.TextXAlignment.Left,
                            Position = UDim2.new(0.33000001311302185, 0, 0, 0),
                            BorderSizePixel = 0,
                            TextSize = Library.UI.FontSize,
                            BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                            Parent = PlayerTemplate
                        })
                        --
                        Library:AddTheme(PlayerTeam, {
                            TextColor3 = "TextColor",
                        })
                        --
                        local UIPadding_43 = Library:CreateObject("UIPadding", {
                            PaddingLeft = UDim.new(0, 7),
                            Parent = PlayerTeam
                        })
                        --
                        PlayerList.UIPaddings[#PlayerList.UIPaddings + 1] = {UIPadding_42, UIPadding_43}
                        --
                        do -- Functions
                            local Button = Library:Button({
                                Name = "Teleport",
                                Confirmation = true,
                                Risky = false,
                                Parent = FlagOptionHolder,
                                Callback = function()
                                    local CurrentPlayer = Players:FindFirstChild(PlayerList.PlayerObject)
                                    local HumanoidRootPart = CurrentPlayer and CurrentPlayer.Character:FindFirstChild("HumanoidRootPart")
                                    local Position = HumanoidRootPart and HumanoidRootPart.CFrame
                                    --
                                    Library:TeleportClient(Position)
                                end
                            })
                            --
                            function Window:UpdatePlayerInfo()
                                if PlayerList.CurrentPlayer ~= nil then
                                    local CurrentPlayer = Players:FindFirstChild(PlayerList.CurrentPlayer.PlayerName)
                                    --
                                    if CurrentPlayer then
                                        local Humanoid = CurrentPlayer.Character:FindFirstChildWhichIsA("Humanoid")
                                        --
                                        PlayerInfoText.Text = ("Name : %s\nDisplay : %s\nUser Id : %s\nHealth : %s/%s"):format(CurrentPlayer.Name, CurrentPlayer.DisplayName, CurrentPlayer.UserId, math.floor(Humanoid.Health), math.floor(Humanoid.MaxHealth))
                                        --
                                        local PlayerIconUrl = Players:GetUserThumbnailAsync(CurrentPlayer.UserId, Enum.ThumbnailType.HeadShot, Enum.ThumbnailSize.Size420x420)
                                        --
                                        PlayerIcon.Image = PlayerIconUrl
                                    end
                                end
                            end
                            --
                            function PlayerItem:Activate()
                                if not PlayerItem.Active then
                                    if PlayerList.CurrentPlayer ~= nil then
                                        PlayerList.CurrentPlayer:Deactivate()
                                    end
                                    --
                                    PlayerItem.Active = true
                                    --
                                    Library:TweenObject(PlayerName, TweenInfo.new(Library.UI.TweenSpeed, Library.UI.TweenEasingStyle, Enum.EasingDirection.InOut), {TextColor3 = Library.Theme.Default.Accent})
                                    --
                                    Library:AddTheme(PlayerName, {
                                        TextColor3 = "Accent",
                                    })
                                    --
                                    if PlayerFlag.Text == "None" and PlayerFlag.TextColor3 == Library.Theme.Default.TextColor then
                                        Library:TweenObject(PlayerFlag, TweenInfo.new(Library.UI.TweenSpeed, Library.UI.TweenEasingStyle, Enum.EasingDirection.InOut), {TextColor3 = Library.Theme.Default.TextColor})
                                        --
                                        Library:AddTheme(PlayerFlag, {
                                            TextColor3 = "TextColor",
                                        })
                                    end
                                    --
                                    Library:TweenObject(PlayerTeam, TweenInfo.new(Library.UI.TweenSpeed, Library.UI.TweenEasingStyle, Enum.EasingDirection.InOut), {TextColor3 = Library.Theme.Default.TextColor})
                                    --
                                    Library:AddTheme(PlayerTeam, {
                                        TextColor3 = "TextColor",
                                    })
                                    --
                                    PlayerList.CurrentPlayer = PlayerItem
                                    PlayerList.PlayerObject = PlayerName.Text
                                    UnknownText.Visible = false
                                    FlagOptionHolder.Visible = Player ~= Players.LocalPlayer and true or false
                                    Window:UpdatePlayerInfo()
                                end
                            end
                            --
                            function PlayerItem:Deactivate()
                                if PlayerItem.Active then
                                    PlayerItem.Active = false
                                    PlayerItem.Hovering = false
                                    --
                                    Library:TweenObject(PlayerName, TweenInfo.new(Library.UI.TweenSpeed, Library.UI.TweenEasingStyle, Enum.EasingDirection.InOut), {TextColor3 = Library.Theme.Default.TextColor})
                                    --
                                    Library:AddTheme(PlayerName, {
                                        TextColor3 = "TextColor",
                                    })
                                    --
                                    if PlayerFlag.Text == "None" and PlayerFlag.TextColor3 == Library.Theme.Default.TextColor then
                                        Library:TweenObject(PlayerFlag, TweenInfo.new(Library.UI.TweenSpeed, Library.UI.TweenEasingStyle, Enum.EasingDirection.InOut), {TextColor3 = Library.Theme.Default.TextColor})
                                        --
                                        Library:AddTheme(PlayerFlag, {
                                            TextColor3 = "TextColor",
                                        })
                                    end
                                    --
                                    Library:TweenObject(PlayerTeam, TweenInfo.new(Library.UI.TweenSpeed, Library.UI.TweenEasingStyle, Enum.EasingDirection.InOut), {TextColor3 = Library.Theme.Default.TextColor})
                                    --
                                    Library:AddTheme(PlayerTeam, {
                                        TextColor3 = "TextColor",
                                    })
                                    --
                                    FlagOptionHolder.Visible = false
                                end
                            end
                            --
                            if PlayerListMain_1.AbsoluteCanvasSize.Y > PlayerListMain_1.AbsoluteSize.Y and not PlayerList.Scrollable then
                                PlayerListMain_1.Size = UDim2.new(PlayerListMain_1.Size.X.Scale, PlayerListMain_1.Size.X.Offset + 3, PlayerListMain_1.Size.Y.Scale, PlayerListMain_1.Size.Y.Offset)
                                PlayerListMain.Size = UDim2.new(PlayerListMain.Size.X.Scale, PlayerListMain.Size.X.Offset - 4, PlayerListMain.Size.Y.Scale, PlayerListMain.Size.Y.Offset)
                                UIPadding_43.PaddingLeft = UDim.new(0, 6)
                                UIPadding_42.PaddingLeft = UDim.new(0, 6)
                                --
                                PlayerList.Scrollable = true
                            end
                        end
                        --
                        do -- Connections
                            Library:Connection(ClickDetection_3.MouseButton1Click, function()
                                PlayerItem:Activate()
                            end)
                        end
                    end
                    --
                    function Window:RemovePlayer(Player)
                        for Index, Value in PlayerListMain_1:GetChildren() do
                            if Value:IsA("Frame") and Value.Name == Player.Name then
                                Value:Destroy()
                                --
                                if PlayerListMain_1.AbsoluteCanvasSize.Y == PlayerListMain_1.AbsoluteSize.Y and PlayerList.Scrollable then
                                    PlayerListMain_1.Size = UDim2.new(PlayerListMain_1.Size.X.Scale, PlayerListMain_1.Size.X.Offset - 3, PlayerListMain_1.Size.Y.Scale, PlayerListMain_1.Size.Y.Offset)
                                    PlayerListMain.Size = UDim2.new(PlayerListMain.Size.X.Scale, PlayerListMain.Size.X.Offset + 4, PlayerListMain.Size.Y.Scale, PlayerListMain.Size.Y.Offset)
                                    --
                                    for _, Padding in PlayerList.UIPaddings do
                                        local First = Padding[1]
                                        local Second = Padding[2]
                                        --
                                        First.PaddingLeft = UDim.new(0, 7)
                                        Second.PaddingLeft = UDim.new(0, 7)
                                    end
                                    --
                                    PlayerList.Scrollable = false
                                end
                            end
                        end
                    end
                    --
                    Library:Connection(MainWindowOutline_1:GetPropertyChangedSignal("AbsoluteSize"), function()
                        if PlayerListMain_1.AbsoluteCanvasSize.Y == PlayerListMain_1.AbsoluteSize.Y and PlayerList.Scrollable then
                            PlayerListMain_1.Size = UDim2.new(PlayerListMain_1.Size.X.Scale, PlayerListMain_1.Size.X.Offset - 3, PlayerListMain_1.Size.Y.Scale, PlayerListMain_1.Size.Y.Offset)
                            PlayerListMain.Size = UDim2.new(PlayerListMain.Size.X.Scale, PlayerListMain.Size.X.Offset + 4, PlayerListMain.Size.Y.Scale, PlayerListMain.Size.Y.Offset)
                            --
                            for _, Padding in PlayerList.UIPaddings do
                                local First = Padding[1]
                                local Second = Padding[2]
                                --
                                First.PaddingLeft = UDim.new(0, 7)
                                Second.PaddingLeft = UDim.new(0, 7)
                            end
                            --
                            PlayerList.Scrollable = false
                        end
                        --
                        if PlayerListMain_1.AbsoluteCanvasSize.Y > PlayerListMain_1.AbsoluteSize.Y and not PlayerList.Scrollable then
                            PlayerListMain_1.Size = UDim2.new(PlayerListMain_1.Size.X.Scale, PlayerListMain_1.Size.X.Offset + 3, PlayerListMain_1.Size.Y.Scale, PlayerListMain_1.Size.Y.Offset)
                            PlayerListMain.Size = UDim2.new(PlayerListMain.Size.X.Scale, PlayerListMain.Size.X.Offset - 4, PlayerListMain.Size.Y.Scale, PlayerListMain.Size.Y.Offset)
                            --
                            for _, Padding in PlayerList.UIPaddings do
                                local First = Padding[1]
                                local Second = Padding[2]
                                --
                                First.PaddingLeft = UDim.new(0, 6)
                                Second.PaddingLeft = UDim.new(0, 6)
                            end
                            --
                            PlayerList.Scrollable = true
                        end
                    end)
                    --
                    Library:Draggable(MainWindowOutline_1, DraggingButton, DropShadowHolder)
                    Library:Resizable(MainWindowOutline_1, ResizeButton_1, MainWindowOutline_1.Size - UDim2.new(0, 50, 0, 100), UDim2.new(0, 680, 0, 680), DropShadowHolder)
                end
                --
                do -- Connections
                    Library:Connection(CloseButton.MouseButton1Click, NavigationIcon.Toggle)
                    --
                    for _, Player in Players:GetPlayers() do
                        Window:AddPlayer(Player)
                    end
                    --
                    Library:Connection(Players.PlayerAdded, function(Player)
                        Window:AddPlayer(Player)
                    end)
                    --
                    Library:Connection(Players.PlayerRemoving, function(Player)
                        Window:RemovePlayer(Player)
                    end)
                end
                --
                return Window
            end
            --
            if Options.Configs then
                local Configs = {
                    CurrentConfig = nil,
                    Scrollable = false,
                }
                --
                local Window = NavigationIcon.GUI
                --
                local MainWindowOutline = Library:CreateObject("Frame", {
                    Name = "MainWindowOutline",
                    Position = UDim2.new(0.5, 0, 0.5, 0),
                    BorderColor3 = Color3.fromRGB(0, 0, 0),
                    Size = UDim2.new(0, 322, 0, 329),
                    BorderSizePixel = 0,
                    BackgroundColor3 = Library.Theme.Default.Outline,
                    Visible = false,
                    ZIndex = 6,
                    Parent = ScreenGui
                })
                --
                Library:AddTheme(MainWindowOutline, {
                    BackgroundColor3 = "Outline",
                })
                --
                local DropShadowHolder = Library:CreateObject("Frame", {
                    BackgroundTransparency = 1,
                    Name = "DropShadowHolder",
                    ZIndex = 5,
                    Visible = false,
                    BorderSizePixel = 0,
                    Size = MainWindowOutline.Size,
                    Parent = ScreenGui
                })
                --
                MainWindowOutline.Position = UDim2.fromOffset((Viewport.X / 2) - (MainWindowOutline.Size.X.Offset / 2), (Viewport.Y / 2) - (MainWindowOutline.Size.Y.Offset / 2))
                DropShadowHolder.Position = MainWindowOutline.Position
                --
                table.insert(Window, MainWindowOutline)
                table.insert(Window, DropShadowHolder)
                --
                local DropShadow = Library:CreateObject("ImageLabel", {
                    ImageColor3 = Library.Theme.Default.Glow,
                    ScaleType = Enum.ScaleType.Slice,
                    ImageTransparency = 0.5,
                    Name = "DropShadow",
                    AnchorPoint = Vector2.new(0.5, 0.5),
                    Image = "rbxassetid://6015897843",
                    BackgroundTransparency = 1,
                    Position = UDim2.new(0.5, 0, 0.5, 0),
                    Size = UDim2.new(1, 30 + (Library.UI.WindowGlowThickness - 1) * (70 - 40) / (100 - 1), 1, 30 + (Library.UI.WindowGlowThickness - 1) * (70 - 40) / (100 - 1)),
                    ZIndex = 0,
                    BorderSizePixel = 0,
                    SliceCenter = Rect.new(Vector2.new(49, 49), Vector2.new(450, 450)),
                    Parent = DropShadowHolder
                })
                --
                Library:AddTheme(DropShadow, {
                    ImageColor3 = "Glow",
                })
                --
                local MainWindowInline = Library:CreateObject("Frame", {
                    Name = "MainWindowInline",
                    Position = UDim2.new(0, 1, 0, 1),
                    BorderColor3 = Color3.fromRGB(0, 0, 0),
                    Size = UDim2.new(1, -2, 1, -2),
                    BorderSizePixel = 0,
                    BackgroundColor3 = Library.Theme.Default.Accent,
                    Parent = MainWindowOutline
                })
                --
                Library:AddTheme(MainWindowInline, {
                    BackgroundColor3 = "Accent",
                })
                --
                local MainWindowDarkContrast = Library:CreateObject("Frame", {
                    Name = "MainWindowDarkContrast",
                    Position = UDim2.new(0, 1, 0, 1),
                    BorderColor3 = Color3.fromRGB(0, 0, 0),
                    Size = UDim2.new(1, -2, 1, -2),
                    BorderSizePixel = 0,
                    BackgroundColor3 = Library.Theme.Default.LightContrast,
                    Parent = MainWindowInline
                })
                --
                Library:AddTheme(MainWindowDarkContrast, {
                    BackgroundColor3 = "LightContrast",
                })
                --
                local MainWindowHolder = Library:CreateObject("Frame", {
                    Name = "MainWindowHolder",
                    BackgroundTransparency = 1,
                    Position = UDim2.new(0, 1, 0, 2),
                    BorderColor3 = Color3.fromRGB(0, 0, 0),
                    Size = UDim2.new(1, -2, 1, -5),
                    BorderSizePixel = 0,
                    BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                    Parent = MainWindowDarkContrast
                })
                --
                local UIPadding = Library:CreateObject("UIPadding", {
                    PaddingLeft = UDim.new(0, 6),
                    Parent = MainWindowHolder
                })
                --
                local HolderOutline = Library:CreateObject("Frame", {
                    Name = "HolderOutline",
                    Position = UDim2.new(0, -3, 0, 16),
                    BorderColor3 = Color3.fromRGB(0, 0, 0),
                    Size = UDim2.new(1, 0, 1, -17),
                    BorderSizePixel = 0,
                    BackgroundColor3 = Library.Theme.Default.Inline,
                    Parent = MainWindowHolder
                })
                --
                Library:AddTheme(HolderOutline, {
                    BackgroundColor3 = "Inline",
                })
                --
                local HolderInline = Library:CreateObject("Frame", {
                    Name = "HolderInline",
                    Position = UDim2.new(0, 1, 0, 1),
                    BorderColor3 = Color3.fromRGB(0, 0, 0),
                    Size = UDim2.new(1, -2, 1, -2),
                    BorderSizePixel = 0,
                    BackgroundColor3 = Library.Theme.Default.Outline,
                    Parent = HolderOutline
                })
                --
                Library:AddTheme(HolderInline, {
                    BackgroundColor3 = "Outline",
                })
                --
                local HolderDarkContrast = Library:CreateObject("Frame", {
                    Name = "HolderDarkContrast",
                    Position = UDim2.new(0, 1, 0, 1),
                    BorderColor3 = Color3.fromRGB(0, 0, 0),
                    Size = UDim2.new(1, -2, 1, -2),
                    BorderSizePixel = 0,
                    BackgroundColor3 = Library.Theme.Default.DarkContrast,
                    Parent = HolderInline
                })
                --
                Library:AddTheme(HolderDarkContrast, {
                    BackgroundColor3 = "DarkContrast",
                })
                --
                local UIPadding_1 = Library:CreateObject("UIPadding", {
                    PaddingTop = UDim.new(0, 4),
                    PaddingLeft = UDim.new(0, 4),
                    Parent = HolderDarkContrast
                })
                --
                local NavigationOutline = Library:CreateObject("Frame", {
                    Name = "NavigationOutline",
                    BorderColor3 = Color3.fromRGB(0, 0, 0),
                    Size = UDim2.new(1, -4, 1, -4),
                    BorderSizePixel = 0,
                    BackgroundColor3 = Library.Theme.Default.Outline,
                    Parent = HolderDarkContrast
                })
                --
                Library:AddTheme(NavigationOutline, {
                    BackgroundColor3 = "Outline",
                })
                --
                local NavigationInline = Library:CreateObject("Frame", {
                    Name = "NavigationInline",
                    Position = UDim2.new(0, 1, 0, 1),
                    BorderColor3 = Color3.fromRGB(0, 0, 0),
                    Size = UDim2.new(1, -2, 1, -2),
                    BorderSizePixel = 0,
                    BackgroundColor3 = Library.Theme.Default.Inline,
                    Parent = NavigationOutline
                })
                --
                Library:AddTheme(NavigationInline, {
                    BackgroundColor3 = "Inline",
                })
                --
                local NavigationMain = Library:CreateObject("Frame", {
                    Name = "NavigationMain",
                    Position = UDim2.new(0, 1, 0, 1),
                    BorderColor3 = Color3.fromRGB(0, 0, 0),
                    Size = UDim2.new(1, -2, 1, -2),
                    BorderSizePixel = 0,
                    BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                    Parent = NavigationInline
                })
                --
                local UIPadding_2 = Library:CreateObject("UIPadding", {
                    PaddingTop = UDim.new(0, 4),
                    PaddingBottom = UDim.new(0, 3),
                    PaddingRight = UDim.new(0, 3),
                    PaddingLeft = UDim.new(0, 4),
                    Parent = NavigationMain
                })
                --
                local MainHolder = Library:CreateObject("Frame", {
                    Name = "MainHolder",
                    BackgroundTransparency = 1,
                    Size = UDim2.new(1, 0, 1, 3),
                    BorderColor3 = Color3.fromRGB(0, 0, 0),
                    ZIndex = 2,
                    BorderSizePixel = 0,
                    BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                    Parent = NavigationMain
                })
                --
                local SectionOutline = Library:CreateObject("Frame", {
                    Name = "SectionOutline",
                    BorderColor3 = Color3.fromRGB(0, 0, 0),
                    Size = UDim2.new(1, -1, 1, 0),
                    BorderSizePixel = 0,
                    BackgroundColor3 = Library.Theme.Default.Inline,
                    Parent = MainHolder
                })
                --
                Library:AddTheme(SectionOutline, {
                    BackgroundColor3 = "Inline",
                })
                --
                local SectionInline = Library:CreateObject("Frame", {
                    Name = "SectionInline",
                    Position = UDim2.new(0, 1, 0, 1),
                    BorderColor3 = Color3.fromRGB(0, 0, 0),
                    Size = UDim2.new(1, -2, 1, -2),
                    BorderSizePixel = 0,
                    BackgroundColor3 = Library.Theme.Default.Outline,
                    Parent = SectionOutline
                })
                --
                Library:AddTheme(SectionInline, {
                    BackgroundColor3 = "Outline",
                })
                --
                local SectionDarkContrast = Library:CreateObject("Frame", {
                    Name = "SectionDarkContrast",
                    Position = UDim2.new(0, 1, 0, 1),
                    BorderColor3 = Color3.fromRGB(0, 0, 0),
                    Size = UDim2.new(1, -2, 1, -2),
                    BorderSizePixel = 0,
                    BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                    Parent = SectionInline
                })
                --
                local TopBar = Library:CreateObject("Frame", {
                    Name = "TopBar",
                    BackgroundTransparency = 1,
                    Position = UDim2.new(0, 0, 0, 2),
                    BorderColor3 = Color3.fromRGB(0, 0, 0),
                    Size = UDim2.new(1, 0, 0, 20),
                    BorderSizePixel = 0,
                    BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                    Parent = SectionDarkContrast
                })
                --
                local SectionName = Library:CreateObject("TextLabel", {
                    FontFace = Library.UI.Font,
                    TextColor3 = Library.Theme.Default.TextColor,
                    BorderColor3 = Color3.fromRGB(0, 0, 0),
                    Text = "Options",
                    TextStrokeTransparency = 0,
                    Name = "SectionName",
                    BackgroundTransparency = 1,
                    TextXAlignment = Enum.TextXAlignment.Left,
                    Size = UDim2.new(1, 0, 1, 0),
                    BorderSizePixel = 0,
                    TextSize = Library.UI.FontSize,
                    BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                    Parent = TopBar
                })
                --
                Library:AddTheme(SectionName, {
                    TextColor3 = "TextColor",
                })
                --
                local UIPadding_3 = Library:CreateObject("UIPadding", {
                    PaddingLeft = UDim.new(0, 5),
                    Parent = SectionName
                })
                --
                local UIGradient = Library:CreateObject("UIGradient", {
                    Rotation = 90,
                    Color = ColorSequence.new{
                        ColorSequenceKeypoint.new(0, Library.Theme.Default.LightContrast),
                        ColorSequenceKeypoint.new(1, Library.Theme.Default.DarkContrast)
                    },
                    Parent = SectionDarkContrast
                })
                --
                Library:AddTheme(UIGradient, {
                    Color = {"LightContrast", "DarkContrast"},
                })
                --
                local SectionItemsHolder = Library:CreateObject("Frame", {
                    Name = "SectionItemsHolder",
                    BackgroundTransparency = 1,
                    Position = UDim2.new(0, 1, 0, 22),
                    BorderColor3 = Color3.fromRGB(0, 0, 0),
                    Size = UDim2.new(1, -2, 1, -24),
                    BorderSizePixel = 0,
                    BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                    Parent = SectionDarkContrast
                })
                --
                local UIPadding_4 = Library:CreateObject("UIPadding", {
                    PaddingBottom = UDim.new(0, 4),
                    PaddingRight = UDim.new(0, 3),
                    PaddingLeft = UDim.new(0, 3),
                    Parent = SectionItemsHolder
                })
                --
                local ConfigurationListOutline = Library:CreateObject("Frame", {
                    Name = "ConfigurationListOutline",
                    BorderColor3 = Color3.fromRGB(0, 0, 0),
                    Size = UDim2.new(1, 0, 1, -82),
                    BorderSizePixel = 0,
                    BackgroundColor3 = Library.Theme.Default.Outline,
                    Parent = SectionItemsHolder
                })
                --
                Library:AddTheme(ConfigurationListOutline, {
                    BackgroundColor3 = "Outline",
                })
                --
                local ConfigurationListInline = Library:CreateObject("Frame", {
                    Name = "ConfigurationListInline",
                    Position = UDim2.new(0, 1, 0, 1),
                    BorderColor3 = Color3.fromRGB(0, 0, 0),
                    Size = UDim2.new(1, -2, 1, -2),
                    BorderSizePixel = 0,
                    BackgroundColor3 = Library.Theme.Default.Inline,
                    Parent = ConfigurationListOutline
                })
                --
                Library:AddTheme(ConfigurationListInline, {
                    BackgroundColor3 = "Inline",
                })
                --
                local ConfigurationDarkBack = Library:CreateObject("Frame", {
                    Name = "ConfigurationDarkBack",
                    Position = UDim2.new(0, 1, 0, 1),
                    BorderColor3 = Color3.fromRGB(0, 0, 0),
                    Size = UDim2.new(1, -2, 1, -2),
                    BorderSizePixel = 0,
                    BackgroundColor3 = Library.Theme.Default.DarkContrast,
                    Parent = ConfigurationListInline
                })
                --
                Library:AddTheme(ConfigurationDarkBack, {
                    BackgroundColor3 = "DarkContrast",
                })
                --
                local ConfigurationListMain = Library:CreateObject("Frame", {
                    Name = "ConfigurationListMain",
                    Position = UDim2.new(0, 1, 0, 1),
                    BorderColor3 = Color3.fromRGB(0, 0, 0),
                    Size = UDim2.new(1, -2, 1, -2),
                    BorderSizePixel = 0,
                    BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                    Parent = ConfigurationListInline
                })
                --
                local UIGradient_1 = Library:CreateObject("UIGradient", {
                    Rotation = -90,
                    Color = ColorSequence.new{
                        ColorSequenceKeypoint.new(0, Library.Theme.Default.LightContrast),
                        ColorSequenceKeypoint.new(1, Library.Theme.Default.DarkContrast)
                    },
                    Parent = ConfigurationListMain
                })
                --
                Library:AddTheme(UIGradient_1, {
                    Color = {"LightContrast", "DarkContrast"},
                })
                --
                local ConfigurationListMainScrolling = Library:CreateObject("ScrollingFrame", {
                    ScrollBarImageColor3 = Library.Theme.Default.Accent,
                    MidImage = "rbxassetid://158362264",
                    Active = true,
                    CanvasSize = UDim2.new(0, 0, 0, 0),
                    AutomaticCanvasSize = Enum.AutomaticSize.Y,
                    BorderColor3 = Color3.fromRGB(0, 0, 0),
                    ScrollBarThickness = 2,
                    Name = "ConfigurationListMainScrolling",
                    BackgroundTransparency = 1,
                    Size = UDim2.new(1, 0, 1, 0),
                    TopImage = "rbxassetid://158362264",
                    BottomImage = "rbxassetid://158362264",
                    BorderSizePixel = 0,
                    BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                    Parent = ConfigurationListMain
                })
                --
                Library:AddTheme(ConfigurationListMainScrolling, {
                    ScrollBarImageColor3 = "Accent",
                })
                --
                local UIListLayout = Library:CreateObject("UIListLayout", {
                    SortOrder = Enum.SortOrder.LayoutOrder,
                    Parent = ConfigurationListMainScrolling
                })
                --
                local ConfigurationButtons = Library:CreateObject("Frame", {
                    BorderColor3 = Color3.fromRGB(0, 0, 0),
                    AnchorPoint = Vector2.new(0, 1),
                    BackgroundTransparency = 1,
                    Position = UDim2.new(0, 0, 1, 4),
                    Name = "ConfigurationButtons",
                    Size = UDim2.new(1, 0, 0, 82),
                    BorderSizePixel = 0,
                    BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                    Parent = SectionItemsHolder
                })
                --
                local AccentBar = Library:CreateObject("Frame", {
                    Name = "AccentBar",
                    BorderColor3 = Color3.fromRGB(0, 0, 0),
                    Size = UDim2.new(1, 0, 0, 2),
                    BorderSizePixel = 0,
                    BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                    Parent = SectionDarkContrast
                })
                --
                local UIGradient_33112 = Library:CreateObject("UIGradient", {
                    Rotation = 90,
                    Color = ColorSequence.new{
                        ColorSequenceKeypoint.new(0, Library.Theme.Default.Accent),
                        ColorSequenceKeypoint.new(1, Library.Theme.Default.SecondAccent)
                    },
                    Parent = AccentBar
                })
                --
                Library:AddTheme(UIGradient_33112, {
                    Color = {"Accent", "SecondAccent"}
                })
                --
                local UIPadding_5 = Library:CreateObject("UIPadding", {
                    PaddingBottom = UDim.new(0, 4),
                    Parent = MainHolder
                })
                --
                local UIListLayout_2 = Library:CreateObject("UIListLayout", {
                    Padding = UDim.new(0, 4),
                    SortOrder = Enum.SortOrder.LayoutOrder,
                    Parent = MainHolder
                })
                --
                local HolderGradient = Library:CreateObject("UIGradient", {
                    Rotation = 90,
                    Name = "HolderGradient",
                    Color = ColorSequence.new{
                        ColorSequenceKeypoint.new(0, Library.Theme.Default.LightContrast),
                        ColorSequenceKeypoint.new(1, Library.Theme.Default.DarkContrast)
                    },
                    Parent = NavigationMain
                })
                --
                Library:AddTheme(HolderGradient, {
                    Color = {"LightContrast", "DarkContrast"},
                })
                --
                local TopBar_1 = Library:CreateObject("Frame", {
                    BackgroundTransparency = 1,
                    Name = "TopBar_1",
                    BorderColor3 = Color3.fromRGB(0, 0, 0),
                    Size = UDim2.new(1, -4, 0, 18),
                    BorderSizePixel = 0,
                    BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                    Parent = MainWindowHolder
                })
                --
                local Title = Library:CreateObject("TextLabel", {
                    FontFace = Library.UI.Font,
                    TextColor3 = Library.Theme.Default.TextColor,
                    BorderColor3 = Color3.fromRGB(0, 0, 0),
                    Text = "Configurations",
                    TextStrokeTransparency = 0,
                    Name = "Title",
                    BackgroundTransparency = 1,
                    TextXAlignment = Enum.TextXAlignment.Left,
                    Size = UDim2.new(0.5, 0, 1, 0),
                    BorderSizePixel = 0,
                    TextSize = Library.UI.FontSize,
                    BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                    Parent = TopBar_1
                })
                --
                Library:AddTheme(Title, {
                    TextColor3 = "TextColor",
                })
                --
                local UIPadding_6 = Library:CreateObject("UIPadding", {
                    PaddingBottom = UDim.new(0, 3),
                    PaddingTop = UDim.new(0, -2),
                    PaddingLeft = UDim.new(0, -2),
                    Parent = Title
                })
                --
                local CloseButton = Library:CreateObject("TextButton", {
                    FontFace = Library.UI.Font,
                    TextColor3 = Library.Theme.Default.TextColor,
                    BorderColor3 = Color3.fromRGB(0, 0, 0),
                    Name = "CloseButton",
                    Size = UDim2.new(0, 10, 0, 10),
                    BackgroundTransparency = 1,
                    TextStrokeTransparency = 0,
                    Position = UDim2.new(1, -6, 0, 2),
                    BorderSizePixel = 0,
                    ZIndex = 5,
                    Text = "x",
                    TextTransparency = 0,
                    TextSize = Library.UI.FontSize,
                    BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                    Parent = TopBar_1
                })
                --
                Library:AddTheme(CloseButton, {
                    TextColor3 = "TextColor",
                })
                --
                local UIPadding_64114 = Library:CreateObject("UIPadding", {
                    PaddingBottom = UDim.new(0, 2),
                    PaddingTop = UDim.new(0, -1),
                    Parent = CloseButton
                })
                --
                local DraggingButton = Library:CreateObject("TextButton", {
                    FontFace = Library.UI.Font,
                    TextColor3 = Color3.fromRGB(0, 0, 0),
                    BorderColor3 = Color3.fromRGB(0, 0, 0),
                    Name = "DraggingButton",
                    Size = UDim2.new(1, 0, 1, 0),
                    BackgroundTransparency = 1,
                    Position = UDim2.new(0, 0, 0, 0),
                    BorderSizePixel = 0,
                    TextTransparency = 1,
                    TextSize = Library.UI.FontSize,
                    BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                    Parent = TopBar_1
                })
                --
                local ResizeButton = Library:CreateObject("TextButton", {
                    FontFace = Library.UI.Font,
                    TextColor3 = Color3.fromRGB(0, 0, 0),
                    BorderColor3 = Color3.fromRGB(0, 0, 0),
                    Name = "ResizeButton",
                    AnchorPoint = Vector2.new(1, 1),
                    Size = UDim2.new(0, 20, 0, 20),
                    BackgroundTransparency = 1,
                    Position = UDim2.new(1, 0, 1, 0),
                    BorderSizePixel = 0,
                    TextTransparency = 1,
                    TextSize = Library.UI.FontSize,
                    BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                    Parent = MainWindowHolder
                })
                --
                local TextBox = Library:TextBox({Parent = ConfigurationButtons, Name = "Config Name", Position = UDim2.new(0, 0, 0, -2), Flag = "ConfigTextBox"})
                --
                local Buttons = {}
                --
                function Window:UpdateButtonSizes()
                    local Count = #Buttons
                    local Padding = 2
                    --
                    for Index, Value in Buttons do
                        if Index <= 2 then
                            Value:UpdateSize(UDim2.new(0.5, -Padding, 0, 17))
                            Value:UpdatePosition(UDim2.new((Index - 1) * 0.5, (Index - 1) * Padding, 0, 19))
                        else
                            Value:UpdateSize(UDim2.new(0.5, -Padding, 0, 17))
                            Value:UpdatePosition(UDim2.new((Index - 3) * 0.5, (Index - 3) * Padding, 0, 40))
                        end
                    end
                end
                --
                for Index, Value in {"Create", "Delete", "Load", "Save"} do
                    Buttons[Index] = Library:Button({
                        Name = Value,
                        Confirmation = true,
                        Risky = false,
                        Size = UDim2.new(1, 0, 0, 19),
                        Parent = ConfigurationButtons,
                        Callback = function() 
                            if Index == 1 then -- Create
                                if Library.Flags["ConfigTextBox"]:Get() ~= "" and not isfile("LuckyHub/Configs/" .. Library.Flags["ConfigTextBox"]:Get() .. ".cfg") then
                                    Window:AddConfig(Library.Flags["ConfigTextBox"]:Get())
                                    --
                                    writefile("LuckyHub/Configs/" .. Library.Flags["ConfigTextBox"]:Get() .. ".cfg", Library:GetConfig())
                                end
                            elseif Index == 2 then -- Delete
                                if Configs.CurrentConfig then
                                    Window:RemoveConfig(Configs.CurrentConfig.Object)
                                    --
                                    delfile("LuckyHub/Configs/" .. Configs.CurrentConfig.Name .. ".cfg")
                                    --
                                    Configs.CurrentConfig = nil
                                end
                            elseif Index == 3 then -- Load
                                if Configs.CurrentConfig then
                                    Library:LoadConfig(readfile("LuckyHub/Configs/" .. Configs.CurrentConfig.Name .. ".cfg"))
                                end
                            elseif Index == 4 then -- Save
                                if Configs.CurrentConfig ~= nil then
                                    writefile("LuckyHub/Configs/" .. Configs.CurrentConfig.Name .. ".cfg", Library:GetConfig())
                                end
                            end
                        end
                    })
                end
                --
                Window:UpdateButtonSizes()
                --
                local UnloadButton = Library:Button({
                    Name = "Unload",
                    Confirmation = true,
                    Risky = false,
                    Position = UDim2.new(0, 0, 1, -21),
                    Parent = ConfigurationButtons,
                    Callback = function() Library:Unload() end
                })
                --
                do -- Functions
                    function Window:RemoveConfig(Config)
                        if ConfigurationListMainScrolling.AbsoluteCanvasSize.Y == ConfigurationListMainScrolling.AbsoluteSize.Y and Configs.Scrollable then
                            ConfigurationListMainScrolling.Size = UDim2.new(ConfigurationListMainScrolling.Size.X.Scale, ConfigurationListMainScrolling.Size.X.Offset - 3, ConfigurationListMainScrolling.Size.Y.Scale, ConfigurationListMainScrolling.Size.Y.Offset)
                            ConfigurationListMain.Size = UDim2.new(ConfigurationListMain.Size.X.Scale, ConfigurationListMain.Size.X.Offset + 4, ConfigurationListMain.Size.Y.Scale, ConfigurationListMain.Size.Y.Offset)
                            --
                            Configs.Scrollable = false
                        end
                        --
                        Config:Destroy()
                    end
                    --
                    function Window:AddConfig(Name)
                        local Item = {
                            Active = false,
                            Hovering = false
                        }
                        --
                        Name = Name:gsub("^/", "")
                        --
                        local ConfigTemplate = Library:CreateObject("Frame", {
                            BackgroundTransparency = 1,
                            Name = "ConfigTemplate",
                            BorderColor3 = Color3.fromRGB(0, 0, 0),
                            Size = UDim2.new(1, 0, 0, 20),
                            BorderSizePixel = 0,
                            BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                            Parent = ConfigurationListMainScrolling
                        })
                        --
                        Item.Object = ConfigTemplate
                        Item.Name = Name
                        --
                        local ClickDetection_3 = Library:CreateObject("TextButton", {
                            FontFace = Library.UI.Font,
                            TextColor3 = Color3.fromRGB(0, 0, 0),
                            BorderColor3 = Color3.fromRGB(0, 0, 0),
                            Name = "ClickDetection_3",
                            BackgroundTransparency = 1,
                            Size = UDim2.new(1, 0, 1, 0),
                            BorderSizePixel = 0,
                            TextTransparency = 1,
                            TextSize = Library.UI.FontSize,
                            BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                            Parent = ConfigTemplate
                        })
                        --
                        local ConfigName = Library:CreateObject("TextLabel", {
                            FontFace = Library.UI.Font,
                            TextColor3 = Library.Theme.Default.TextColor,
                            BorderColor3 = Color3.fromRGB(0, 0, 0),
                            Text = Name,
                            TextStrokeTransparency = 0,
                            BackgroundTransparency = 1,
                            Name = Name,
                            Size = UDim2.new(1, 0, 1, 0),
                            BorderSizePixel = 0,
                            TextSize = Library.UI.FontSize,
                            BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                            Parent = ConfigTemplate
                        })
                        --
                        Library:AddTheme(ConfigName, {
                            TextColor3 = "TextColor",
                        })
                        --
                        do -- Functions
                            function Item:Activate()
                                if not Item.Active then
                                    if Configs.CurrentConfig ~= nil then
                                        Configs.CurrentConfig:Deactivate()
                                    end
                                    --
                                    Item.Active = true
                                    --
                                    Library:TweenObject(ConfigName, TweenInfo.new(Library.UI.TweenSpeed, Library.UI.TweenEasingStyle, Enum.EasingDirection.InOut), {TextColor3 = Library.Theme.Default.Accent})
                                    --
                                    Library:AddTheme(ConfigName, {
                                        TextColor3 = "Accent",
                                    })
                                    --
                                    Configs.CurrentConfig = Item
                                end
                            end
                            --
                            function Item:Deactivate()
                                if Item.Active and Configs.CurrentConfig == Item then
                                    Item.Active = false
                                    Item.Hover = false
                                    --
                                    Library:TweenObject(ConfigName, TweenInfo.new(Library.UI.TweenSpeed, Library.UI.TweenEasingStyle, Enum.EasingDirection.InOut), {TextColor3 = Library.Theme.Default.TextColor})
                                    --
                                    Library:AddTheme(ConfigName, {
                                        TextColor3 = "TextColor",
                                    })
                                    --
                                    Configs.CurrentConfig = nil
                                end
                            end
                        end
                        --
                        do -- Connections
                            Library:Connection(ClickDetection_3.MouseButton1Click, function()
                                Item:Activate()
                            end)
                        end
                        --
                        if ConfigurationListMainScrolling.AbsoluteCanvasSize.Y > ConfigurationListMain.AbsoluteSize.Y and not Configs.Scrollable then
                            ConfigurationListMainScrolling.Size = UDim2.new(ConfigurationListMainScrolling.Size.X.Scale, ConfigurationListMainScrolling.Size.X.Offset + 3, ConfigurationListMainScrolling.Size.Y.Scale, ConfigurationListMainScrolling.Size.Y.Offset)
                            ConfigurationListMain.Size = UDim2.new(ConfigurationListMain.Size.X.Scale, ConfigurationListMain.Size.X.Offset - 4, ConfigurationListMain.Size.Y.Scale, ConfigurationListMain.Size.Y.Offset)
                            --
                            Configs.Scrollable = true
                        end
                    end
                    --
                    Library:Connection(CloseButton.MouseButton1Click, NavigationIcon.Toggle)
                    --
                    Library:Connection(MainWindowOutline:GetPropertyChangedSignal("AbsoluteSize"), function()
                        if ConfigurationListMainScrolling.AbsoluteCanvasSize.Y == ConfigurationListMainScrolling.AbsoluteSize.Y and Configs.Scrollable then
                            ConfigurationListMainScrolling.Size = UDim2.new(ConfigurationListMainScrolling.Size.X.Scale, ConfigurationListMainScrolling.Size.X.Offset - 3, ConfigurationListMainScrolling.Size.Y.Scale, ConfigurationListMainScrolling.Size.Y.Offset)
                            ConfigurationListMain.Size = UDim2.new(ConfigurationListMain.Size.X.Scale, ConfigurationListMain.Size.X.Offset + 4, ConfigurationListMain.Size.Y.Scale, ConfigurationListMain.Size.Y.Offset)
                            --
                            Configs.Scrollable = false
                        end
                        --
                        if ConfigurationListMainScrolling.AbsoluteCanvasSize.Y > ConfigurationListMain.AbsoluteSize.Y and not Configs.Scrollable then
                            ConfigurationListMainScrolling.Size = UDim2.new(ConfigurationListMainScrolling.Size.X.Scale, ConfigurationListMainScrolling.Size.X.Offset + 3, ConfigurationListMainScrolling.Size.Y.Scale, ConfigurationListMainScrolling.Size.Y.Offset)
                            ConfigurationListMain.Size = UDim2.new(ConfigurationListMain.Size.X.Scale, ConfigurationListMain.Size.X.Offset - 4, ConfigurationListMain.Size.Y.Scale, ConfigurationListMain.Size.Y.Offset)
                            --
                            Configs.Scrollable = true
                        end
                    end)
                    --
                    Library:Draggable(MainWindowOutline, DraggingButton, DropShadowHolder)
                    Library:Resizable(MainWindowOutline, ResizeButton, MainWindowOutline.Size - UDim2.new(0, 100, 0, 100), UDim2.new(0, 520, 0, 540), DropShadowHolder)
                end
                --
                for _, File in listfiles("LuckyHub/Configs") do
                    local FileName = File:gsub("\\", "/"):gsub("LuckyHub/Configs/", ""):gsub(".cfg", "")
                    --
                    Window:AddConfig(FileName)
                end
                --
                return Window
            end
            --
            if Options.Settings then
                function NavigationIcon:Window(Options)
                    Options = Library:Validate({
                        Name = "Style",
                        Size = UDim2.new(0, 392, 0, 544),
                    }, Options or {})
                    --
                    local Window = NavigationIcon.GUI
                    local WindowSettings = {
                        SectionSizes = 0,
                    }
                    --
                    local MainWindowOutline = Library:CreateObject("Frame", {
                        Name = "MainWindowOutline_1",
                        Position = UDim2.new(0.5, 0, 0.5, 0),
                        BorderColor3 = Color3.fromRGB(0, 0, 0),
                        Size = Options.Size,
                        BorderSizePixel = 0,
                        BackgroundColor3 = Library.Theme.Default.Outline,
                        Parent = ScreenGui,
                        ZIndex = 6,
                        Visible = false,
                    })
                    --
                    Library:AddTheme(MainWindowOutline, {
                        BackgroundColor3 = "Outline",
                    })
                    --
                    local DropShadowHolder = Library:CreateObject("Frame", {
                        BackgroundTransparency = 1,
                        Name = "DropShadowHolder",
                        ZIndex = 5,
                        BorderSizePixel = 0,
                        Position = MainWindowOutline.Position, 
                        Size = Options.Size,
                        Parent = ScreenGui,
                        Visible = false
                    })
                    --
                    local DropShadow = Library:CreateObject("ImageLabel", {
                        ImageColor3 = Library.Theme.Default.Glow,
                        ScaleType = Enum.ScaleType.Slice,
                        ImageTransparency = 0.5,
                        Name = "DropShadow",
                        AnchorPoint = Vector2.new(0.5, 0.5),
                        Image = "rbxassetid://6015897843",
                        BackgroundTransparency = 1,
                        Position = UDim2.new(0.5, 0, 0.5, 0),
                        Size = UDim2.new(1, 30 + (Library.UI.WindowGlowThickness - 1) * (70 - 40) / (100 - 1), 1, 30 + (Library.UI.WindowGlowThickness - 1) * (70 - 40) / (100 - 1)),
                        ZIndex = 0,
                        BorderSizePixel = 0,
                        SliceCenter = Rect.new(Vector2.new(49, 49), Vector2.new(450, 450)),
                        Parent = DropShadowHolder
                    })
                    --
                    Library:AddTheme(DropShadow, {
                        ImageColor3 = "Glow",
                    })
                    --
                    MainWindowOutline.Position = UDim2.fromOffset((Viewport.X / 2) - (MainWindowOutline.Size.X.Offset / 2), (Viewport.Y / 2) - (MainWindowOutline.Size.Y.Offset / 2))
                    DropShadowHolder.Position = MainWindowOutline.Position
                    --
                    table.insert(Window, MainWindowOutline)
                    table.insert(Window, DropShadowHolder)
                    --
                    local MainWindowInline = Library:CreateObject("Frame", {
                        Name = "MainWindowInline",
                        Position = UDim2.new(0, 1, 0, 1),
                        BorderColor3 = Color3.fromRGB(0, 0, 0),
                        Size = UDim2.new(1, -2, 1, -2),
                        BorderSizePixel = 0,
                        BackgroundColor3 = Library.Theme.Default.Accent,
                        Parent = MainWindowOutline
                    })
                    --
                    Library:AddTheme(MainWindowInline, {
                        BackgroundColor3 = "Accent",
                    })
                    --
                    local MainWindowDarkContrast = Library:CreateObject("Frame", {
                        Name = "MainWindowDarkContrast",
                        Position = UDim2.new(0, 1, 0, 1),
                        BorderColor3 = Color3.fromRGB(0, 0, 0),
                        Size = UDim2.new(1, -2, 1, -2),
                        BorderSizePixel = 0,
                        BackgroundColor3 = Library.Theme.Default.LightContrast,
                        Parent = MainWindowInline
                    })
                    --
                    Library:AddTheme(MainWindowDarkContrast, {
                        BackgroundColor3 = "LightContrast",
                    })
                    --
                    local MainWindowHolder = Library:CreateObject("Frame", {
                        Name = "MainWindowHolder",
                        BackgroundTransparency = 1,
                        Position = UDim2.new(0, 1, 0, 2),
                        BorderColor3 = Color3.fromRGB(0, 0, 0),
                        Size = UDim2.new(1, -2, 1, -5),
                        BorderSizePixel = 0,
                        BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                        Parent = MainWindowDarkContrast
                    })
                    --
                    local UIPadding_2 = Library:CreateObject("UIPadding", {
                        PaddingLeft = UDim.new(0, 6),
                        Parent = MainWindowHolder
                    })
                    --
                    local HolderOutline = Library:CreateObject("Frame", {
                        Name = "HolderOutline",
                        Position = UDim2.new(0, -3, 0, 16),
                        BorderColor3 = Color3.fromRGB(0, 0, 0),
                        Size = UDim2.new(1, 0, 1, -17),
                        BorderSizePixel = 0,
                        BackgroundColor3 = Library.Theme.Default.Inline,
                        Parent = MainWindowHolder
                    })
                    --
                    Library:AddTheme(HolderOutline, {
                        BackgroundColor3 = "Inline",
                    })
                    --
                    local HolderInline = Library:CreateObject("Frame", {
                        Name = "HolderInline",
                        Position = UDim2.new(0, 1, 0, 1),
                        BorderColor3 = Color3.fromRGB(0, 0, 0),
                        Size = UDim2.new(1, -2, 1, -2),
                        BorderSizePixel = 0,
                        BackgroundColor3 = Library.Theme.Default.Outline,
                        Parent = HolderOutline
                    })
                    --
                    Library:AddTheme(HolderInline, {
                        BackgroundColor3 = "Outline",
                    })
                    --
                    local HolderDarkContrast = Library:CreateObject("Frame", {
                        Name = "HolderDarkContrast",
                        Position = UDim2.new(0, 1, 0, 1),
                        BorderColor3 = Color3.fromRGB(0, 0, 0),
                        Size = UDim2.new(1, -2, 1, -2),
                        BorderSizePixel = 0,
                        BackgroundColor3 = Library.Theme.Default.DarkContrast,
                        Parent = HolderInline
                    })
                    --
                    Library:AddTheme(HolderDarkContrast, {
                        BackgroundColor3 = "DarkContrast",
                    })
                    --
                    local NavigationOutline = Library:CreateObject("Frame", {
                        Name = "NavigationOutline",
                        Position = UDim2.new(0, 4, 0, 0),
                        BorderColor3 = Color3.fromRGB(0, 0, 0),
                        Size = UDim2.new(1, -8, 1, -4),
                        BorderSizePixel = 0,
                        BackgroundColor3 = Library.Theme.Default.Outline,
                        Parent = HolderDarkContrast
                    })
                    --
                    Library:AddTheme(NavigationOutline, {
                        BackgroundColor3 = "Outline",
                    })
                    --
                    local NavigationInline_2 = Library:CreateObject("Frame", {
                        Name = "NavigationInline_2",
                        Position = UDim2.new(0, 1, 0, 1),
                        BorderColor3 = Color3.fromRGB(0, 0, 0),
                        Size = UDim2.new(1, -2, 1, -2),
                        BorderSizePixel = 0,
                        BackgroundColor3 = Library.Theme.Default.Inline,
                        Parent = NavigationOutline
                    })
                    --
                    Library:AddTheme(NavigationInline_2, {
                        BackgroundColor3 = "Inline",
                    })
                    --
                    local NavigationMain = Library:CreateObject("Frame", {
                        Name = "NavigationMain",
                        Position = UDim2.new(0, 1, 0, 1),
                        BorderColor3 = Color3.fromRGB(0, 0, 0),
                        Size = UDim2.new(1, -2, 1, -2),
                        BorderSizePixel = 0,
                        BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                        Parent = NavigationInline_2,
                        Visible = true
                    })
                    --
                    local UIListLayout_24 = Library:CreateObject("UIListLayout", {
                        Padding = UDim.new(0, 4),
                        SortOrder = Enum.SortOrder.LayoutOrder,
                        Parent = NavigationMain
                    })
                    --
                    local UIPadding_335 = Library:CreateObject("UIPadding", {
                        PaddingTop = UDim.new(0, 4),
                        PaddingBottom = UDim.new(0, 2),
                        PaddingLeft = UDim.new(0, 4),
                        PaddingRight = UDim.new(0, 3),
                        Parent = NavigationMain
                    })
                    --
                    local HolderGradient2 = Library:CreateObject("UIGradient", {
                        Rotation = 90,
                        Name = "HolderGradient",
                        Color = ColorSequence.new{
                            ColorSequenceKeypoint.new(0, Library.Theme.Default.LightContrast),
                            ColorSequenceKeypoint.new(1, Library.Theme.Default.DarkContrast)
                        },
                        Parent = NavigationMain
                    })
                    --
                    Library:AddTheme(HolderGradient2, {
                        Color = {"LightContrast", "DarkContrast"},
                    })
                    --
                    local UIPadding_33 = Library:CreateObject("UIPadding", {
                        PaddingTop = UDim.new(0, 4),
                        Parent = HolderDarkContrast
                    })
                    --
                    local TopBar_5 = Library:CreateObject("Frame", {
                        BackgroundTransparency = 1,
                        Name = "TopBar_5",
                        BorderColor3 = Color3.fromRGB(0, 0, 0),
                        Size = UDim2.new(1, -4, 0, 21),
                        BorderSizePixel = 0,
                        BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                        Parent = HolderDarkContrast
                    })
                    --
                    NavigationIcon.TopBar = TopBar_5
                    --
                    local TopBar_6 = Library:CreateObject("Frame", {
                        BackgroundTransparency = 1,
                        Name = "TopBar_6",
                        BorderColor3 = Color3.fromRGB(0, 0, 0),
                        Size = UDim2.new(1, -4, 0, 20),
                        BorderSizePixel = 0,
                        BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                        Parent = MainWindowHolder
                    })
                    --
                    local DraggingButton = Library:CreateObject("TextButton", {
                        FontFace = Library.UI.Font,
                        TextColor3 = Color3.fromRGB(0, 0, 0),
                        BorderColor3 = Color3.fromRGB(0, 0, 0),
                        Name = "DraggingButton",
                        Size = UDim2.new(1, 0, 1, 0),
                        BackgroundTransparency = 1,
                        Position = UDim2.new(0, 0, 0, 0),
                        BorderSizePixel = 0,
                        TextTransparency = 1,
                        TextSize = Library.UI.FontSize,
                        BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                        Parent = TopBar_6
                    })
                    --
                    local Title = Library:CreateObject("TextLabel", {
                        FontFace = Library.UI.Font,
                        TextColor3 = Library.Theme.Default.TextColor,
                        BorderColor3 = Color3.fromRGB(0, 0, 0),
                        Text = Options.Name,
                        TextStrokeTransparency = 0,
                        Name = "Title",
                        BackgroundTransparency = 1,
                        TextXAlignment = Enum.TextXAlignment.Left,
                        Size = UDim2.new(0.5, 0, 1, 0),
                        BorderSizePixel = 0,
                        TextSize = Library.UI.FontSize,
                        BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                        Parent = TopBar_6
                    })
                    --
                    Library:AddTheme(Title, {
                        TextColor3 = "TextColor",
                    })
                    --
                    local UIPadding_36 = Library:CreateObject("UIPadding", {
                        PaddingBottom = UDim.new(0, 4),
                        PaddingTop = UDim.new(0, -4),
                        PaddingLeft = UDim.new(0, -2),
                        Parent = Title
                    })
                    --
                    local CloseButton = Library:CreateObject("TextButton", {
                        FontFace = Library.UI.Font,
                        TextColor3 = Library.Theme.Default.TextColor,
                        BorderColor3 = Color3.fromRGB(0, 0, 0),
                        Name = "CloseButton",
                        Size = UDim2.new(0, 10, 0, 10),
                        BackgroundTransparency = 1,
                        TextStrokeTransparency = 0,
                        Position = UDim2.new(1, -6, 0, 2),
                        BorderSizePixel = 0,
                        Text = "x",
                        ZIndex = 5,
                        TextTransparency = 0,
                        TextSize = Library.UI.FontSize,
                        BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                        Parent = TopBar_6
                    })
                    --
                    Library:AddTheme(CloseButton, {
                        TextColor3 = "TextColor",
                    })
                    --
                    local UIPadding_34141416 = Library:CreateObject("UIPadding", {
                        PaddingBottom = UDim.new(0, 2),
                        PaddingTop = UDim.new(0, -2),
                        Parent = CloseButton
                    })
                    --
                    local ResizeButton = Library:CreateObject("TextButton", {
                        FontFace = Library.UI.Font,
                        TextColor3 = Color3.fromRGB(0, 0, 0),
                        BorderColor3 = Color3.fromRGB(0, 0, 0),
                        Name = "ResizeButton",
                        AnchorPoint = Vector2.new(1, 1),
                        Size = UDim2.new(0, 20, 0, 20),
                        BackgroundTransparency = 1,
                        Position = UDim2.new(1, 0, 1, 0),
                        BorderSizePixel = 0,
                        TextTransparency = 1,
                        TextSize = Library.UI.FontSize,
                        BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                        Parent = MainWindowHolder
                    })
                    --
                    do -- Functions
                        Library:Draggable(MainWindowOutline, DraggingButton, DropShadowHolder)
                        Library:Resizable(MainWindowOutline, ResizeButton, Options.Size - UDim2.new(0, 50, 0, 150), UDim2.new(0, 492, 0, 632), DropShadowHolder)
                    end
                    --
                    do -- Connections
                        Library:Connection(CloseButton.MouseButton1Click, NavigationIcon.Toggle)
                    end
                    --
                    function Window:Section(Options)
                        Options = Library:Validate({
                            Name = "Preview Section",
                            Side = "Left",
                            Scrolling = false,
                            Fill = false,
                        }, Options or {})
                        --
                        local Section = {
                            Elements = {},
                        }
                        --
                        Library.UI.SectionZIndex -= 1
                        --
                        local Parent = NavigationMain
                        --
                        local SectionOutline = Library:CreateObject("Frame", {
                            Name = "SectionOutline",
                            BorderColor3 = Color3.fromRGB(0, 0, 0),
                            Size = UDim2.new(1, -1, 0, 30),
                            BorderSizePixel = 0,
                            BackgroundColor3 = Library.Theme.Default.Inline,
                            ZIndex = Library.UI.SectionZIndex,
                            AutomaticSize = Options.Fill and Enum.AutomaticSize.None or Enum.AutomaticSize.Y,
                            Parent = Parent
                        })
                        --
                        task.delay(0.01, function()
                            if Options.Fill == false then
                                WindowSettings.SectionSizes += SectionOutline.AbsoluteSize.Y + 6
                            end
                            --
                            SectionOutline.Size = UDim2.new(1, -1, Options.Fill and 1 or 0, Options.Fill and -WindowSettings.SectionSizes or 30)
                        end)
                        --
                        Library:AddTheme(SectionOutline, {
                            BackgroundColor3 = "Inline",
                        })
                        --
                        local SectionInline = Library:CreateObject("Frame", {
                            Name = "SectionInline",
                            Position = UDim2.new(0, 1, 0, 1),
                            BorderColor3 = Color3.fromRGB(0, 0, 0),
                            Size = UDim2.new(1, -2, 1, -2),
                            BorderSizePixel = 0,
                            BackgroundColor3 = Library.Theme.Default.Outline,
                            Parent = SectionOutline
                        })
                        --
                        Library:AddTheme(SectionInline, {
                            BackgroundColor3 = "Outline",
                        })
                        --
                        local SectionDarkContrast = Library:CreateObject("Frame", {
                            Name = "SectionDarkContrast",
                            Position = UDim2.new(0, 1, 0, 1),
                            BorderColor3 = Color3.fromRGB(0, 0, 0),
                            Size = UDim2.new(1, -2, 1, -2),
                            BorderSizePixel = 0,
                            BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                            Parent = SectionInline
                        })
                        --
                        local UIGradient_25 = Library:CreateObject("UIGradient", {
                            Rotation = 90,
                            Color = ColorSequence.new{
                                ColorSequenceKeypoint.new(0, Library.Theme.Default.LightContrast),
                                ColorSequenceKeypoint.new(1, Library.Theme.Default.DarkContrast)
                            },
                            Parent = SectionDarkContrast
                        })
                        --
                        Library:AddTheme(UIGradient_25, {
                            Color = {"LightContrast", "DarkContrast"},
                        })
                        --
                        local AccentBar = Library:CreateObject("Frame", {
                            Name = "AccentBar",
                            BorderColor3 = Color3.fromRGB(0, 0, 0),
                            Size = UDim2.new(1, 0, 0, 2),
                            BorderSizePixel = 0,
                            BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                            Parent = SectionDarkContrast
                        })
                        --
                        local UIGradient_33121 = Library:CreateObject("UIGradient", {
                            Rotation = 90,
                            Color = ColorSequence.new{
                                ColorSequenceKeypoint.new(0, Library.Theme.Default.Accent),
                                ColorSequenceKeypoint.new(1, Library.Theme.Default.SecondAccent)
                            },
                            Parent = AccentBar
                        })
                        --
                        Library:AddTheme(UIGradient_33121, {
                            Color = {"Accent", "SecondAccent"}
                        })
                        --
                        local SectionItemsHolder
                        --
                        if Options.Scrolling then
                            SectionItemsHolder = Library:CreateObject("ScrollingFrame", {
                                ScrollBarImageColor3 = Library.Theme.Default.Accent,
                                MidImage = "rbxassetid://158362264",
                                Active = true,
                                BorderColor3 = Color3.fromRGB(0, 0, 0),
                                ScrollBarThickness = 2,
                                CanvasSize = UDim2.new(0, 0, 0, 0),
                                AutomaticCanvasSize = Enum.AutomaticSize.Y,
                                Name = "SectionItemsHolder",
                                BackgroundTransparency = 1,
                                Size = UDim2.new(1, -2, 1, -24),
                                Position = UDim2.new(0, 1, 0, 22),
                                TopImage = "rbxassetid://158362264",
                                AutomaticSize = Options.Fill and Enum.AutomaticSize.None or Enum.AutomaticSize.Y,
                                BottomImage = "rbxassetid://158362264",
                                BorderSizePixel = 0,
                                BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                                Parent = SectionDarkContrast
                            })
                            --
                            Library:AddTheme(SectionItemsHolder, {
                                ScrollBarImageColor3 = "Accent"
                            })
                        else
                            SectionItemsHolder = Library:CreateObject("Frame", {
                                Name = "SectionItemsHolder",
                                BackgroundTransparency = 1,
                                Position = UDim2.new(0, 1, 0, 22),
                                BorderColor3 = Color3.fromRGB(0, 0, 0),
                                Size = UDim2.new(1, -2, 1, -24),
                                BorderSizePixel = 0,
                                BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                                Parent = SectionDarkContrast,
                                ClipsDescendants = true,
                                AutomaticSize = Enum.AutomaticSize.Y,
                            })
                        end
                        --
                        local UIListLayout_5 = Library:CreateObject("UIListLayout", {
                            Padding = UDim.new(0, 2),
                            SortOrder = Enum.SortOrder.LayoutOrder,
                            Parent = SectionItemsHolder
                        })
                        --
                        local UIPadding_16 = Library:CreateObject("UIPadding", {
                            PaddingBottom = UDim.new(0, (Options.Scrolling and 2 or 6)),
                            PaddingRight = UDim.new(0, 3),
                            PaddingLeft = UDim.new(0, 3),
                            Parent = SectionItemsHolder
                        })
                        --
                        local TopBar_3 = Library:CreateObject("Frame", {
                            Name = "TopBar_3",
                            BackgroundTransparency = 1,
                            Position = UDim2.new(0, 0, 0, 2),
                            BorderColor3 = Color3.fromRGB(0, 0, 0),
                            Size = UDim2.new(1, 0, 0, 20),
                            BorderSizePixel = 0,
                            BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                            Parent = SectionDarkContrast
                        })
                        --
                        local SectionName_1 = Library:CreateObject("TextLabel", {
                            FontFace = Library.UI.Font,
                            TextColor3 = Library.Theme.Default.TextColor,
                            BorderColor3 = Color3.fromRGB(0, 0, 0),
                            Text = Options.Name,
                            TextStrokeTransparency = 0,
                            Name = "SectionName_1",
                            BackgroundTransparency = 1,
                            TextXAlignment = Enum.TextXAlignment.Left,
                            Size = UDim2.new(1, 0, 1, 0),
                            BorderSizePixel = 0,
                            TextSize = Library.UI.FontSize,
                            BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                            Parent = TopBar_3
                        })
                        --
                        Library:AddTheme(SectionName_1, {
                            TextColor3 = "TextColor",
                        })
                        --
                        local UIPadding_23 = Library:CreateObject("UIPadding", {
                            PaddingLeft = UDim.new(0, 4),
                            Parent = SectionName_1
                        })
                        --
                        Section.Elements = {
                            Name = SectionName_1,
                            ContentHolder = SectionItemsHolder,
                        }
                        --
                        return setmetatable(Section, Library.ThemeSections)
                    end
                    --
                    function ThemeSections:Toggle(Options)
                        Options = Library:Validate({
                            Default = false,
                            Name = "Preview Toggle",
                            Risky = false,
                            Flag = Library:NewFlag(),
                            Callback = function() end
                        }, Options or {})
                        --
                        local Toggle = Library:Toggle({
                            Default = Options.Default,
                            Name = Options.Name,
                            SectionName = self.Elements.Name,
                            Parent = self.Elements.ContentHolder,
                            Risky = Options.Risky,
                            MainUI = MainWindowOutline,
                            Flag = Options.Flag,
                            Callback = Options.Callback
                        })
                        --
                        return Toggle
                    end
                    --
                    function ThemeSections:Label(Options)
                        Options = Library:Validate({
                            Message = "Preview Label",
                            Side = "Left",
                            Risky = false,
                            Callback = function() end
                        }, Options or {})
                        --
                        local Label = Library:Label({
                            Message = Options.Message,
                            Side = Options.Side,
                            Risky = Options.Risky,
                            MainUI = MainWindowOutline,
                            Callback = Options.Callback,
                            Parent = self.Elements.ContentHolder
                        })
                        --
                        return Label
                    end
                    --
                    function ThemeSections:TextBox(Options)
                        Options = Library:Validate({
                            Default = "",
                            Name = "Preview TextBox",
                            Max = 32,
                            NumbersOnly = false,
                            ClearOnFocus = false,
                            CheckIfPressedEnter = false,
                            Risky = false,
                            Flag = Library.NewFlag(),
                            Callback = function() end
                        }, Options or {})
                        --
                        local TextBox = Library:TextBox({
                            Default = Options.Default,
                            Name = Options.Name,
                            Max = Options.Max,
                            NumbersOnly = Options.NumbersOnly,
                            ClearOnFocus = Options.ClearOnFocus,
                            CheckIfPressedEnter = Options.CheckIfPressedEnter,
                            Risky = Options.Risky,
                            Parent = self.Elements.ContentHolder,
                            Flag = Options.Flag,
                            Callback = Options.Callback
                        })
                        --
                        return TextBox
                    end
                    --
                    function ThemeSections:Button(Options)
                        Options = Library:Validate({
                            Name = "Preview Button",
                            Confirmation = false,
                            Risky = false,
                            Callback = function() end
                        }, Options or {})
                        --
                        local Button = Library:Button({
                            Name = Options.Name,
                            Confirmation = Options.Confirmation,
                            Risky = Options.Risky,
                            Parent = self.Elements.ContentHolder,
                            Callback = Options.Callback
                        })
                        --
                        return Button
                    end
                    --
                    function ThemeSections:Slider(Options)
                        Options = Library:Validate({
                            Name = "Preview Slider",
                            Min = 0,
                            Max = 100,
                            Default = 1,
                            Decimal = 1,
                            Ending = "",
                            Risky = false,
                            Flag = Library.NewFlag(),
                            Callback = function() end
                        }, Options or {})
                        --
                        local Slider = Library:Slider({
                            Name = Options.Name,
                            Min = Options.Min,
                            Max = Options.Max,
                            Default = Options.Default,
                            Decimal = Options.Decimal,
                            Ending = Options.Ending,
                            Parent = self.Elements.ContentHolder,
                            Risky = Options.Risky,
                            Flag = Options.Flag,
                            Callback = Options.Callback
                        })
                        --
                        return Slider
                    end
                    --
                    function ThemeSections:Dropdown(Options)
                        Options = Library:Validate({
                            Default = "None",
                            Name = "Preview Dropdown",
                            Content = {},
                            Risky = false,
                            Flag = Library.NewFlag(),
                            Callback = function() end
                        }, Options or {})
                        --
                        local Dropdown = Library:Dropdown({
                            Default = Options.Default,
                            Name = Options.Name,
                            Content = Options.Content,
                            MainUI = MainWindowOutline,
                            Risky = Options.Risky,
                            Flag = Options.Flag,
                            Callback = Options.Callback,
                            Parent = self.Elements.ContentHolder
                        })
                        --
                        return Dropdown
                    end
                    --
                    function ThemeSections:MultiBox(Options)
                        Options = Library:Validate({
                            Default = "None",
                            Name = "Preview MultiBox",
                            Content = {},
                            Risky = false,
                            Flag = Library.NewFlag(),
                            Callback = function() end
                        }, Options or {})
                        --
                        local MultiBox = Library:MultiBox({
                            Default = Options.Default,
                            Name = Options.Name,
                            Content = Options.Content,
                            MainUI = MainWindowOutline,
                            TabUI = NavigationMain,
                            Risky = Options.Risky,
                            Parent = self.Elements.ContentHolder,
                            Flag = Options.Flag,
                            Callback = Options.Callback
                        })
                        --
                        return MultiBox
                    end
                    --
                    return Window
                end
            end
            --
            return NavigationIcon
        end
        --
        function Navigation:CreateKeybindList()
            local KeybindList = {
                CanUse = true,
                KeybindCount = 0,
            }
            --
            local KeybindListOutline_1 = Library:CreateObject("Frame", {
                Name = "KeybindListOutline_1",
                BorderColor3 = Color3.fromRGB(0, 0, 0),
                Size = UDim2.new(0, 182, 0, 30),
                BorderSizePixel = 0,
                ZIndex = 6,
                BackgroundColor3 = Library.Theme.Default.LightContrast,
                Parent = ScreenGuiExtra
            })
            --
            KeybindListOutline_1.Position = UDim2.fromOffset(5, (Viewport.Y / 2) - (KeybindListOutline_1.Size.Y.Offset / 2))
            --
            Library:AddTheme(KeybindListOutline_1, {
                BackgroundColor3 = "Outline"
            })
            --
            local KeybindListInline_1 = Library:CreateObject("Frame", {
                Name = "KeybindListInline_1",
                Position = UDim2.new(0, 1, 0, 1),
                BorderColor3 = Color3.fromRGB(0, 0, 0),
                Size = UDim2.new(1, -2, 1, -2),
                BorderSizePixel = 0,
                BackgroundColor3 = Library.Theme.Default.Inline,
                Parent = KeybindListOutline_1
            })
            --
            Library:AddTheme(KeybindListInline_1, {
                BackgroundColor3 = "Inline"
            })
            --
            local KeybindListDarkContrast_1 = Library:CreateObject("Frame", {
                Name = "WatermarkDarkContrast_1",
                Position = UDim2.new(0, 1, 0, 1),
                BorderColor3 = Color3.fromRGB(0, 0, 0),
                Size = UDim2.new(1, -2, 1, -2),
                BorderSizePixel = 0,
                BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                Parent = KeybindListInline_1
            })
            --
            local UIGradient_254414211 = Library:CreateObject("UIGradient", {
                Rotation = 90,
                Color = ColorSequence.new{
                    ColorSequenceKeypoint.new(0, Library.Theme.Default.LightContrast),
                    ColorSequenceKeypoint.new(1, Library.Theme.Default.DarkContrast)
                },
                Parent = KeybindListDarkContrast_1
            })
            --
            Library:AddTheme(UIGradient_254414211, {
                Color = {"LightContrast", "DarkContrast"}
            })
            --
            local TopBar_5 = Library:CreateObject("Frame", {
                Name = "TopBar_5",
                BorderColor3 = Color3.fromRGB(0, 0, 0),
                Size = UDim2.new(1, 0, 0, 2),
                BorderSizePixel = 0,
                BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                Parent = KeybindListDarkContrast_1
            })
            --
            local UIGradient_32312 = Library:CreateObject("UIGradient", {
                Rotation = 90,
                Color = ColorSequence.new{
                    ColorSequenceKeypoint.new(0, Library.Theme.Default.Accent),
                    ColorSequenceKeypoint.new(1, Library.Theme.Default.SecondAccent)
                },
                Parent = TopBar_5
            })
            --
            Library:AddTheme(UIGradient_32312, {
                Color = {"Accent", "SecondAccent"}
            })
            --
            local KeybindsTopBar = Library:CreateObject("Frame", {
                Name = "KeybindsTopBar",
                BackgroundTransparency = 1,
                Position = UDim2.new(0, 1, 0, 2),
                BorderColor3 = Color3.fromRGB(0, 0, 0),
                Size = UDim2.new(1, -2, 1, -4),
                BorderSizePixel = 0,
                BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                Parent = KeybindListDarkContrast_1
            })
            --
            local UIPadding_30 = Library:CreateObject("UIPadding", {
                PaddingBottom = UDim.new(0, -1),
                PaddingTop = UDim.new(0, 1),
                PaddingLeft = UDim.new(0, 3),
                Parent = KeybindsTopBar
            })
            --
            local Title_1 = Library:CreateObject("TextLabel", {
                FontFace = Library.UI.Font,
                TextColor3 = Library.Theme.Default.TextColor,
                BorderColor3 = Color3.fromRGB(0, 0, 0),
                Text = "Keybinds",
                TextStrokeTransparency = 0,
                BackgroundTransparency = 1,
                Name = "Title_1",
                Size = UDim2.new(1, 0, 1, 0),
                BorderSizePixel = 0,
                TextSize = Library.UI.FontSize,
                BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                Parent = KeybindsTopBar
            })
            --
            Library:AddTheme(Title_1, {
                TextColor3 = "TextColor"
            })
            --
            local DraggingButton = Library:CreateObject("TextButton", {
                FontFace = Library.UI.Font,
                TextColor3 = Color3.fromRGB(0, 0, 0),
                BorderColor3 = Color3.fromRGB(0, 0, 0),
                Name = "DraggingButton",
                BackgroundTransparency = 1,
                Size = UDim2.new(1, 0, 1, 0),
                BorderSizePixel = 0,
                TextTransparency = 1,
                TextSize = Library.UI.FontSize,
                BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                Parent = KeybindsTopBar
            })
            --
            local KeybindsHolderOutline = Library:CreateObject("Frame", {
                Size = UDim2.new(1, 4, 0, 0),
                Name = "KeybindsHolderOutline",
                Position = UDim2.new(0, -2, 1, 1),
                BorderColor3 = Color3.fromRGB(0, 0, 0),
                BorderSizePixel = 0,
                Visible = false,
                AutomaticSize = Enum.AutomaticSize.Y,
                BackgroundColor3 = Library.Theme.Default.Outline,
                Parent = KeybindListDarkContrast_1
            })
            --
            local UIPadding_3152 = Library:CreateObject("UIPadding", {
                PaddingBottom = UDim.new(0, 2),
                Parent = KeybindsHolderOutline
            })
            --
            Library:AddTheme(KeybindsHolderOutline, {
                BackgroundColor3 = "Outline"
            })
            --
            local KeybindsHolderInline = Library:CreateObject("Frame", {
                Size = UDim2.new(1, -2, 1, -2),
                Name = "KeybindsHolderInline",
                Position = UDim2.new(0, 1, 0, 1),
                BorderColor3 = Color3.fromRGB(0, 0, 0),
                BorderSizePixel = 0,
                AutomaticSize = Enum.AutomaticSize.Y,
                BackgroundColor3 = Library.Theme.Default.Inline,
                Parent = KeybindsHolderOutline
            })
            --
            local UIPadding_31522 = Library:CreateObject("UIPadding", {
                PaddingBottom = UDim.new(0, 2),
                Parent = KeybindsHolderInline
            })
            --
            Library:AddTheme(KeybindsHolderInline, {
                BackgroundColor3 = "Inline"
            })
            --
            local KeybindsHolderMain = Library:CreateObject("Frame", {
                Size = UDim2.new(1, -2, 1, -2),
                Name = "KeybindsHolderMain",
                Position = UDim2.new(0, 1, 0, 1),
                BorderColor3 = Color3.fromRGB(0, 0, 0),
                BorderSizePixel = 0,
                AutomaticSize = Enum.AutomaticSize.Y,
                BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                Parent = KeybindsHolderInline
            })
            --
            local UIGradient_25 = Library:CreateObject("UIGradient", {
                Rotation = -90,
                Color = ColorSequence.new{
                    ColorSequenceKeypoint.new(0, Library.Theme.Default.LightContrast),
                    ColorSequenceKeypoint.new(1, Library.Theme.Default.DarkContrast)
                },
                Parent = KeybindsHolderMain
            })
            --
            Library:AddTheme(UIGradient_25, {
                Color = {"LightContrast", "DarkContrast"}
            })
            --
            local UIPadding_31522 = Library:CreateObject("UIPadding", {
                PaddingTop = UDim.new(0, -1),
                PaddingLeft = UDim.new(0, 1),
                Parent = KeybindsHolderMain
            })
            --
            local UIListLayout_5 = Library:CreateObject("UIListLayout", {
                SortOrder = Enum.SortOrder.LayoutOrder,
                Padding = UDim.new(0, -1),
                Parent = KeybindsHolderMain
            })
            --
            do -- Functions
                function Library:UpdateKeybindPosition()
                    KeybindListOutline_1.Position = UDim2.fromOffset(10, (Viewport.Y / 2) - (KeybindListOutline_1.Size.Y.Offset / 2))
                end
                --
                function Library:ToggleKeybindList(State)
                    KeybindList.CanUse = State
                    KeybindListOutline_1.Visible = State
                end
                --
                function Library:UpdateKeybindFrame(Mode, Name, Key, Section)
                    for _, Frame in KeybindsHolderMain:GetChildren() do
                        if Frame:IsA("Frame") and Frame.Name == Section .. "_" .. Name then
                            local KeybindText = Frame.KeybindText
                            --
                            KeybindText.Text = ("[ %s ]  %s - %s"):format(tostring(Mode), tostring(Name), tostring(Key))
                        end
                    end
                end
                --
                function Library:AddKeybindFrame(Mode, Name, Key, Section)
                    if KeybindsHolderMain:FindFirstChild(Section .. "_" .. Name) then Library:RemoveKeybindFrame(Name, Section) end
                    --
                    KeybindList.KeybindCount += 1
                    KeybindsHolderOutline.Visible = true
                    --
                    local KeybindTemplate = Library:CreateObject("Frame", {
                        BackgroundTransparency = 1,
                        Name = Section .. "_" .. Name,
                        BorderColor3 = Color3.fromRGB(0, 0, 0),
                        Size = UDim2.new(1, 0, 0, 20),
                        BorderSizePixel = 0,
                        BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                        Parent = KeybindsHolderMain
                    })
                    --
                    local KeybindText = Library:CreateObject("TextLabel", {
                        FontFace = Library.UI.Font,
                        TextColor3 = Library.Theme.Default.TextColor,
                        BorderColor3 = Color3.fromRGB(0, 0, 0),
                        RichText = true,
                        Text = ("[ %s ]  %s - %s"):format(tostring(Mode), tostring(Name), tostring(Key)),
                        Name = "KeybindText",
                        BackgroundTransparency = 1,
                        TextStrokeTransparency = 0,
                        TextXAlignment = Enum.TextXAlignment.Left,
                        Size = UDim2.new(1, 0, 1, 0),
                        BorderSizePixel = 0,
                        TextSize = Library.UI.FontSize,
                        BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                        Parent = KeybindTemplate
                    })
                    --
                    Library:AddTheme(KeybindText, {
                        TextColor3 = "TextColor"
                    })
                    --
                    local UIPadding_31 = Library:CreateObject("UIPadding", {
                        PaddingLeft = UDim.new(0, 4),
                        Parent = KeybindText
                    })
                end
                --
                function Library:RemoveKeybindFrame(Name, Section)
                    for _, Frame in KeybindsHolderMain:GetChildren() do
                        if Frame:IsA("Frame") and Frame.Name == Section .. "_" .. Name then
                            Frame:Destroy()
                            --
                            KeybindList.KeybindCount -= 1
                            --
                            if KeybindList.KeybindCount == 0 then
                                KeybindsHolderOutline.Visible = false
                            end
                        end
                    end
                end
                --
                Library:Draggable(KeybindListOutline_1, DraggingButton)
            end
        end
        --
        function Navigation:CreateWatermark()
            local Watermark = {
                CanUse = true,
                Tick = tick(),
            }
            --
            local MainWatermarkOutline = Library:CreateObject("Frame", {
                Name = "MainWatermarkOutline",
                BorderColor3 = Color3.fromRGB(0, 0, 0),
                Size = UDim2.new(0, 217, 0, 30),
                BorderSizePixel = 0,
                ZIndex = 10000,
                Visible = false,
                BackgroundColor3 = Library.Theme.Default.Outline,
                Parent = ScreenGuiExtra
            })
            --
            Library:AddTheme(MainWatermarkOutline, {
                BackgroundColor3 = "Outline"
            })
            --
            local WatermarkInline = Library:CreateObject("Frame", {
                Name = "WatermarkInline",
                Position = UDim2.new(0, 1, 0, 1),
                BorderColor3 = Color3.fromRGB(0, 0, 0),
                Size = UDim2.new(1, -2, 1, -2),
                BorderSizePixel = 0,
                BackgroundColor3 = Library.Theme.Default.Inline,
                Parent = MainWatermarkOutline
            })
            --
            Library:AddTheme(WatermarkInline, {
                BackgroundColor3 = "Inline"
            })
            --
            local WatermarkDarkContrast = Library:CreateObject("Frame", {
                Name = "WatermarkDarkContrast",
                Position = UDim2.new(0, 1, 0, 1),
                BorderColor3 = Color3.fromRGB(0, 0, 0),
                Size = UDim2.new(1, -2, 1, -2),
                BorderSizePixel = 0,
                BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                Parent = WatermarkInline
            })
            --
            local UIGradient_25441 = Library:CreateObject("UIGradient", {
                Rotation = 90,
                Color = ColorSequence.new{
                    ColorSequenceKeypoint.new(0, Library.Theme.Default.LightContrast),
                    ColorSequenceKeypoint.new(1, Library.Theme.Default.DarkContrast)
                },
                Parent = WatermarkDarkContrast
            })
            --
            Library:AddTheme(UIGradient_25441, {
                Color = {"LightContrast", "DarkContrast"}
            })
            --
            local TopBar = Library:CreateObject("Frame", {
                Name = "TopBar",
                BorderColor3 = Color3.fromRGB(0, 0, 0),
                Size = UDim2.new(1, 0, 0, 2),
                BorderSizePixel = 0,
                BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                Parent = WatermarkDarkContrast
            })
            --
            local UIGradient_36312 = Library:CreateObject("UIGradient", {
                Rotation = 90,
                Color = ColorSequence.new{
                    ColorSequenceKeypoint.new(0, Library.Theme.Default.Accent),
                    ColorSequenceKeypoint.new(1, Library.Theme.Default.SecondAccent)
                },
                Parent = TopBar
            })
            --
            Library:AddTheme(UIGradient_36312, {
                Color = {"Accent", "SecondAccent"}
            })
            --
            local WatermarkTextHolder = Library:CreateObject("Frame", {
                Name = "WatermarkTextHolder",
                BackgroundTransparency = 1,
                Position = UDim2.new(0, 1, 0, 2),
                BorderColor3 = Color3.fromRGB(0, 0, 0),
                Size = UDim2.new(1, -2, 1, -4),
                BorderSizePixel = 0,
                BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                Parent = WatermarkDarkContrast
            })
            --
            local UIPadding = Library:CreateObject("UIPadding", {
                PaddingBottom = UDim.new(0, -1),
                PaddingTop = UDim.new(0, 1),
                PaddingLeft = UDim.new(0, 3),
                Parent = WatermarkTextHolder
            })
            --
            local WatermarkText = Library:CreateObject("TextLabel", {
                FontFace = Library.UI.Font,
                TextColor3 = Library.Theme.Default.TextColor,
                BorderColor3 = Color3.fromRGB(0, 0, 0),
                TextStrokeTransparency = 0,
                Name = "WatermarkText",
                BackgroundTransparency = 1,
                TextXAlignment = Enum.TextXAlignment.Left,
                Size = UDim2.new(1, 0, 1, 0),
                BorderSizePixel = 0,
                TextSize = Library.UI.FontSize,
                BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                Parent = WatermarkTextHolder
            })
            --
            Library:AddTheme(WatermarkText, {
                TextColor3 = "TextColor"
            })
            --
            local UIPadding_22 = Library:CreateObject("UIPadding", {
                PaddingLeft = UDim.new(0, 1),
                Parent = WatermarkText
            })
            --
            local DraggingButton = Library:CreateObject("TextButton", {
                FontFace = Library.UI.Font,
                TextColor3 = Color3.fromRGB(0, 0, 0),
                BorderColor3 = Color3.fromRGB(0, 0, 0),
                Name = "DraggingButton",
                Size = UDim2.new(1, 0, 1, 0),
                BackgroundTransparency = 1,
                Position = UDim2.new(0, 0, 0, 0),
                BorderSizePixel = 0,
                TextTransparency = 1,
                ZIndex = 5,
                TextSize = Library.UI.FontSize,
                BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                Parent = MainWatermarkOutline
            })
            --
            do -- Functions
                function Library:ToggleWatermark(State)
                    Watermark.CanUse = State
                    MainWatermarkOutline.Visible = State
                end
                --
                function Library:UpdateWatermark(Text)
                    if Watermark.CanUse and not MainWatermarkOutline.Visible then MainWatermarkOutline.Visible = true end
                    --
                    WatermarkText.Text = tostring(Text)
                    MainWatermarkOutline.Size = UDim2.new(0, WatermarkText.TextBounds.X + 13, 0, MainWatermarkOutline.Size.Y.Offset)
                    MainWatermarkOutline.Position = Library.UI.WatermarkPosition == "Middle" and UDim2.fromOffset((Viewport.X / 2) - ((WatermarkText.TextBounds.X + 4) / 2), (Viewport.Y) - (MainWatermarkOutline.Size.Y.Offset) - 5) or Library.UI.WatermarkPosition == "Top Right" and UDim2.new(1, -(MainWatermarkOutline.Size.X.Offset) - 5, 0, 5) or UDim2.new(0, 170, 0, 5)
                end
                --
                function Library:ToggleWatermark(State)
                    MainWatermarkOutline.Visible = State
                end
            end
            --
            do -- Connections
                Library:Connection(RunService.Heartbeat, LPH_NO_VIRTUALIZE(function()
                    if Library.UI.Initialized and MainWatermarkOutline.Visible then
                        task.spawn(LPH_NO_VIRTUALIZE(function()
                            if (tick() - Watermark.Tick) > Library.UI.WatermarkRefreshRate and Library.UpdateWatermark then
                                Library:UpdateWatermark(("%s - %s - %s - %s"):format(Library.UI.Name, Library.Build, os.date("%b %d %Y"), os.date("%X")))
                                --
                                Watermark.Tick = tick()
                            end
                        end))
                    end
                end))
            end
        end
        --
        function Navigation:CreateIndicator()
            local Indicator = {
                CanUse = true,
            }
            --
            local MainWindowOutline = Library:CreateObject("Frame", {
                AnchorPoint = Vector2.new(0.5, 0),
                Name = "MainWindowOutline",
                BorderColor3 = Color3.fromRGB(0, 0, 0),
                Size = UDim2.new(0, 322, 0, 147),
                BorderSizePixel = 0,
                BackgroundColor3 = Library.Theme.Default.Outline,
                Visible = false,
                Parent = ScreenGuiExtra
            })
            --
            Library:AddTheme(MainWindowOutline, {
                BackgroundColor3 = "Outline",
            })
            --
            MainWindowOutline.Position = UDim2.fromOffset((Viewport.X / 2) - (MainWindowOutline.Size.X.Offset / 2), (Viewport.Y / 2) - (MainWindowOutline.Size.Y.Offset / 2))
            --
            local DropShadowHolder = Library:CreateObject("Frame", {
                BackgroundTransparency = 1,
                AnchorPoint = Vector2.new(0.5, 0),
                Name = "DropShadowHolder",
                ZIndex = 0,
                Position = MainWindowOutline.Position,
                BorderSizePixel = 0,
                Size = MainWindowOutline.Size,
                Visible = false,
                Parent = ScreenGuiExtra
            })
            --
            local DropShadow = Library:CreateObject("ImageLabel", {
                ImageColor3 = Library.Theme.Default.Glow,
                ScaleType = Enum.ScaleType.Slice,
                ImageTransparency = 0.5,
                Name = "DropShadow",
                AnchorPoint = Vector2.new(0.5, 0.5),
                Image = "rbxassetid://6014261993",
                BackgroundTransparency = 1,
                Position = UDim2.new(0.5, 0, 0.5, 0),
                Size = UDim2.new(1, 47, 1, 47),
                ZIndex = 0,
                BorderSizePixel = 0,
                SliceCenter = Rect.new(Vector2.new(49, 49), Vector2.new(450, 450)),
                Parent = DropShadowHolder
            })
            --
            Library.UI.IndicatorGlow = DropShadow
            --
            Library:AddTheme(DropShadow, {
                ImageColor3 = "Glow",
            })
            --
            local MainWindowInline = Library:CreateObject("Frame", {
                Name = "MainWindowInline",
                Position = UDim2.new(0, 1, 0, 1),
                BorderColor3 = Color3.fromRGB(0, 0, 0),
                Size = UDim2.new(1, -2, 1, -2),
                BorderSizePixel = 0,
                BackgroundColor3 = Library.Theme.Default.Accent,
                Parent = MainWindowOutline
            })
            --
            Library:AddTheme(MainWindowInline, {
                BackgroundColor3 = "Accent",
            })
            --
            local MainWindowDarkContrast = Library:CreateObject("Frame", {
                Name = "MainWindowDarkContrast",
                Position = UDim2.new(0, 1, 0, 1),
                BorderColor3 = Color3.fromRGB(0, 0, 0),
                Size = UDim2.new(1, -2, 1, -2),
                BorderSizePixel = 0,
                BackgroundColor3 = Library.Theme.Default.LightContrast,
                Parent = MainWindowInline
            })
            --
            Library:AddTheme(MainWindowDarkContrast, {
                BackgroundColor3 = "LightContrast",
            })
            --
            local MainWindowHolder = Library:CreateObject("Frame", {
                Name = "MainWindowHolder",
                BackgroundTransparency = 1,
                Position = UDim2.new(0, 1, 0, 2),
                BorderColor3 = Color3.fromRGB(0, 0, 0),
                Size = UDim2.new(1, -2, 1, -4),
                BorderSizePixel = 0,
                BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                Parent = MainWindowDarkContrast
            })
            --
            local UIPadding = Library:CreateObject("UIPadding", {
                PaddingLeft = UDim.new(0, 6),
                Parent = MainWindowHolder
            })
            --
            local HolderOutline = Library:CreateObject("Frame", {
                Name = "HolderOutline",
                Position = UDim2.new(0, -3, 0, 16),
                BorderColor3 = Color3.fromRGB(0, 0, 0),
                Size = UDim2.new(1, 0, 1, -18),
                BorderSizePixel = 0,
                BackgroundColor3 = Library.Theme.Default.Inline,
                Parent = MainWindowHolder
            })
            --
            Library:AddTheme(HolderOutline, {
                BackgroundColor3 = "Inline",
            })
            --
            local HolderInline = Library:CreateObject("Frame", {
                Name = "HolderInline",
                Position = UDim2.new(0, 1, 0, 1),
                BorderColor3 = Color3.fromRGB(0, 0, 0),
                Size = UDim2.new(1, -2, 1, -2),
                BorderSizePixel = 0,
                BackgroundColor3 = Library.Theme.Default.Outline,
                Parent = HolderOutline
            })
            --
            Library:AddTheme(HolderInline, {
                BackgroundColor3 = "Outline",
            })
            --
            local HolderDarkContrast = Library:CreateObject("Frame", {
                Name = "HolderDarkContrast",
                Position = UDim2.new(0, 1, 0, 1),
                BorderColor3 = Color3.fromRGB(0, 0, 0),
                Size = UDim2.new(1, -2, 1, -2),
                BorderSizePixel = 0,
                BackgroundColor3 = Library.Theme.Default.DarkContrast,
                Parent = HolderInline
            })
            --
            Library:AddTheme(HolderDarkContrast, {
                BackgroundColor3 = "DarkContrast",
            })
            --
            local UIPadding_1 = Library:CreateObject("UIPadding", {
                PaddingTop = UDim.new(0, 4),
                PaddingLeft = UDim.new(0, 4),
                Parent = HolderDarkContrast
            })
            --
            local NavigationOutline = Library:CreateObject("Frame", {
                Name = "NavigationOutline",
                BorderColor3 = Color3.fromRGB(0, 0, 0),
                Size = UDim2.new(1, -4, 1, -4),
                BorderSizePixel = 0,
                BackgroundColor3 = Library.Theme.Default.Outline,
                Parent = HolderDarkContrast
            })
            --
            Library:AddTheme(NavigationOutline, {
                BackgroundColor3 = "Outline",
            })
            --
            local NavigationInline = Library:CreateObject("Frame", {
                Name = "NavigationInline",
                Position = UDim2.new(0, 1, 0, 1),
                BorderColor3 = Color3.fromRGB(0, 0, 0),
                Size = UDim2.new(1, -2, 1, -2),
                BorderSizePixel = 0,
                BackgroundColor3 = Library.Theme.Default.Inline,
                Parent = NavigationOutline
            })
            --
            Library:AddTheme(NavigationInline, {
                BackgroundColor3 = "Inline",
            })
            --
            local NavigationMain = Library:CreateObject("Frame", {
                Name = "NavigationMain",
                Position = UDim2.new(0, 1, 0, 1),
                BorderColor3 = Color3.fromRGB(0, 0, 0),
                Size = UDim2.new(1, -2, 1, -2),
                BorderSizePixel = 0,
                BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                Parent = NavigationInline
            })
            --
            local UIPadding_2 = Library:CreateObject("UIPadding", {
                PaddingTop = UDim.new(0, 4),
                PaddingBottom = UDim.new(0, 3),
                PaddingRight = UDim.new(0, 3),
                PaddingLeft = UDim.new(0, 4),
                Parent = NavigationMain
            })
            --
            local MainHolder = Library:CreateObject("Frame", {
                Name = "MainHolder",
                BackgroundTransparency = 1,
                Size = UDim2.new(1, 0, 1, 3),
                BorderColor3 = Color3.fromRGB(0, 0, 0),
                ZIndex = 2,
                BorderSizePixel = 0,
                BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                Parent = NavigationMain
            })
            --
            local SectionOutline = Library:CreateObject("Frame", {
                Name = "SectionOutline",
                BorderColor3 = Color3.fromRGB(0, 0, 0),
                Size = UDim2.new(1, -1, 1, 0),
                BorderSizePixel = 0,
                BackgroundColor3 = Library.Theme.Default.Inline,
                Parent = MainHolder
            })
            --
            Library:AddTheme(SectionOutline, {
                BackgroundColor3 = "Inline",
            })
            --
            local SectionInline = Library:CreateObject("Frame", {
                Name = "SectionInline",
                Position = UDim2.new(0, 1, 0, 1),
                BorderColor3 = Color3.fromRGB(0, 0, 0),
                Size = UDim2.new(1, -2, 1, -2),
                BorderSizePixel = 0,
                BackgroundColor3 = Library.Theme.Default.Outline,
                Parent = SectionOutline
            })
            --
            Library:AddTheme(SectionInline, {
                BackgroundColor3 = "Outline",
            })
            --
            local SectionDarkContrast = Library:CreateObject("Frame", {
                Name = "SectionDarkContrast",
                Position = UDim2.new(0, 1, 0, 1),
                BorderColor3 = Color3.fromRGB(0, 0, 0),
                Size = UDim2.new(1, -2, 1, -2),
                BorderSizePixel = 0,
                BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                Parent = SectionInline
            })
            --
            local UIGradient = Library:CreateObject("UIGradient", {
                Rotation = 90,
                Color = ColorSequence.new{
                    ColorSequenceKeypoint.new(0, Library.Theme.Default.LightContrast),
                    ColorSequenceKeypoint.new(1, Library.Theme.Default.DarkContrast)
                },
                Parent = SectionDarkContrast
            })
            --
            Library:AddTheme(UIGradient, {
                Color = {"LightContrast", "DarkContrast"},
            })
            --
            local SectionItemsHolder = Library:CreateObject("Frame", {
                Name = "SectionItemsHolder",
                BackgroundTransparency = 1,
                Position = UDim2.new(0, 1, 0, 22),
                BorderColor3 = Color3.fromRGB(0, 0, 0),
                Size = UDim2.new(1, -2, 1, -24),
                BorderSizePixel = 0,
                BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                Parent = SectionDarkContrast
            })
            --
            local UIPadding_3 = Library:CreateObject("UIPadding", {
                PaddingTop = UDim.new(0, -1),
                PaddingBottom = UDim.new(0, 2),
                PaddingRight = UDim.new(0, 3),
                PaddingLeft = UDim.new(0, 3),
                Parent = SectionItemsHolder
            })
            --
            local PlayerInfo = Library:CreateObject("Frame", {
                BackgroundTransparency = 1,
                Name = "PlayerInfo",
                BorderColor3 = Color3.fromRGB(0, 0, 0),
                Size = UDim2.new(1, 0, 1, 0),
                BorderSizePixel = 0,
                BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                Parent = SectionItemsHolder
            })
            --
            local PlayerIconOutline = Library:CreateObject("Frame", {
                Name = "PlayerIconOutline",
                BorderColor3 = Color3.fromRGB(0, 0, 0),
                Size = UDim2.new(0, 68, 1, 0),
                BorderSizePixel = 0,
                BackgroundColor3 = Library.Theme.Default.Outline,
                Parent = PlayerInfo
            })
            --
            Library:AddTheme(PlayerIconOutline, {
                BackgroundColor3 = "Outline",
            })
            --
            local PlayerIconInline = Library:CreateObject("Frame", {
                Name = "PlayerIconInline",
                Position = UDim2.new(0, 1, 0, 1),
                BorderColor3 = Color3.fromRGB(0, 0, 0),
                Size = UDim2.new(1, -2, 1, -2),
                BorderSizePixel = 0,
                BackgroundColor3 = Library.Theme.Default.Inline,
                Parent = PlayerIconOutline
            })
            --
            Library:AddTheme(PlayerIconInline, {
                BackgroundColor3 = "Inline",
            })
            --
            local PlayerIconMain = Library:CreateObject("Frame", {
                Name = "PlayerIconMain",
                Position = UDim2.new(0, 1, 0, 1),
                BorderColor3 = Color3.fromRGB(0, 0, 0),
                Size = UDim2.new(1, -2, 1, -2),
                BorderSizePixel = 0,
                BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                Parent = PlayerIconInline
            })
            --
            local UIGradient_1 = Library:CreateObject("UIGradient", {
                Rotation = 90,
                Color = ColorSequence.new{
                    ColorSequenceKeypoint.new(0, Library.Theme.Default.LightContrast),
                    ColorSequenceKeypoint.new(1, Library.Theme.Default.DarkContrast)
                },
                Parent = PlayerIconMain
            })
            --
            Library:AddTheme(UIGradient_1, {
                Color = {"LightContrast", "DarkContrast"},
            })
            --
            local PlayerIcon = Library:CreateObject("ImageLabel", {
                BackgroundTransparency = 1,
                Name = "PlayerIcon",
                BorderColor3 = Color3.fromRGB(0, 0, 0),
                Size = UDim2.new(1, 0, 1, 0),
                BorderSizePixel = 0,
                BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                Parent = PlayerIconMain
            })
            --
            local PlayerName = Library:CreateObject("TextLabel", {
                FontFace = Library.UI.Font,
                TextColor3 = Color3.fromRGB(255, 255, 255),
                BorderColor3 = Color3.fromRGB(0, 0, 0),
                Text = "OnlyTwentyCharacters",
                TextStrokeTransparency = 0,
                Name = "PlayerName",
                Size = UDim2.new(1, 0, 1, 0),
                BackgroundTransparency = 1,
                TextXAlignment = Enum.TextXAlignment.Left,
                BorderSizePixel = 0,
                TextYAlignment = Enum.TextYAlignment.Top,
                TextSize = Library.UI.FontSize,
                BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                Parent = PlayerInfo
            })
            --
            Library:AddTheme(PlayerName, {
                TextColor3 = "TextColor",
            })
            --
            local UIPadding_4 = Library:CreateObject("UIPadding", {
                PaddingBottom = UDim.new(0, 2),
                PaddingTop = UDim.new(0, -2),
                PaddingLeft = UDim.new(0, 73),
                Parent = PlayerName
            })
            --
            local HealthBarOutline = Library:CreateObject("Frame", {
                AnchorPoint = Vector2.new(0, 1),
                Name = "HealthBarOutline",
                Position = UDim2.new(0, 72, 1, 0),
                BorderColor3 = Color3.fromRGB(0, 0, 0),
                Size = UDim2.new(1, -72, 0, 14),
                BorderSizePixel = 0,
                BackgroundColor3 = Library.Theme.Default.Outline,
                Parent = PlayerInfo
            })
            --
            Library:AddTheme(HealthBarOutline, {
                BackgroundColor3 = "Outline",
            })
            --
            local HealthBarInline = Library:CreateObject("Frame", {
                Name = "HealthBarInline",
                Position = UDim2.new(0, 1, 0, 1),
                BorderColor3 = Color3.fromRGB(0, 0, 0),
                Size = UDim2.new(1, -2, 1, -2),
                BorderSizePixel = 0,
                BackgroundColor3 = Library.Theme.Default.Inline,
                Parent = HealthBarOutline
            })
            --
            Library:AddTheme(HealthBarInline, {
                BackgroundColor3 = "Inline",
            })
            --
            local HealthBarMain = Library:CreateObject("Frame", {
                Name = "HealthBarMain",
                Position = UDim2.new(0, 1, 0, 1),
                BorderColor3 = Color3.fromRGB(0, 0, 0),
                Size = UDim2.new(1, -2, 1, -2),
                BorderSizePixel = 0,
                BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                Parent = HealthBarInline
            })
            --
            local UIGradient_2 = Library:CreateObject("UIGradient", {
                Rotation = 90,
                Color = ColorSequence.new{
                    ColorSequenceKeypoint.new(0, Library.Theme.Default.LightContrast),
                    ColorSequenceKeypoint.new(1, Library.Theme.Default.DarkContrast)
                },
                Parent = HealthBarMain
            })
            --
            Library:AddTheme(UIGradient_2, {
                Color = {"LightContrast", "DarkContrast"},
            })
            --
            local HealthBarValue = Library:CreateObject("Frame", {
                Name = "HealthBarValue",
                BorderColor3 = Color3.fromRGB(0, 0, 0),
                Size = UDim2.new(1, 0, 1, 0),
                BorderSizePixel = 0,
                BackgroundColor3 = Color3.fromRGB(0, 185, 0),
                Parent = HealthBarMain
            })
            --
            local HealthValue = Library:CreateObject("TextLabel", {
                FontFace = Library.UI.Font,
                TextColor3 = Library.Theme.Default.TextColor,
                BorderColor3 = Color3.fromRGB(0, 0, 0),
                Text = "50/100",
                TextStrokeTransparency = 0,
                BackgroundTransparency = 1,
                Name = "HealthValue",
                Size = UDim2.new(1, 0, 1, 0),
                BorderSizePixel = 0,
                TextSize = Library.UI.FontSize,
                BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                Parent = HealthBarMain
            })
            --
            Library:AddTheme(HealthValue, {
                TextColor3 = "TextColor",
            })
            --
            local ArmorBarOutline = Library:CreateObject("Frame", {
                AnchorPoint = Vector2.new(0, 1),
                Name = "ArmorBarOutline",
                Position = UDim2.new(0, 72, 1, -18),
                BorderColor3 = Color3.fromRGB(0, 0, 0),
                Size = UDim2.new(1, -72, 0, 14),
                BorderSizePixel = 0,
                BackgroundColor3 = Library.Theme.Default.Outline,
                Parent = PlayerInfo
            })
            --
            Library:AddTheme(ArmorBarOutline, {
                BackgroundColor3 = "Outline",
            })
            --
            local ArmorBarInline = Library:CreateObject("Frame", {
                Name = "ArmorBarInline",
                Position = UDim2.new(0, 1, 0, 1),
                BorderColor3 = Color3.fromRGB(0, 0, 0),
                Size = UDim2.new(1, -2, 1, -2),
                BorderSizePixel = 0,
                BackgroundColor3 = Library.Theme.Default.Inline,
                Parent = ArmorBarOutline
            })
            --
            Library:AddTheme(ArmorBarInline, {
                BackgroundColor3 = "Inline",
            })
            --
            local ArmorBarMain = Library:CreateObject("Frame", {
                Name = "ArmorBarMain",
                Position = UDim2.new(0, 1, 0, 1),
                BorderColor3 = Color3.fromRGB(0, 0, 0),
                Size = UDim2.new(1, -2, 1, -2),
                BorderSizePixel = 0,
                BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                Parent = ArmorBarInline
            })
            --
            local UIGradient_3 = Library:CreateObject("UIGradient", {
                Rotation = 90,
                Color = ColorSequence.new{
                    ColorSequenceKeypoint.new(0, Library.Theme.Default.LightContrast),
                    ColorSequenceKeypoint.new(1, Library.Theme.Default.DarkContrast)
                },
                Parent = ArmorBarMain
            })
            --
            Library:AddTheme(UIGradient_3, {
                Color = {"LightContrast", "DarkContrast"},
            })
            --
            local ArmorBarValue = Library:CreateObject("Frame", {
                Name = "ArmorBarValue",
                BorderColor3 = Color3.fromRGB(0, 0, 0),
                Size = UDim2.new(1, 0, 1, 0),
                BorderSizePixel = 0,
                BackgroundColor3 = Color3.fromRGB(0, 137, 195),
                Parent = ArmorBarMain
            })
            --
            local ArmorValue = Library:CreateObject("TextLabel", {
                FontFace = Library.UI.Font,
                TextColor3 = Library.Theme.Default.TextColor,
                BorderColor3 = Color3.fromRGB(0, 0, 0),
                Text = "100/200",
                TextStrokeTransparency = 0,
                BackgroundTransparency = 1,
                Name = "ArmorValue",
                Size = UDim2.new(1, 0, 1, 0),
                BorderSizePixel = 0,
                TextSize = Library.UI.FontSize,
                BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                Parent = ArmorBarMain
            })
            --
            Library:AddTheme(ArmorValue, {
                TextColor3 = "TextColor",
            })
            --
            local AccentBar = Library:CreateObject("Frame", {
                Name = "AccentBar",
                BorderColor3 = Color3.fromRGB(0, 0, 0),
                Size = UDim2.new(1, 0, 0, 2),
                BorderSizePixel = 0,
                BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                Parent = SectionDarkContrast
            })
            --
            local UIGradient_3312 = Library:CreateObject("UIGradient", {
                Rotation = 90,
                Color = ColorSequence.new{
                    ColorSequenceKeypoint.new(0, Library.Theme.Default.Accent),
                    ColorSequenceKeypoint.new(1, Library.Theme.Default.SecondAccent)
                },
                Parent = AccentBar
            })
            --
            Library:AddTheme(UIGradient_3312, {
                Color = {"Accent", "SecondAccent"}
            })
            --
            local TopBar = Library:CreateObject("Frame", {
                Name = "TopBar",
                BackgroundTransparency = 1,
                Position = UDim2.new(0, 0, 0, 2),
                BorderColor3 = Color3.fromRGB(0, 0, 0),
                Size = UDim2.new(1, 0, 0, 20),
                BorderSizePixel = 0,
                BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                Parent = SectionDarkContrast
            })
            --
            local SectionName = Library:CreateObject("TextLabel", {
                FontFace = Library.UI.Font,
                TextColor3 = Library.Theme.Default.TextColor,
                BorderColor3 = Color3.fromRGB(0, 0, 0),
                Text = "Info",
                TextStrokeTransparency = 0,
                Name = "SectionName",
                BackgroundTransparency = 1,
                TextXAlignment = Enum.TextXAlignment.Left,
                Size = UDim2.new(1, 0, 1, 0),
                BorderSizePixel = 0,
                TextSize = Library.UI.FontSize,
                BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                Parent = TopBar
            })
            --
            Library:AddTheme(SectionName, {
                TextColor3 = "TextColor",
            })
            --
            local UIPadding_5 = Library:CreateObject("UIPadding", {
                PaddingLeft = UDim.new(0, 5),
                Parent = SectionName
            })
            --
            local UIPadding_6 = Library:CreateObject("UIPadding", {
                PaddingBottom = UDim.new(0, 4),
                Parent = MainHolder
            })
            --
            local UIListLayout = Library:CreateObject("UIListLayout", {
                Padding = UDim.new(0, 4),
                SortOrder = Enum.SortOrder.LayoutOrder,
                Parent = MainHolder
            })
            --
            local HolderGradient = Library:CreateObject("UIGradient", {
                Rotation = 90,
                Name = "HolderGradient",
                Color = ColorSequence.new{
                    ColorSequenceKeypoint.new(0, Color3.fromRGB(41, 41, 55)),
                    ColorSequenceKeypoint.new(1, Color3.fromRGB(35, 35, 47))
                },
                Parent = NavigationMain
            })
            --
            Library:AddTheme(HolderGradient, {
                Color = {"LightContrast", "DarkContrast"},
            })
            --
            local TopBar_1 = Library:CreateObject("Frame", {
                BackgroundTransparency = 1,
                Name = "TopBar_1",
                BorderColor3 = Color3.fromRGB(0, 0, 0),
                Size = UDim2.new(1, -4, 0, 20),
                BorderSizePixel = 0,
                BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                Parent = MainWindowHolder
            })
            --
            local Title = Library:CreateObject("TextLabel", {
                FontFace = Library.UI.Font,
                TextColor3 = Library.Theme.Default.TextColor,
                BorderColor3 = Color3.fromRGB(0, 0, 0),
                Text = "Indicator",
                TextStrokeTransparency = 0,
                Name = "Title",
                BackgroundTransparency = 1,
                TextXAlignment = Enum.TextXAlignment.Left,
                Size = UDim2.new(0.5, 0, 1, 0),
                BorderSizePixel = 0,
                TextSize = Library.UI.FontSize,
                BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                Parent = TopBar_1
            })
            --
            Library:AddTheme(Title, {
                TextColor3 = "TextColor",
            })
            --
            local UIPadding_7 = Library:CreateObject("UIPadding", {
                PaddingBottom = UDim.new(0, 4),
                PaddingTop = UDim.new(0, -4),
                PaddingLeft = UDim.new(0, -2),
                Parent = Title
            })
            --
            do -- Functions
                function Library:ToggleIndicator(State)
                    Indicator.CanUse = State
                end
                --
                function Library:UpdateIndicator(Player)
                    if Player and Indicator.CanUse then
                        MainWindowOutline.Visible = true
                        DropShadowHolder.Visible = true
                        --
                        local Character = Player:IsA("Player") and Player.Character or Player
                        local UserId = Player:IsA("Player") and Player.UserId or 1723463
                        local Humanoid = Character and Character:FindFirstChild("Humanoid")
                        local HumanoidRootPart = Character and Character:FindFirstChild("HumanoidRootPart")
                        local NewPosition = HumanoidRootPart and HumanoidRootPart.CFrame * CFrame.new(0, -(HumanoidRootPart.Size.Y + 1), 0)
                        --
                        if NewPosition then
                            local Position, OnScreen = Camera:WorldToViewportPoint(NewPosition.Position)
                            local Health, MaxHealth = Library:GetHealth(Humanoid)
                            local Armor, MaxArmor = Library:GetArmor(Character)
                            local PlayerIconUrl = Players:GetUserThumbnailAsync(UserId, Enum.ThumbnailType.HeadShot, Enum.ThumbnailSize.Size420x420)
                            local PlayerText = Player.DisplayName == Player.Name and Player.Name or ("%s (@%s)"):format(Player.DisplayName, Player.Name)
                            --
                            if Health and Armor and MaxHealth and MaxArmor then
                                --
                                PlayerName.Text = PlayerText
                                PlayerIcon.Image = PlayerIconUrl
                                --
                                HealthValue.Text = math.ceil(Health) .. "/" .. MaxHealth
                                ArmorValue.Text = math.ceil(Armor) .. "/" .. MaxArmor
                                --
                                Library:TweenObject(HealthBarValue, TweenInfo.new(0.35, Library.UI.TweenEasingStyle, Enum.EasingDirection.Out), {Size = UDim2.new(Health / MaxHealth, 0, 1, 0)})
                                Library:TweenObject(ArmorBarValue, TweenInfo.new(0.35, Library.UI.TweenEasingStyle, Enum.EasingDirection.Out), {Size = UDim2.new(Armor / MaxArmor, 0, 1, 0)})
                                --
                                if Health > 0 then
                                    if OnScreen then
                                        Library:TweenObject(MainWindowOutline, TweenInfo.new(Library.UI.TweenSpeed, Library.UI.TweenEasingStyle, Enum.EasingDirection.Out), {Position = UDim2.new(0, Position.X, 0, Position.Y)})
                                        Library:TweenObject(DropShadowHolder, TweenInfo.new(Library.UI.TweenSpeed, Library.UI.TweenEasingStyle, Enum.EasingDirection.Out), {Position = UDim2.new(0, Position.X, 0, Position.Y)})
                                    else
                                        Library:TweenObject(MainWindowOutline, TweenInfo.new(Library.UI.TweenSpeed, Library.UI.TweenEasingStyle, Enum.EasingDirection.Out), {Position = UDim2.new(0.5, 0, 1, -250)})
                                        Library:TweenObject(DropShadowHolder, TweenInfo.new(Library.UI.TweenSpeed, Library.UI.TweenEasingStyle, Enum.EasingDirection.Out), {Position = UDim2.new(0.5, 0, 1, -250)})
                                    end
                                else
                                    Library:TweenObject(MainWindowOutline, TweenInfo.new(Library.UI.TweenSpeed, Library.UI.TweenEasingStyle, Enum.EasingDirection.Out), {Position = UDim2.new(0.5, 0, 1, -250)})
                                    Library:TweenObject(DropShadowHolder, TweenInfo.new(Library.UI.TweenSpeed, Library.UI.TweenEasingStyle, Enum.EasingDirection.Out), {Position = UDim2.new(0.5, 0, 1, -250)})
                                end
                            end
                        end
                    else
                        MainWindowOutline.Visible = false
                        DropShadowHolder.Visible = false
                    end
                end
            end
        end
        --
        Navigation:CreateIndicator()
        Navigation:CreateKeybindList()
        Navigation:CreateWatermark()
        --
        function Library:Notify(Options)
            Options = Library:Validate({
                Message = "Notification",
                Delay = 3,
                Position = "Top Left",
            }, Options or {})
            --
            local Notification = {}
            local Path = Options.Position == "Top Left" and Library.UI.Notifications.TopLeft or Library.UI.Notifications.Middle
            --
            local NotificationFrameObject = Library:CreateObject("Frame", {
                Name = "MainNotificationOutline",
                BorderColor3 = Color3.fromRGB(0, 0, 0),
                Size = UDim2.new(0, 182, 0, 28),
                BorderSizePixel = 0,
                ZIndex = 10000,
                BackgroundColor3 = Library.Theme.Default.Outline,
                Parent = ScreenGuiNotifications
            })
            --
            Library:AddTheme(NotificationFrameObject, {
                BackgroundColor3 = "Outline"
            })
            --
            local NotificationInline = Library:CreateObject("Frame", {
                Name = "NotificationInline",
                Position = UDim2.new(0, 1, 0, 1),
                BorderColor3 = Color3.fromRGB(0, 0, 0),
                Size = UDim2.new(1, -2, 1, -2),
                BorderSizePixel = 0,
                BackgroundColor3 = Library.Theme.Default.Inline,
                Parent = NotificationFrameObject
            })
            --
            Library:AddTheme(NotificationInline, {
                BackgroundColor3 = "Inline"
            })
            --
            local NotificationDarkContrast = Library:CreateObject("Frame", {
                Name = "NotificationDarkContrast",
                Position = UDim2.new(0, 1, 0, 1),
                BorderColor3 = Color3.fromRGB(0, 0, 0),
                Size = UDim2.new(1, -2, 1, -2),
                BorderSizePixel = 0,
                BackgroundColor3 = Library.Theme.Default.DarkContrast,
                Parent = NotificationInline
            })
            --
            Library:AddTheme(NotificationDarkContrast, {
                BackgroundColor3 = "DarkContrast"
            })
            --
            local SideBar = Library:CreateObject("Frame", {
                Name = "SideBar",
                BorderColor3 = Color3.fromRGB(0, 0, 0),
                Size = UDim2.new(0, 2, 1, 0),
                BorderSizePixel = 0,
                BackgroundColor3 = Library.Theme.Default.Accent,
                Parent = NotificationDarkContrast
            })
            --
            Library:AddTheme(SideBar, {
                BackgroundColor3 = "Accent"
            })
            --
            local NotificationTextHolder = Library:CreateObject("Frame", {
                Name = "NotificationTextHolder",
                BackgroundTransparency = 1,
                Position = UDim2.new(0, 1, 0, 2),
                BorderColor3 = Color3.fromRGB(0, 0, 0),
                Size = UDim2.new(1, -2, 1, -4),
                BorderSizePixel = 0,
                BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                Parent = NotificationDarkContrast
            })
            --
            local UIPadding = Library:CreateObject("UIPadding", {
                PaddingTop = UDim.new(0, -3),
                PaddingLeft = UDim.new(0, 6),
                Parent = NotificationTextHolder
            })
            --
            local NotificationText = Library:CreateObject("TextLabel", {
                FontFace = Library.UI.Font,
                TextColor3 = Library.Theme.Default.TextColor,
                BorderColor3 = Color3.fromRGB(0, 0, 0),
                Text = Options.Message,
                TextStrokeTransparency = 0,
                Name = "NotificationText",
                BackgroundTransparency = 1,
                TextXAlignment = Enum.TextXAlignment.Left,
                Size = UDim2.new(1, 0, 1, 0),
                BorderSizePixel = 0,
                TextSize = Library.UI.FontSize,
                BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                Parent = NotificationTextHolder
            })
            --
            Library:AddTheme(NotificationText, {
                TextColor3 = "TextColor"
            })
            --
            local BottomBar = Library:CreateObject("Frame", {
                Name = "BottomBar",
                Position = UDim2.new(0, 2, 1, -2),
                BorderColor3 = Color3.fromRGB(0, 0, 0),
                Size = UDim2.new(1, -2, 0, 2),
                BorderSizePixel = 0,
                BackgroundColor3 = Library.Theme.Default.Accent,
                Parent = NotificationDarkContrast
            })
            --
            Library:AddTheme(BottomBar, {
                BackgroundColor3 = "Accent"
            })
            --
            local NotificationFrame = {
                Class = "Notification",
                Object = NotificationFrameObject,
                Text = NotificationText,
            }
            --
            NotificationFrameObject.Position = Options.Position == "Top Left" and UDim2.new(0, -50, 0, 80 + (#Path * 28)) or UDim2.new(0, (Viewport.X / 2 - (NotificationText.TextBounds.X + 4) / 2) - 15, 1, -175)
            --
            do -- Functions
                function Notification:UpdatePositions()
                    local TotalHeight = 80
                    --
                    for Index = #Path, 1, -1 do
                        local Value = Path[Index]
                        local NewPosition = Options.Position == "Top Left" and UDim2.new(0, 5, 0, TotalHeight) or UDim2.new(0, Viewport.X / 2 - (Value.Text.TextBounds.X + 4) / 2, 1, -150 - (Index * 28))
                        --
                        Library:TweenObject(Value.Object, TweenInfo.new(0.4, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), {Position = NewPosition})
                        --
                        TotalHeight = TotalHeight + Value.Object.AbsoluteSize.Y + 2
                    end
                end
                --
                function Notification:RemoveFrame()
                    Library:TweenObject(NotificationFrameObject, TweenInfo.new(0.4, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), {BackgroundTransparency = 1})
                    Library:TweenObject(NotificationInline, TweenInfo.new(0.4, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), {BackgroundTransparency = 1})
                    Library:TweenObject(NotificationDarkContrast, TweenInfo.new(0.4, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), {BackgroundTransparency = 1})
                    Library:TweenObject(SideBar, TweenInfo.new(0.4, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), {BackgroundTransparency = 1})
                    Library:TweenObject(BottomBar, TweenInfo.new(0.4, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), {BackgroundTransparency = 1})
                    Library:TweenObject(NotificationText, TweenInfo.new(0.4, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), {TextTransparency = 1}, function()
                        NotificationFrameObject:Destroy()

                        table.remove(Path, table.find(Path, NotificationFrame))

                        Notification:UpdatePositions()
                    end)
                end
                --
                function Notification:UpdateText(Text)
                    NotificationText.Text = Text
                    NotificationFrameObject.Size = UDim2.new(NotificationFrameObject.Size.X.Scale, NotificationText.TextBounds.X + 15, 0, NotificationText.TextBounds.Y + 14)
                end
                --
                function Notification:Update()
                    Library:TweenObject(NotificationText, TweenInfo.new(0.4, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), {TextTransparency = 0})
                    NotificationFrameObject.Size = UDim2.new(NotificationFrameObject.Size.X.Scale, NotificationText.TextBounds.X + 15, 0, NotificationText.TextBounds.Y + 14)
                    --
                    local NewPosition = Options.Position == "Top Left" and UDim2.new(0, 5, 0, 50 + (#Path * 28)) or UDim2.new(0, Viewport.X / 2 - (NotificationText.TextBounds.X + 4) / 2, 1, -150)
                    --
                    Library:TweenObject(NotificationFrameObject, TweenInfo.new(0.25, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), {Position = UDim2.new(0, 5, 0, 50 + (#Path * 31))}, function()
                        Library:TweenObject(BottomBar, TweenInfo.new(Options.Delay, Enum.EasingStyle.Linear, Enum.EasingDirection.Out), {Size = UDim2.new(0, 0, 0, 2)}, function()
                            Notification:RemoveFrame()
                        end)
                    end)
                end
            end
            --
            Notification:Update()
            --
            table.insert(Path, 1, NotificationFrame)
            --
            Notification:UpdatePositions()
            --
            return Notification
        end
        --
        function Library:UpdateHighlight(State)
            Library.UI.HoverHighlight = State
        end
        --
        function Library:UpdateKeybindType(Type)
            Library.UI.KeybindType = Type
            --
            for Frame, List in Library.UI.KeybindTexts do
                List.TextLabel.Text = Type == "Upper" and (List.TextLabel.Text:upper() == "NONE" and "None" or List.TextLabel.Text:upper()) or List.TextLabel.Text:lower()
                List.TextLabel.Position = UDim2.new(List.TextLabel.Position.X.Scale, List.TextLabel.Position.X.Offset, List.TextLabel.Position.Y.Scale, (Type == "Upper" and 1 or 0))
                --
                if List.TextLabel.Text:upper() ~= "NONE" then
                    Frame.Size = UDim2.new(0, List.TextLabel.TextBounds.X + 23, 0, 14)
                    Frame.Position = UDim2.new(1, 0 - (List.Count - 1) * 31, 0, 2)
                end
            end
        end
        --
        function Library:UpdateGlows(Property, Value)
            local NewValue = 25 + (Value - 1) * (50 - 25) / (100 - 1)
            --
            for _, Frame in ScreenGui:GetChildren() do
                if Frame:IsA("Frame") and Frame.Name == "DropShadowHolder" then
                    local Glow = Frame:FindFirstChild("DropShadow")
                    --
                    Library.UI.WindowGlowThickness = NewValue
                    Glow.Size = UDim2.new(1, NewValue, 1, NewValue)
                end
            end
            --
            if Library.UI.IndicatorGlow then
                Library.UI.IndicatorGlow.Size = UDim2.new(1, NewValue, 1, NewValue)
            end
        end
        --
        function Library:UpdatePerformanceDrag(State)
            Library.UI.PerformanceDrag = State
        end
        --
        function Library:UpdateBlur(Property, Value)
            if Property == "Visible" then
                Library.UI.UseBlur = Value
                Library.UI.BlurObject.Enabled = Value
            else
                Library.UI.BlurObject.Size = Value
            end
        end
        --
        function Library:UpdateTweenInfo(Type, Value)
            if Type == "Style" then
                Library.UI.TweenEasingStyle = Value
            else
                Library.UI.TweenSpeed = Value
            end
        end
        --
        function Library:Unload()
            for Index, Value in Library.Connections do
                Value:Disconnect()
            end
            --
            for _, Objects in Library.Objects do
                Objects:Destroy()
            end
            --
            for _, Drawings in Library.Drawings do
                Drawings:Remove()
            end
            --
            ScreenGui:Destroy()
            ScreenGuiExtra:Destroy()
            ScreenGuiNotifications:Destroy()
            Blur:Destroy()
        end
        --
        function Library:Init()
            Library.UI.Initialized = true
			--
			if getgenv().AutoLoadConfig and isfile("LuckyHub/Configs/" .. getgenv().AutoLoadConfig .. ".cfg") then
				Library:LoadConfig(readfile("LuckyHub/Configs/" .. getgenv().AutoLoadConfig .. ".cfg"))
			end
            --
            Library:Connection(Camera:GetPropertyChangedSignal("ViewportSize"), function()
                Viewport = Camera.ViewportSize
                --
                MainNavigationOutline.Position = UDim2.fromOffset((Viewport.X / 2) - (MainNavigationOutline.Size.X.Offset / 2), 5)
            end)
        end
        --
        return Navigation
    end
end
